; The official HD AI - written by Promiskuitiv and Archon
; Get in contact with Promiskuitiv by sending a mail to Marius.Beck@gmx.de


; List of taunts it reacts to:

; Standard taunts.
; 33 - Stop slinging resources. If slinging is requested early and is immediately canceled it may mess up the strategy.
; 38 - Sling Resources. Human player only, stops any unit production except for civilian units.
; 100 - Forbids the AI to resign.
; 101 - Cancels the 100 taunt.
; 200 - Enables resource cheats - only works on 'hardest' difficulty.
; 222 - Same as 31, but more likely to help (only taunt this if you really need it).
; 230 - Tells the AI to go for a monk rush (taunt only works on civs who have good monks).
; 231-238 - Chat 230+[enemy player number] to make the AI target this enemy for 10 minutes.
; 250 - Chats information about the current strategy.





;Reusing obsolete strategic numbers that have no other effect.
(defconst sn-current-age 193);tracks our current age
(defconst sn-military-level 190); compares our military with enemy
(defconst sn-resource-control 191); 0=spend res free, 1=navy, 2=research only; > 2 specific items
(defconst sn-infantry-threat 53)
(defconst sn-archer-threat 64)
(defconst sn-cavalry-threat 65)

;Goals
(defconst increase-town-size-goal 1); this increases town size when needed, 0 = no increase, 2 = building placed this rule pass, else increase
(defconst attack-goal 2)
(defconst strategy-goal 3)
(defconst unit-goal 4)
(defconst train-civ-goal 5);1=train villagers, !=1 no villagers
(defconst control-goal 6); 6 = allow to be shot, 7 = shot, also controls if stone for a castle is needed.
(defconst anti-cavalry-threat-goal 7)
(defconst monk-threat-goal 8)
(defconst enemy-goal 9); keep track of what our foe is doing
(defconst farm-goal 10);enable/disable farming
(defconst under-attack-goal 11); town  under attack or just a little harass?
(defconst enemy-boats-goal 12)
(defconst ffa-game-goal 13)
(defconst need-loom-goal 14)
(defconst escrow-purpose-goal 15); keeps track on what we use our escrow
(defconst spread-military-goal 16); spread military every couple of minutes to prevent villagers stuck
(defconst uu-up-goal 17); use escrow to upgrade uu
(defconst hostilities-goal 18); set this flag when we're attacked or attacking - avoid rule too long error
(defconst ranged-unit-type-goal 19);shows the ranged unit we use
(defconst retreat-now-goal 20); use to retreat with UP, condition: 1=always, 2=when attacking, 3=attack conditions false
(defconst housing-goal 21); used to build multiple houses with UP
(defconst anti-monk-threat-goal 22)
(defconst enemy-sighted-goal 23); when enemy activities detected, split the attack groups
(defconst attack-status-goal 24); indicates if we stop or regroup the attack
(defconst forward-threat-goal 25); enemy tower rush threat
(defconst enemy-fortifications-goal 26); delay attacks if enemy has many castles and walled with castle
(defconst restart-attack-goal 27); restarts attack in team games if TSA was reduced to place a building
(defconst save-wood-goal 28); controls spending wood
(defconst meso-enemy-goal 29); enemy has a meso civ; saves elements in a rule
(defconst nr-map-goal 30); focus on eco in easily wall-able maps vs humans
(defconst tribute-goal 31); ask for resources
(defconst assistance 32)
(defconst treaty-time 33)
(defconst tc-dodging-goal 34); move scout out of TC fire
(defconst kill-scouts-goal 35); kill enemy scouts
(defconst forward-goal 36); -1 no fwd, 1 fwd, ID of building = building requested
(defconst gather-inside-goal 37)
(defconst hunting-goal 38); controls hunting
(defconst micro-goal 41)
(defconst math-goal 42); temporary stored values
(defconst math-goal2 43)
(defconst math-goal3 44)
(defconst math-goal4 45)
(defconst position-goal 46); detect if we're pocket (=2) or flank (=1) player; was here before that many goals were used, shared with other AI
(defconst raid-goal 47); raiding weak player's eco.
(defconst closest-enemy-goal 48); stores player number of nearest enemy
(defconst threat-time 49); stores time in miliseconds we were last attacked
(defconst threat-player 50); stores player number of the attacker
(defconst threat-source 51); unit class of the last enemy attacker
(defconst threat-target 52); unit class of the our last attacked unit
(defconst winning-player 53); player number of enemy winning by specifal victory condition
(defconst victory-type 54); winning type
(defconst victory-time 55); time left
(defconst retargetenemy 56)
(defconst defendchat 57)
(defconst dark-build-order-goal 58); 1 = dock first, 2 = skip farms on a map that has more berries
(defconst closest-ally-goal 59); stores closes flank if pocket instead
(defconst forgotten 60); set to 1 if the forgotten empires expansion is detected
(defconst attacking-enemy-goal 61); stores player number of the attacker; shared with Barbarian
(defconst reset 62); prov
(defconst relic-count 63)
(defconst stanceg 64)
(defconst request 65)
(defconst nomad 66)
(defconst landnomad 67)
(defconst request2 68)
(defconst jumpgoal 69)
(defconst navy-count 70)
(defconst max-navy 71)
(defconst biggest-enemy-navy 72)
(defconst enemy-focus-navy 73)
(defconst allies 74)
(defconst enemies 75)
(defconst trade-units 76)
(defconst feitoria-cap 77)
(defconst feitoria-count 78)
(defconst custom-civ-pop 79)
(defconst FDTaunt 80)
(defconst FDTaunt2 81)

(defconst team-coordination-goal 392)


;SN/Goal Values
(defconst yes 1)
(defconst no 0)
(defconst dark 78)
(defconst df-transit 79)
(defconst feudal 80)
(defconst fc-transit 81)
(defconst castle 82)
(defconst ci-transit 83)
(defconst imperial 84)
(defconst teambalance 192)
(defconst flush 200)
(defconst rush 201)
(defconst boom 202)
(defconst fast-imp 203)
(defconst sling 204)
(defconst drush 205); not used ... yet
(defconst mix 1)
(defconst belated-flush-defense 5)
(defconst aggressive-rush 6)
(defconst shot 7)
(defconst uu 8)
(defconst navy 4000)
(defconst flank 1)
(defconst pocket 2)
(defconst retreat 1)
(defconst groups 2)
(defconst tsa 3)


;Timers
(defconst increase-town-size-timer 1)
(defconst reset-town-size-timer 2)
(defconst scouting-timer 3)
(defconst attack-timer 4)
(defconst spread-military-timer 5)
; 6 used for wr
(defconst under-attack-timer 7)
(defconst civ-explore-timer 8); should
(defconst lumber-timer 8); be fine
(defconst one-minute-timer 9)
(defconst tribute-timer 10)
(defconst micro-timer 11)
(defconst navy-attack-timer 12); don't spam attack or we can't retreat boats from fortifications
(defconst help-ally-timer 13); indicated when we sent help to an ally
(defconst FDrop 14); timer for forcedrop to continuously train villager
(defconst retreat-timer 15); timer to avoid looping retreat unit commands
(defconst hunting-timer 16)
(defconst garrison-timer 17)
(defconst disable-defend-groups-timer 18); always enable defending again
(defconst monk-micro-timer 19)
(defconst misc-micro-timer 20)
(defconst train-forward-timer 21)
(defconst rally-units-timer 22)
(defconst reset-units-timer 23)
(defconst attack-chat 24)
(defconst stance 25)
(defconst thirty 26)
(defconst tensec 27)
(defconst two-minute-timer 28)
(defconst defend-timer 29)
(defconst resign-timer 30)
(defconst human-coop-timer 31)
(defconst tribute-timer2 32)
(defconst reset-timer 33)
(defconst boar-timer 34)

;Unit IDs
(defconst male-hunter 122)
(defconst female-hunter 216)
(defconst male-forager 120)
(defconst female-forager 354)
(defconst male-shepherd 592)
(defconst female-shepherd 590)
(defconst female-gold-miner 579)
(defconst male-gold-miner 581)
(defconst hunter 976)
(defconst food-gatherer 978)
(defconst ri-herbal-medicine 441)
(defconst ri-perfusion 457)
(defconst ri-anarchy 16)
(defconst ri-spies 408); useless for AIs
(defconst ri-treadmill-crane 54)
(defconst unpacked-trebuchet 42)
(defconst b-husk-line 759)
(defconst ranged-unit-class 900)
(defconst building-class 903)
(defconst villager-class 904)
(defconst infantry-class 906)
(defconst cavalry-unit-class 912)
(defconst siege-unit-class 913)
(defconst monastery-class 918)
(defconst mounted-gun-class 923)
(defconst cavalry-archer-class 936)
(defconst gunpowder-class 944)
(defconst scorpion-class 955)
(defconst tower-class 952)
(defconst warship-class 922)
(defconst tree-class 915)
(defconst forage-bush 59)
(defconst gold-mine 66)
(defconst stone-mine 102)
(defconst shore-fish 933)
(defconst sea-fish 905)
(defconst sheep 958)
(defconst relic 285)
(defconst revealer 112)
(defconst flare 274)
(defconst tc-arrow 54)
(defconst watch-tower-arrow 786)
(defconst castle-arrow 746)
(defconst castle-arrow-chemistry 747)

;User Patch
(defconst game-time 0); FactId Constants
(defconst population-cap 1)
(defconst population-headroom 2)
(defconst housing-headroom 3)
(defconst idle-farm-count 4)
(defconst food-amount 5)
(defconst wood-amount 6)
(defconst stone-amount 7)
(defconst gold-amount 8)
(defconst escrow-amount 9)
(defconst commodity-buying-price 10)
(defconst commodity-selling-price 11)
(defconst dropsite-min-distance 12)
(defconst soldier-count 13)
(defconst attack-soldier-count 14)
(defconst defend-soldier-count 15)
(defconst warboat-count 16)
(defconst attack-warboat-count 17)
(defconst defend-warboat-count 18)
(defconst current-age 19)
(defconst current-score 20)
(defconst civilization 21)
(defconst player-number 22)
(defconst player-in-game 23)
(defconst unit-count 24)
(defconst unit-type-count 25)
(defconst unit-type-count-total 26)
(defconst building-count 27)
(defconst building-type-count 28)
(defconst building-type-count-total 29)
(defconst population 30)
(defconst military-population 31)
(defconst civilian-population 32)
(defconst random-number 33)
(defconst resource-amount 34)
(defconst player-distance 35)
(defconst allied-goal 36)
(defconst allied-sn 37)
(defconst resource-percent 38)
(defconst enemy-buildings-in-town 39)
(defconst enemy-units-in-town 40)
(defconst enemy-villagers-in-town 41)
(defconst players-in-game 42)
(defconst defender-count 43)
(defconst building-type-in-town 44)
(defconst unit-type-in-town 45)
(defconst villager-type-in-town 46)
(defconst gaia-type-count 47)
(defconst gaia-type-count-total 48)
(defconst cc-gaia-type-count 49)
(defconst aggressive 0)
(defconst defensive 1)
(defconst stand-ground 2)
(defconst no-attack 3)
(defconst projectile-town-center 0); Define ProjectileType Constants
(defconst projectile-castle 1)
(defconst projectile-watch-tower 2)
(defconst projectile-bombard-tower 3)
(defconst projectile-ship 4)
(defconst projectile-siege 5)
(defconst projectile-fortification 6)
(defconst projectile-any 7)
(defconst find-attacker 0); Define FindPlayerMethod Constants
(defconst find-random 1)
(defconst find-closest 2)
(defconst find-ordered 3)
(defconst research-unavailable 0); Define ResearchState Constants
(defconst research-available 1)
(defconst research-pending 2)
(defconst research-complete 3)
(defconst timer-disabled 0); Define TimerState Constants
(defconst timer-triggered 1)
(defconst timer-running 2)
(defconst group-type-land-attack 100);Define GroupType Constants
(defconst group-type-land-explore 101)
(defconst group-type-land-trade 109)
(defconst group-type-water-attack 102)
(defconst group-type-water-explore 103)
(defconst group-type-water-trade 106)
(defconst group-type-transport-ship 104)
(defconst group-type-fishing-ship 105)
(defconst group-type-forward-builder 107)
(defconst group-type-monk 108)
(defconst amount-tribute-inefficiency 46)
(defconst position-center 0)
(defconst position-opposite 1)
(defconst position-corner 2)
(defconst position-enemy 3)
(defconst position-border 4)
(defconst position-mirror 5)
(defconst position-flank 6)
(defconst position-zero 7)
(defconst position-map-size 8)
(defconst position-self 9)
(defconst position-target 10)
(defconst position-focus 11)
(defconst position-object 12)
(defconst position-point 13)
(defconst sort-targets 0)
(defconst sort-random 1)
(defconst sort-distance 2)
(defconst sort-hitpoints 3)
(defconst sort-range 4)
;(defconst find-attacker 0)
;(defconst find-random 1)
;(defconst find-closest 2)
;(defconst find-ordered 3)
(defconst ally 0)
(defconst neutral 1)
(defconst any 2)
(defconst enemy 3)

(defconst forage-food 16)
(defconst sheep-food 958)
(defconst boar-food 910)


#load-if-defined CIV-TAGS-FOR-EDITOR
(defconst ITALIAN-CIV 0)
(defconst MAGYAR-CIV 0)
(defconst INDIAN-CIV 0)
(defconst SLAVIC-CIV 0)
(defconst INCAN-CIV 0)
(defconst PORTUGUESE-CIV 0)
(defconst ETHIOPIAN-CIV 0)
(defconst MALIAN-CIV 0)
(defconst BERBERS-CIV 0)
(defconst KHMER-CIV 0)
(defconst MALAY-CIV 0)
(defconst BURMESE-CIV 0)
(defconst VIETNAMESE-CIV 0)
#end-if
(defconst italian 19)
(defconst indian 20)
(defconst incan 21)
(defconst magyar 22)
(defconst slavic 23)
(defconst portuguese 24)
(defconst ethiopian 25)
(defconst malian 26)
(defconst berbers 27)
(defconst khmer 28)
(defconst malay 29)
(defconst burmese 30)
(defconst vietnamese 31)
(defconst stable-tarkan 886)
(defconst stable-elite-tarkan 887)
(defconst boyar 876)
(defconst elite-boyar 878)
(defconst kamayuk 879)
(defconst elite-kamayuk 881)
(defconst slinger 185)
(defconst ri-elite-magyar-huszar 472)
(defconst magyar-huszar 869)
(defconst elite-magyar-huszar 871)
(defconst ri-elite-elephant-archer 481)
(defconst elephant-archer 873)
(defconst elite-elephant-archer 875)
(defconst imperial-camel 897)
(defconst ri-elite-genoese-crossbow 468)
(defconst genoese-crossbowman 866)
(defconst elite-genoese-crossbowman 868)
(defconst heavy-eagle-warrior 753)
(defconst condottiero 184)
(defconst ri-chivalry 493)
(defconst ri-inquisition 492)
(defconst ri-sipahi 491)
(defconst ri-madrasah 490)
(defconst ri-ironclad 489)
(defconst ri-boiling-oil 488)
(defconst ri-nomads 487)
(defconst ri-panokseon 486)
(defconst ri-yasama 484)
(defconst ri-marauders 483)
(defconst ri-atlatl 460)
(defconst ri-war-wolf 461)
(defconst ri-greek-fire 464)
(defconst ri-chieftains 463)
(defconst ri-stronghold 482)
(defconst ri-great-wall 462)
(defconst ri-orthodoxy 512)
(defconst ri-druzhina 513)
(defconst ri-elite-boyar 504)
(defconst ri-andean-sling 516)
(defconst ri-couriers 517)
(defconst ri-elite-kamayuk 509)
(defconst ri-sultans 506)
(defconst ri-shatagni 507)
(defconst ri-imperial-camel 521)
(defconst ri-mercenaries 514)
(defconst ri-recurve-bow 515)
(defconst ri-silk-road 499)
(defconst ri-pavise 494)
(defconst ri-revetments 525)
(defconst ri-eagle-warrior 384)
(defconst ri-gillnets 65)
(defconst ri-hunting-dogs 526)
(defconst ri-obsidian-arrows 485)
(defconst siege-tower 885)
(defconst upgraded-palisade-wall 119)
(defconst sea-tower 785)
(defconst sea-wall 788)
(defconst kamayuk-line -258)
(defconst elephant-archer-line -261)
(defconst genoese-crossbowman-line -262)
(defconst magyar-huszar-line -259)
(defconst boyar-line -260)

(defconst organ-gun 1001)
(defconst elite-organ-gun 1003)
(defconst caravel 1004)
(defconst elite-caravel 1006)
(defconst camel-archer 1007)
(defconst elite-camel-archer 1009)
(defconst genitour 1010); 1079
(defconst elite-genitour 1012)
(defconst gbeto 1013)
(defconst elite-gbeto 1015)
(defconst shotel-warrior 1016)
(defconst elite-shotel-warrior 1018)
(defconst camel-archer-line -285)
(defconst genitour-line -250)
(defconst shotel-line -251)
(defconst gbeto-line -252)
(defconst caravel-line -254)
(defconst organ-gun-line -253)
(defconst fire-galley 1103)
(defconst demo-raft 1104)
;(defconst siege-tower 1105)
(defconst ri-elite-camel-archer 565)
(defconst ri-elite-organ-gun 563)
(defconst ri-elite-gbeto 567)
(defconst ri-shotel 569)
(defconst ri-carrack 572)
(defconst ri-arquebus 573)
(defconst ri-royal-heirs 574)
(defconst ri-torsion 575)
(defconst ri-tigui 576)
(defconst ri-mandekalu 577)
(defconst ri-expeditions 578)
(defconst ri-camel-corps 579)
(defconst ri-elite-caravel 597)
(defconst ri-elite-genitour 599)
(defconst ri-arson 602)
(defconst ri-arrowslits 608)

; unit ids
(defconst ballista-elephant 1120)
(defconst elite-ballista-elephant 1122)
(defconst rattan-archer 1129)
(defconst elite-rattan-archer 1131)
(defconst arambai 1126)
(defconst elite-arambai 1128)
(defconst battle-elephant 1134)
(defconst elite-battle-elephant 1123)
(defconst karambit-warrior 1123)
(defconst elite-karambit-warrior 1125)
(defconst imperial-skirmisher 1155)
; research ids
(defconst ri-elite-ballista-elephant 615)
(defconst ri-elite-karambit-warrior 617)
(defconst ri-elite-arambai 619)
(defconst ri-elite-rattan-archer 621)
(defconst ri-tusk-swords 622)
(defconst ri-double-crossbow 623)
(defconst ri-thalassocracy 624)
(defconst ri-forced-levy 625)
(defconst ri-howdah 626)
(defconst ri-manipur-cavalry 627)
(defconst ri-chatras 628)
(defconst ri-paper-money 629)
(defconst ri-elite-battle-elephant 631)
(defconst ri-imperial-skirmisher 655)
; unit lines
(defconst ballista-elephant-line -249)
(defconst rattan-archer-line -248)
(defconst arambai-line -247)
(defconst battle-elephant-line -246)
(defconst karambit-warrior-line -245)


; Other SNs
(defconst sn-food-modifier-percentage 156)
(defconst sn-wood-modifier-percentage 157)
(defconst sn-stone-modifier-percentage 158)
(defconst sn-gold-modifier-percentage 159)

;civ specific
#load-if-defined AZTEC-CIV
(defconst dark-age-villager 28)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 202)
(defconst default-unit eagle-warrior)
(defconst unique-unit-food 110);minimum food amount
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit eagle-warrior)
(defconst get-lightcav 0)
(defconst scout-unit eagle-warrior-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 600)
(defconst sling-number 100); > 10 actually never slings
(defconst sling-two 0)
(defconst blot-size 0)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 15)
(defconst villager-castle 12)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 10)
(defconst number-stables 5)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 10)
(defconst pidm-wood 10)
(defconst pidm-gold 75)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 36)
(defconst uu-gold 24)
(defconst uu-stone 4)
(defconst uu-food2 36)
(defconst uu-wood2 30)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1000)
(defconst max-gold-escrow 500)
#end-if
#load-if-defined BERBERS-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 0)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst default-ranged archer)
#else
(defconst default-ranged scorpion)
#end-if
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 195)
(defconst sling-number 60)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 9)
(defconst villager-stable 3)
(defconst villager-archery-range 5)
(defconst villager-monastery 7)
(defconst villager-town-center 18)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 8)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 57)
(defconst pidm-stone 3)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 34)
(defconst uu-wood2 37)
(defconst uu-gold2 24)
(defconst uu-stone2 5)
(defconst ci-uu-switch-food 34)
(defconst ci-uu-switch-wood 32)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1000)
(defconst max-gold-escrow 500)
#end-if
#load-if-defined BRITON-CIV
(defconst dark-age-villager 28)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 202)
(defconst default-unit archer)
(defconst unique-unit-food 0)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit my-unique-unit-line)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 2)
(defconst military-level-flush-aggressive 1)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 90)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 12)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 3)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 0)
(defconst number-archery-ranges 9)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 47)
(defconst pidm-gold 48)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 34)
(defconst pidm-gold2 35)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 30)
(defconst uu-wood2 36)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 30)
(defconst ci-uu-switch-wood 40)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 850)
(defconst max-gold-escrow 850)
#end-if
#load-if-defined BURMESE-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
(defconst default-unit militiaman-line)
(defconst unique-unit-food 0)
(defconst default-flush-unit archer); militiaman-line)
(defconst no-gold-flush-unit skirmisher)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst default-ranged archer)
#else
(defconst default-ranged scorpion)
#end-if
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 250)
(defconst sling-number 90)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 20)
(defconst villager-archery-range 14)
(defconst villager-monastery 12)
(defconst villager-castle 10)
(defconst villager-mining-camp 14)
(defconst villager-town-center 18)
(defconst villager-siege-workshop 15)
(defconst villager-market 9)
(defconst number-barracks 10)
(defconst number-stables 4)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 47)
(defconst pidm-wood 15)
(defconst pidm-gold 35)
(defconst pidm-stone 3)
(defconst pidm-food2 36)
(defconst pidm-wood2 24)
(defconst pidm-gold2 35)
(defconst pidm-stone2 5)
(defconst uu-food 37)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 3)
(defconst uu-food2 37)
(defconst uu-wood2 38)
(defconst uu-gold2 20)
(defconst uu-stone2 5)
(defconst ci-uu-switch-food 40)
(defconst ci-uu-switch-wood 34)
(defconst ci-uu-switch-gold 20)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 1000)
(defconst max-food-escrow 0)
(defconst max-gold-escrow 500)
#end-if
#load-if-defined BYZANTINE-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit skirmisher)
(defconst unique-unit-food 120)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit skirmisher)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 2)
(defconst military-level-flush-aggressive 1)
(defconst allow-forward-castle 0)
(defconst sling-time 270)
(defconst sling-number 80)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 9)
(defconst villager-stable 3)
(defconst villager-archery-range 12)
(defconst villager-monastery 12)
(defconst villager-town-center 15)
(defconst villager-castle 3)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 5)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 10)
(defconst pidm-wood 10)
(defconst pidm-gold 75)
(defconst pidm-stone 5)
(defconst pidm-food2 37)
(defconst pidm-wood2 32)
(defconst pidm-gold2 26)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 39)
(defconst uu-wood2 39)
(defconst uu-gold2 18)
(defconst uu-stone2 3)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 37)
(defconst ci-uu-switch-gold 18)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1600)
(defconst max-gold-escrow 800)
#end-if
#load-if-defined CELTIC-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
(defconst default-unit militiaman-line)
(defconst unique-unit-food 115)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst default-ranged archer)
#else
(defconst default-ranged scorpion)
#end-if
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 2)
(defconst military-level-flush-aggressive 1)
(defconst allow-forward-castle 0)
(defconst sling-time 210)
(defconst sling-number 55)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 9)
(defconst number-stables 3)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 16)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 55)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 39)
(defconst uu-wood 45)
(defconst uu-gold 13)
(defconst uu-stone 3)
(defconst uu-food2 40)
(defconst uu-wood2 29)
(defconst uu-gold2 27)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1000)
(defconst max-gold-escrow 800)
#end-if
#load-if-defined CHINESE-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 202)
(defconst default-unit knight)
(defconst unique-unit-food 0)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
(defconst default-ranged archer)
(defconst pocket-unit my-unique-unit-line)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 260)
(defconst sling-number 70)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 9)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 15)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 8)
(defconst number-archery-ranges 6)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 47)
(defconst pidm-gold 48)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 34)
(defconst pidm-gold2 35)
(defconst pidm-stone2 5)
(defconst uu-food 39)
(defconst uu-wood 45)
(defconst uu-gold 13)
(defconst uu-stone 3)
(defconst uu-food2 40)
(defconst uu-wood2 29)
(defconst uu-gold2 27)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 34)
(defconst ci-uu-switch-wood 34)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 760)
(defconst max-gold-escrow 760)
#end-if
#load-if-defined ETHIOPIAN-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
(defconst default-unit archer)
(defconst unique-unit-food 90)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 2)
(defconst military-level-flush-aggressive 1)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 0)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 15)
(defconst villager-town-center 15)
(defconst villager-castle 4)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 11)
(defconst villager-market 17)
(defconst number-barracks 7)
(defconst number-stables 5)
(defconst number-archery-ranges 8)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 35)
(defconst pidm-wood 10)
(defconst pidm-gold 50)
(defconst pidm-stone 5)
(defconst pidm-food2 36)
(defconst pidm-wood2 30)
(defconst pidm-gold2 29)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 33)
(defconst uu-wood2 39)
(defconst uu-gold2 23)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 39)
(defconst ci-uu-switch-wood 29)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1200)
(defconst max-gold-escrow 550)
#end-if
#load-if-defined FRANKISH-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 0)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 9)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 18)
(defconst villager-castle 8)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 14)
(defconst villager-market 8)
(defconst number-barracks 8)
(defconst number-stables 10)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 15)
(defconst pidm-food 45)
(defconst pidm-wood 0)
(defconst pidm-gold 50)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 44)
(defconst uu-wood2 26)
(defconst uu-gold2 25)
(defconst uu-stone2 5)
(defconst ci-uu-switch-food 43)
(defconst ci-uu-switch-wood 26)
(defconst ci-uu-switch-gold 25)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1000)
(defconst max-gold-escrow 750)
#end-if
#load-if-defined GOTHIC-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
(defconst default-unit militiaman-line)
(defconst unique-unit-food 100)
(defconst default-flush-unit militiaman-line)
(defconst no-gold-flush-unit skirmisher)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst default-ranged archer)
#else
(defconst default-ranged scorpion)
#end-if
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 250)
(defconst sling-number 40)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 20)
(defconst villager-archery-range 14)
(defconst villager-monastery 12)
(defconst villager-castle 10)
(defconst villager-mining-camp 14)
(defconst villager-town-center 18)
(defconst villager-siege-workshop 15)
(defconst villager-market 9)
(defconst number-barracks 14)
(defconst number-stables 1)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 52)
(defconst pidm-wood 12)
(defconst pidm-gold 34)
(defconst pidm-stone 2)
(defconst pidm-food2 36)
(defconst pidm-wood2 23)
(defconst pidm-gold2 36)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 51)
(defconst uu-wood2 28)
(defconst uu-gold2 19)
(defconst uu-stone2 2)
(defconst ci-uu-switch-food 46)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 20)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1200)
(defconst max-gold-escrow 550)
#end-if
#load-if-defined HUN-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 0)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
(defconst default-ranged cavalry-archer)
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-castle 10)
(defconst villager-archery-range 8)
(defconst villager-monastery 6)
(defconst villager-mining-camp 16)
(defconst villager-town-center 15)
(defconst villager-siege-workshop 5)
(defconst villager-market 12)
(defconst number-barracks 9)
(defconst number-stables 8)
(defconst number-archery-ranges 12)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 30)
(defconst pidm-gold 67)
(defconst pidm-stone 3)
(defconst pidm-food2 30)
(defconst pidm-wood2 32)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 30)
(defconst uu-wood2 36)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1000)
(defconst max-gold-escrow 500)
#end-if
#load-if-defined INCAN-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 202)
(defconst default-unit archer)
(defconst unique-unit-food 110)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit eagle-warrior)
(defconst get-lightcav 0)
(defconst scout-unit eagle-warrior-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 16)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 9)
(defconst number-stables 1)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 57)
(defconst pidm-stone 3)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 36)
(defconst uu-gold 24)
(defconst uu-stone 4)
(defconst uu-food2 41)
(defconst uu-wood2 27)
(defconst uu-gold2 28)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 36)
(defconst ci-uu-switch-wood 32)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 900)
(defconst max-gold-escrow 500)
#end-if
#load-if-defined INDIAN-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit skirmisher)
(defconst unique-unit-food 160)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 195)
(defconst sling-number 60)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 9)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 18)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 9)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 57)
(defconst pidm-stone 3)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 38)
(defconst uu-wood2 28)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 42)
(defconst ci-uu-switch-wood 24)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1000)
(defconst max-gold-escrow 800)
#end-if
#load-if-defined ITALIAN-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit archer)
(defconst unique-unit-food 0)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 12)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 18)
(defconst villager-castle 3)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 9)
(defconst number-stables 1)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 57)
(defconst pidm-stone 3)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 38)
(defconst uu-wood2 28)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1000)
(defconst max-gold-escrow 800)
#end-if
#load-if-defined JAPANESE-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 202)
(defconst default-unit archer)
(defconst unique-unit-food 110)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit archer)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 200)
(defconst sling-number 55)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 9)
(defconst number-stables 1)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 16)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 57)
(defconst pidm-stone 3)
(defconst pidm-food2 38)
(defconst pidm-wood2 30)
(defconst pidm-gold2 27)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 38)
(defconst uu-wood2 28)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 950)
(defconst max-gold-escrow 875)
#end-if
#load-if-defined KHMER-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 202)
(defconst default-unit battle-elephant)
(defconst unique-unit-food 150)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 210)
(defconst sling-number 95)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 4)
(defconst number-stables 8)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 16)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 55)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 39)
(defconst uu-wood 45)
(defconst uu-gold 13)
(defconst uu-stone 3)
(defconst uu-food2 40)
(defconst uu-wood2 29)
(defconst uu-gold2 27)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 38)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1000)
(defconst max-gold-escrow 500)
#end-if
#load-if-defined KOREAN-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 200)
(defconst pocket-strategy 202)
(defconst default-unit my-unique-unit-line)
(defconst unique-unit-food 0)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit my-unique-unit-line)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 180)
(defconst sling-number 20)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 16)
(defconst villager-archery-range 13)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 4)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 8)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 1)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 58)
(defconst pidm-gold 37)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 39)
(defconst pidm-gold2 30)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 48)
(defconst uu-gold 12)
(defconst uu-stone 4)
(defconst uu-food2 25)
(defconst uu-wood2 44)
(defconst uu-gold2 25)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 28)
(defconst ci-uu-switch-wood 40)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 1000)
(defconst max-food-escrow 0)
(defconst max-gold-escrow 800)
#end-if
#load-if-defined MAGYAR-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 130)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst default-ranged archer)
#else
(defconst default-ranged cavalry-archer)
#end-if
(defconst pocket-unit knight)
(defconst get-lightcav 0); uu instead
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 7)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 18)
(defconst villager-castle 12)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 14)
(defconst villager-market 17)
(defconst number-barracks 8)
(defconst number-stables 6)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 57)
(defconst pidm-stone 3)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 36)
(defconst uu-gold 24)
(defconst uu-stone 4)
(defconst uu-food2 42)
(defconst uu-wood2 24)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 32)
(defconst ci-uu-switch-wood 36)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 800)
(defconst max-gold-escrow 600)
#end-if
#load-if-defined MALAY-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201); 200
(defconst pocket-strategy 202)
(defconst default-unit militiaman-line)
(defconst unique-unit-food 80)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit archer)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 600)
(defconst sling-number 95)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 9)
(defconst villager-archery-range 6)
(defconst villager-monastery 9)
(defconst villager-town-center 7)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 8)
(defconst number-stables 2)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 57)
(defconst pidm-stone 3)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 38)
(defconst uu-wood2 28)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 46)
(defconst ci-uu-switch-wood 26)
(defconst ci-uu-switch-gold 22)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 950)
(defconst max-gold-escrow 875)
#end-if
#load-if-defined MALIAN-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
(defconst default-unit militiaman-line)
(defconst unique-unit-food 100)
(defconst default-flush-unit militiaman-line)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 250)
(defconst sling-number 40)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 19)
(defconst villager-archery-range 12)
(defconst villager-monastery 12)
(defconst villager-castle 10)
(defconst villager-mining-camp 14)
(defconst villager-town-center 18)
(defconst villager-siege-workshop 15)
(defconst villager-market 9)
(defconst number-barracks 9)
(defconst number-stables 4)
(defconst number-archery-ranges 6)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 52)
(defconst pidm-wood 12)
(defconst pidm-gold 33)
(defconst pidm-stone 3)
(defconst pidm-food2 36)
(defconst pidm-wood2 23)
(defconst pidm-gold2 36)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 51)
(defconst uu-wood2 28)
(defconst uu-gold2 19)
(defconst uu-stone2 2)
(defconst ci-uu-switch-food 46)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 20)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 900)
(defconst max-gold-escrow 600)
#end-if
#load-if-defined MAYAN-CIV
(defconst dark-age-villager 28)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 202)
(defconst default-unit archer)
(defconst unique-unit-food 0)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit my-unique-unit-line)
(defconst get-lightcav 0)
(defconst scout-unit eagle-warrior-line)
(defconst military-level-flush 2)
(defconst military-level-flush-aggressive 1)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 0)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 14)
(defconst villager-monastery 15)
(defconst villager-town-center 15)
(defconst villager-castle 4)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 12)
(defconst villager-market 17)
(defconst number-barracks 7)
(defconst number-stables 0)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 47)
(defconst pidm-gold 48)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 34)
(defconst pidm-gold2 35)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 33)
(defconst uu-wood2 39)
(defconst uu-gold2 23)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 28)
(defconst ci-uu-switch-wood 38)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst max-wood-escrow 1000)
(defconst max-food-escrow 500)
(defconst max-gold-escrow 0)
#end-if
#load-if-defined MONGOL-CIV
(defconst dark-age-villager 28)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 202)
(defconst default-unit knight)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
(defconst unique-unit-food 0)
(defconst default-ranged cavalry-archer)
(defconst pocket-unit my-unique-unit-line)
(defconst get-lightcav 1)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 230)
(defconst sling-number 50)
(defconst sling-two 0)
(defconst blot-size 0)
(defconst villager-barracks 14)
(defconst villager-stable 3)
(defconst villager-archery-range 14)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 3)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 8)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 5)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 30)
(defconst pidm-gold 65)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 34)
(defconst pidm-gold2 35)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 30)
(defconst uu-wood2 36)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 35)
(defconst ci-uu-switch-wood 33)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1100)
(defconst max-gold-escrow 675)
#end-if
#load-if-defined PERSIAN-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
(defconst unique-unit-food 0)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 240)
(defconst sling-number 60)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 7)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 18)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 7)
(defconst villager-market 17)
(defconst number-barracks 4)
(defconst number-stables 6)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 37)
(defconst pidm-wood 0)
(defconst pidm-gold 58)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 43)
(defconst uu-wood2 24)
(defconst uu-gold2 29)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 40)
(defconst ci-uu-switch-wood 28)
(defconst ci-uu-switch-gold 20)
(defconst ci-uu-switch-stone 12)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1600)
(defconst max-gold-escrow 1200)
#end-if
#load-if-defined PORTUGUESE-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 0)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 180)
(defconst sling-number 20)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 15)
(defconst villager-archery-range 6)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 4)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 9)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 2)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 58)
(defconst pidm-gold 37)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 39)
(defconst pidm-gold2 30)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 48)
(defconst uu-gold 12)
(defconst uu-stone 4)
(defconst uu-food2 25)
(defconst uu-wood2 44)
(defconst uu-gold2 25)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 28)
(defconst ci-uu-switch-wood 40)
(defconst ci-uu-switch-gold 26)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1200)
(defconst max-gold-escrow 500)
#end-if
#load-if-defined SARACEN-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 200)
(defconst pocket-strategy 201)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst default-unit knight)
#else
(defconst default-unit my-unique-unit-line)
#end-if
(defconst unique-unit-food 135)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
(defconst default-ranged archer)
(defconst pocket-unit archer)
(defconst get-lightcav 1)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 190)
(defconst sling-number 25)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 9)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 15)
(defconst villager-town-center 18)
(defconst villager-castle 9)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 9)
(defconst number-barracks 6)
(defconst number-stables 9)
(defconst number-archery-ranges 8)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 10)
(defconst pidm-wood 10)
(defconst pidm-gold 75)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 30)
(defconst uu-wood2 36)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 33)
(defconst ci-uu-switch-wood 33)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 600)
(defconst max-gold-escrow 500)
(defconst market-cost 100)
#else
#load-if-defined MALIAN-CIV
(defconst market-cost 149)
#else
(defconst market-cost 175)
#end-if
#end-if
#load-if-defined SLAVIC-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 202)
(defconst default-unit knight)
(defconst unique-unit-food 100)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
#load-if-not-defined DEATH-MATCH
(defconst default-ranged monk)
#else
(defconst default-ranged archer)
#end-if
(defconst pocket-unit knight);scorpion)
(defconst get-lightcav 1)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 2)
(defconst villager-stable 16)
(defconst villager-archery-range 16)
(defconst villager-monastery 6)
(defconst villager-town-center 16)
(defconst villager-castle 4)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 6)
(defconst villager-market 17)
(defconst number-barracks 4)
(defconst number-stables 4)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 57)
(defconst pidm-stone 3)
(defconst pidm-food2 34)
(defconst pidm-wood2 24)
(defconst pidm-gold2 37)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 36)
(defconst uu-gold 24)
(defconst uu-stone 4)
(defconst uu-food2 36)
(defconst uu-wood2 31)
(defconst uu-gold2 30)
(defconst uu-stone2 3)
(defconst ci-uu-switch-food 42)
(defconst ci-uu-switch-wood 24)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1000)
(defconst max-gold-escrow 600)
#end-if
#load-if-defined SPANISH-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 110)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged cavalry-archer)
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 14)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 18)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 8)
(defconst number-stables 6)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 45)
(defconst pidm-wood 0)
(defconst pidm-gold 50)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 42)
(defconst uu-wood2 24)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 42)
(defconst ci-uu-switch-wood 24)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1200)
(defconst max-gold-escrow 600)
#end-if
#load-if-defined TEUTONIC-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 0)
(defconst default-flush-unit skirmisher)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit knight)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 100)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 14)
(defconst villager-stable 3)
(defconst villager-archery-range 16)
(defconst villager-monastery 12)
(defconst villager-town-center 18)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 7)
(defconst villager-market 17)
(defconst number-barracks 8)
(defconst number-stables 6)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 16)
(defconst pidm-food 45)
(defconst pidm-wood 0)
(defconst pidm-gold 50)
(defconst pidm-stone 5)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 36)
(defconst uu-gold 24)
(defconst uu-stone 4)
(defconst uu-food2 42)
(defconst uu-wood2 24)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 42)
(defconst ci-uu-switch-wood 24)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1200)
(defconst max-gold-escrow 600)
(defconst farm-wood 40)
#else
(defconst farm-wood 60)
#end-if
#load-if-defined TURKISH-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 201)
(defconst default-unit knight)
(defconst unique-unit-food 110)
(defconst default-flush-unit scout-cavalry)
(defconst no-gold-flush-unit scout-cavalry)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defconst default-ranged archer)
#else
(defconst default-ranged cavalry-archer)
#end-if
(defconst pocket-unit knight)
(defconst get-lightcav 1)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 220)
(defconst sling-number 35)
(defconst sling-two 1)
(defconst blot-size 1)
(defconst villager-barracks 14)
(defconst villager-stable 3)
(defconst villager-archery-range 3)
(defconst villager-monastery 7)
(defconst villager-town-center 8)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 6)
(defconst number-stables 7)
(defconst number-archery-ranges 4)
(defconst tc-boom-monastery 2)
(defconst farm-count 14)
(defconst pidm-food 45)
(defconst pidm-wood 0)
(defconst pidm-gold 50)
(defconst pidm-stone 5)
(defconst pidm-food2 42)
(defconst pidm-wood2 20)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 40)
(defconst uu-wood2 26)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 42)
(defconst ci-uu-switch-wood 24)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 850)
(defconst max-gold-escrow 750)
#end-if
#load-if-defined VIETNAMESE-CIV
(defconst dark-age-villager 29)
(defconst villager-wonder-dark 32)
(defconst villager-wonder-feudal 34)
(defconst default-strategy 200)
(defconst pocket-strategy 202)
(defconst default-unit archer)
(defconst unique-unit-food 0)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit my-unique-unit-line)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 0)
(defconst sling-time 600)
(defconst sling-number 95)
(defconst sling-two 0)
(defconst blot-size 0)
(defconst villager-barracks 6)
(defconst villager-stable 3)
(defconst villager-archery-range 3)
(defconst villager-monastery 15)
(defconst villager-town-center 15)
(defconst villager-castle 4)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 12)
(defconst villager-market 17)
(defconst number-barracks 5)
(defconst number-stables 5)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 0)
(defconst pidm-wood 47)
(defconst pidm-gold 48)
(defconst pidm-stone 5)
(defconst pidm-food2 26)
(defconst pidm-wood2 34)
(defconst pidm-gold2 35)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 33)
(defconst uu-wood2 39)
(defconst uu-gold2 23)
(defconst uu-stone2 4)
(defconst ci-uu-switch-food 28)
(defconst ci-uu-switch-wood 38)
(defconst ci-uu-switch-gold 28)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 0)
(defconst evaluation-distance 100)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1100)
(defconst max-gold-escrow 675)
#end-if
#load-if-defined VIKING-CIV
(defconst dark-age-villager 30)
(defconst villager-wonder-dark 33)
(defconst villager-wonder-feudal 35)
(defconst default-strategy 201)
(defconst pocket-strategy 202)
(defconst default-unit militiaman-line)
(defconst unique-unit-food 115)
(defconst default-flush-unit archer)
(defconst no-gold-flush-unit skirmisher)
(defconst default-ranged archer)
(defconst pocket-unit archer)
(defconst get-lightcav 0)
(defconst scout-unit scout-cavalry-line)
(defconst military-level-flush 1)
(defconst military-level-flush-aggressive 0)
(defconst allow-forward-castle 1)
(defconst sling-time 600)
(defconst sling-number 95)
(defconst sling-two 0)
(defconst blot-size 1)
(defconst villager-barracks 3)
(defconst villager-stable 3)
(defconst villager-archery-range 9)
(defconst villager-monastery 9)
(defconst villager-town-center 7)
(defconst villager-castle 5)
(defconst villager-mining-camp 14)
(defconst villager-siege-workshop 16)
(defconst villager-market 17)
(defconst number-barracks 9)
(defconst number-stables 1)
(defconst number-archery-ranges 7)
(defconst tc-boom-monastery 3)
(defconst farm-count 14)
(defconst pidm-food 30)
(defconst pidm-wood 10)
(defconst pidm-gold 57)
(defconst pidm-stone 3)
(defconst pidm-food2 34)
(defconst pidm-wood2 28)
(defconst pidm-gold2 33)
(defconst pidm-stone2 5)
(defconst uu-food 36)
(defconst uu-wood 44)
(defconst uu-gold 16)
(defconst uu-stone 4)
(defconst uu-food2 38)
(defconst uu-wood2 28)
(defconst uu-gold2 28)
(defconst uu-stone2 6)
(defconst ci-uu-switch-food 46)
(defconst ci-uu-switch-wood 26)
(defconst ci-uu-switch-gold 22)
(defconst ci-uu-switch-stone 6)
(defconst evaluation-hitpoints 100)
(defconst evaluation-distance 0)
(defconst max-wood-escrow 0)
(defconst max-food-escrow 1300)
(defconst max-gold-escrow 550)
#end-if

#load-if-defined BYZANTINE-CIV
(defconst imperial-food 667)
(defconst imperial-gold 536)
(defconst imperial-f2 517)
(defconst imperial-g2 400)
(defconst imperial-fs 767)
(defconst imperial-gs 666)
(defconst castle-food 800)
(defconst castle-gold 200)
(defconst castle-f2 680)
(defconst castle-g2 160)
(defconst castle-fs 900)
(defconst castle-gs 330)
(defconst feudal-food 500)
(defconst feudal-f2 470); hmm
#else
#load-if-defined ITALIAN-CIV
(defconst imperial-food 850)
(defconst imperial-gold 680)
(defconst imperial-f2 680)
(defconst imperial-g2 550)
(defconst imperial-fs 950)
(defconst imperial-gs 810)
(defconst castle-food 680)
(defconst castle-gold 170)
(defconst castle-f2 560)
(defconst castle-g2 130)
(defconst castle-fs 780)
(defconst castle-gs 300)
(defconst feudal-food 425)
(defconst feudal-f2 425); 400
#else
(defconst imperial-food 1000)
(defconst imperial-gold 800)
(defconst imperial-f2 800)
(defconst imperial-g2 650)
(defconst imperial-fs 1100)
(defconst imperial-gs 940)
(defconst castle-food 800)
(defconst castle-gold 200)
(defconst castle-f2 680)
(defconst castle-g2 160)
(defconst castle-fs 900)
(defconst castle-gs 330)
(defconst feudal-food 500)
(defconst feudal-f2 470); hmm
#end-if
#end-if
#load-if-defined POST-IMPERIAL-AGE-START
(defconst pop-house 20)
#else
(defconst pop-house 50)
#end-if
#load-if-defined DEATH-MATCH
(defconst housing-headroom1 40)
(defconst housing-headroom2 40)
(defconst camp-distance 45)
(defconst food-distance 0)
(defconst wood-distance 0); -1
#load-if-defined POST-IMPERIAL-AGE-START
(defconst market-time 420)
#else
(defconst market-time 900)
#end-if
(defconst number-markets 4)
(defconst number-blacksmiths 2)
(defconst mill-distance 17)
(defconst hunt-distance 0)
(defconst spread-interval 100); 40
(defconst home-exploration-time 0)
(defconst special-attack-type2 town-center)
#else
(defconst housing-headroom1 3)
(defconst housing-headroom2 25)
(defconst camp-distance 15)
(defconst food-distance 15); 25
(defconst wood-distance 0)
(defconst market-time 2700)
(defconst number-blacksmiths 1)
(defconst number-markets 3)
#load-if-not-defined SCANDANAVIA-MAP
(defconst mill-distance 18)
(defconst hunt-distance 8)
#else
(defconst mill-distance 28)
(defconst hunt-distance 32)
#end-if
(defconst spread-interval 150); 180
#load-if-not-defined DEFEND-WONDER
#load-if-not-defined WONDER-RACE
#load-if-not-defined UP-POCKET-POSITION
(defconst home-exploration-time 420); std flank
#else
(defconst home-exploration-time 480); std pocket
#end-if
#else
(defconst home-exploration-time 4200); wonder race
#end-if
#else
(defconst home-exploration-time 0); 30 ; wonder defense
#end-if
(defconst special-attack-type2 lumber-camp)
#end-if
;#load-if-defined NOMAD-MAP
;(defconst wood-distance2 -1)
;#else
(defconst wood-distance2 30)
;#end-if
#load-if-defined SALT-MARSH-MAP
(defconst dock-placement 1)
#else
(defconst dock-placement 0)
#end-if
#load-if-defined YUCATAN-MAP
(defconst max-warships 20)
#end-if
#load-if-defined HIGHLAND-MAP
(defconst max-warships 20)
#end-if
#load-if-not-defined HIGHLAND-MAP
#load-if-not-defined YUCATAN-MAP
(defconst max-warships 35)
#end-if
#end-if
#load-if-defined ARENA-MAP
(defconst camp-distance-tc 15)
#else
(defconst camp-distance-tc 22)
#end-if
#load-if-defined REGICIDE
#load-if-defined FORTRESS-MAP
(defconst lumber-delay 40)
#else
(defconst lumber-delay 180)
#end-if
#else
(defconst lumber-delay 180)
#end-if
#load-if-defined TINY-MAP
(defconst tsa-increment 6)
(defconst shorefishreq 50)
(defconst shorefishreq2 25)
(defconst deepfishreq 6)
(defconst deepfishreq2 3)
(defconst heavy-wood 7000)
(defconst max-trade-cart 22)
(defconst trade-distance 80)
(defconst timer-lcs 30)
#end-if
#load-if-defined SMALL-MAP
(defconst tsa-increment 7)
(defconst shorefishreq 100)
(defconst shorefishreq2 50)
(defconst deepfishreq 8)
(defconst deepfishreq2 4)
(defconst heavy-wood 8000)
(defconst max-trade-cart 28)
(defconst trade-distance 105)
(defconst timer-lcs 36)
#end-if
#load-if-defined MEDIUM-MAP
(defconst tsa-increment 8)
(defconst shorefishreq 150)
(defconst shorefishreq2 75)
(defconst deepfishreq 10)
(defconst deepfishreq2 5)
(defconst heavy-wood 10000)
(defconst max-trade-cart 35)
(defconst trade-distance 130)
(defconst timer-lcs 42)
#end-if
#load-if-defined NORMAL-MAP
(defconst tsa-increment 10)
(defconst shorefishreq 200)
(defconst shorefishreq2 100)
(defconst deepfishreq 12)
(defconst deepfishreq2 6)
(defconst heavy-wood 14000)
(defconst max-trade-cart 40)
(defconst trade-distance 155)
(defconst timer-lcs 54)
#end-if
#load-if-defined LARGE-MAP
(defconst tsa-increment 12)
(defconst shorefishreq 250)
(defconst shorefishreq2 150)
(defconst deepfishreq 14)
(defconst deepfishreq2 7)
(defconst heavy-wood 18000)
(defconst max-trade-cart 45)
(defconst trade-distance 180)
(defconst timer-lcs 66)
#end-if
#load-if-defined GIANT-MAP
(defconst tsa-increment 14)
(defconst shorefishreq 300)
(defconst shorefishreq2 150)
(defconst deepfishreq 16)
(defconst deepfishreq2 8)
(defconst heavy-wood 22000)
(defconst max-trade-cart 55)
(defconst trade-distance 205)
(defconst timer-lcs 78)
#end-if
#load-if-defined LUDIKRIS-MAP
(defconst tsa-increment 18)
(defconst shorefishreq 350)
(defconst shorefishreq2 175)
(defconst deepfishreq 18)
(defconst deepfishreq2 9)
(defconst heavy-wood 26000)
(defconst max-trade-cart 75)
(defconst trade-distance 360)
(defconst timer-lcs 102)
#end-if
#load-if-defined HIGHLAND-MAP
(defconst water-mixed 1000)
(defconst water-islands 1001)
#else
#load-if-defined TINY-MAP
(defconst water-mixed 1000)
(defconst water-islands 1001)
#end-if
#load-if-defined SMALL-MAP
(defconst water-mixed 1250)
(defconst water-islands 1251)
#end-if
#load-if-defined MEDIUM-MAP
(defconst water-mixed 1500)
(defconst water-islands 1501)
#end-if
#load-if-defined NORMAL-MAP
(defconst water-mixed 1750)
(defconst water-islands 1751)
#end-if
#load-if-defined LARGE-MAP
(defconst water-mixed 2000)
(defconst water-islands 2001)
#end-if
#load-if-defined GIANT-MAP
(defconst water-mixed 2500)
(defconst water-islands 2501)
#end-if
#load-if-defined LUDIKRIS-MAP
(defconst water-mixed 3000)
(defconst water-islands 3001)
#end-if
#end-if
#load-if-defined DIFFICULTY-EASIEST
(defconst wood-distance-farm 9); 15
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst wood-distance-farm 8); 12
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst wood-distance-farm 7); 8
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst wood-distance-farm 6); 7
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst wood-distance-farm 5); 6
#end-if
#load-if-not-defined TURBO-RANDOM-MAP
#load-if-not-defined POPULATION-CAP-25
(defconst number-rams 4)
(defconst number-garrison-units 4)
#load-if-defined DIFFICULTY-EASIEST
(defconst villager-feudal 6)
(defconst villager-flush 6)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst villager-feudal 8)
(defconst villager-flush 8)
#end-if
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-defined LOW-RESOURCES-START
#load-if-defined DIFFICULTY-MODERATE
(defconst villager-flush 26)
(defconst villager-feudal 29)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst villager-flush 25)
(defconst villager-feudal 29); 28
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst villager-flush 24)
(defconst villager-feudal 28); 27
#end-if
#end-if
#load-if-defined MEDIUM-RESOURCES-START
(defconst villager-flush 19)
(defconst villager-feudal 21)
#end-if
#load-if-defined HIGH-RESOURCES-START
(defconst villager-flush 14)
(defconst villager-feudal 16)
#end-if
#end-if ;NOT EASY
#end-if ;NOT EASIEST
#else ; = POP25
(defconst number-rams 3)
(defconst number-garrison-units 1)
(defconst villager-feudal 24)
(defconst villager-flush 24)
#end-if ; = TURBO
#else
#load-if-not-defined POPULATION-CAP-25
(defconst number-rams 4)
(defconst number-garrison-units 4)
#else
(defconst number-rams 3)
(defconst number-garrison-units 1)
#end-if
(defconst villager-flush 5); 15
(defconst villager-feudal 5); 16
#end-if
#load-if-defined GOLD-RUSH-MAP
#load-if-defined TINY-MAP
(defconst castle-age-camp-distance 48); high camp distance to reach center gold
#end-if
#load-if-defined SMALL-MAP
(defconst castle-age-camp-distance 48)
#end-if
#load-if-defined MEDIUM-MAP
(defconst castle-age-camp-distance 60)
#end-if
#load-if-defined NORMAL-MAP
(defconst castle-age-camp-distance 84)
#end-if
#load-if-defined LARGE-MAP
(defconst castle-age-camp-distance 102)
#end-if
#load-if-defined GIANT-MAP
(defconst castle-age-camp-distance 120)
#end-if
#load-if-defined LUDIKRIS-MAP
(defconst castle-age-camp-distance 192)
#end-if
#else
(defconst castle-age-camp-distance 35)
#end-if ; not gold-rush-map
(defconst scorpion-gold-min 170)
(defconst villager-coinage 60)
(defconst safe-town 45)
#load-if-defined POPULATION-CAP-25
(defconst minNavy 3)
(defconst max-fleet 15)
(defconst twenty-five-percent-pop 6)
(defconst thirty-percent-pop 7)
(defconst fourty-percent-pop 10)
(defconst fifty-percent-pop 13)
(defconst sixty-percent-pop 15)
(defconst seventy-five-percent-pop 19)
(defconst eighty-five-percent-pop 21)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 1)
(defconst max-civ 5)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 1)
(defconst max-civ 6)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 1)
(defconst max-civ 8)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 2)
(defconst max-civ 10)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 3)
(defconst max-civ 12)
#end-if
(defconst max-civ-pop 20)
(defconst del-civ-pop 24)
(defconst max-pop 25)
#load-if-not-defined SUDDEN-DEATH
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
#else
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
#end-if
(defconst low-min-number-upgrade 1)
(defconst mid-min-number-upgrade 2)
(defconst high-min-number-upgrade 3)
#end-if
#load-if-defined POPULATION-CAP-50
(defconst minNavy 4)
(defconst max-fleet 25)
(defconst twenty-five-percent-pop 13)
(defconst thirty-percent-pop 15)
(defconst fourty-percent-pop 20)
(defconst fifty-percent-pop 25)
(defconst sixty-percent-pop 30)
(defconst seventy-five-percent-pop 38)
(defconst eighty-five-percent-pop 42)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 1)
(defconst max-civ 6)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 2)
(defconst max-civ 10)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 3)
(defconst max-civ 16)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 4)
(defconst max-civ 22)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 5)
(defconst max-civ 28)
#end-if
(defconst max-civ-pop 45)
(defconst del-civ-pop 48)
(defconst max-pop 50)
#load-if-not-defined SUDDEN-DEATH
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 2)
(defconst tc-level-five 2)
#else
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
#end-if
(defconst low-min-number-upgrade 1)
(defconst mid-min-number-upgrade 3)
(defconst high-min-number-upgrade 5)
#end-if
#load-if-defined POPULATION-CAP-75
(defconst minNavy 5)
(defconst max-fleet 40)
(defconst twenty-five-percent-pop 19)
(defconst thirty-percent-pop 22)
(defconst fourty-percent-pop 30)
(defconst fifty-percent-pop 38)
(defconst sixty-percent-pop 45)
(defconst seventy-five-percent-pop 57)
(defconst eighty-five-percent-pop 64)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 1)
(defconst max-civ 6)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 2)
(defconst max-civ 12)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 3)
(defconst max-civ 21)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 5)
(defconst max-civ 32)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 7)
(defconst max-civ 45)
#end-if
(defconst max-civ-pop 65)
(defconst del-civ-pop 72)
(defconst max-pop 75)
#load-if-not-defined SUDDEN-DEATH
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 2)
(defconst tc-level-five 2)
#else
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
#end-if
(defconst low-min-number-upgrade 2)
(defconst mid-min-number-upgrade 4)
(defconst high-min-number-upgrade 6)
#end-if
#load-if-defined POPULATION-CAP-100
(defconst minNavy 6)
(defconst max-fleet 40)
(defconst twenty-five-percent-pop 25)
(defconst thirty-percent-pop 30)
(defconst fourty-percent-pop 40)
(defconst fifty-percent-pop 50)
(defconst sixty-percent-pop 60)
(defconst seventy-five-percent-pop 75)
(defconst eighty-five-percent-pop 85)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 1)
(defconst max-civ 7)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 3)
(defconst max-civ 14)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 5)
(defconst max-civ 26)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 7)
(defconst max-civ 42)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 9)
(defconst max-civ 65)
#end-if
(defconst max-civ-pop 95)
(defconst del-civ-pop 98)
(defconst max-pop 100)
#load-if-not-defined SUDDEN-DEATH
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 2)
(defconst tc-level-four 2)
(defconst tc-level-five 3)
#else
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
#end-if
(defconst low-min-number-upgrade 2)
(defconst mid-min-number-upgrade 5)
(defconst high-min-number-upgrade 8)
#end-if
#load-if-defined POPULATION-CAP-125
(defconst minNavy 7)
(defconst max-fleet 50)
(defconst twenty-five-percent-pop 32)
(defconst thirty-percent-pop 37)
(defconst fourty-percent-pop 50)
(defconst fifty-percent-pop 63)
(defconst sixty-percent-pop 75)
(defconst seventy-five-percent-pop 94)
(defconst eighty-five-percent-pop 106)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 1)
(defconst max-civ 7)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 3)
(defconst max-civ 16)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 5)
(defconst max-civ 32)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 8)
(defconst max-civ 52)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 12)
(defconst max-civ 75)
#end-if
(defconst max-civ-pop 115)
(defconst del-civ-pop 123)
(defconst max-pop 125)
#load-if-not-defined SUDDEN-DEATH
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 2)
(defconst tc-level-four 3)
(defconst tc-level-five 3)
#else
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
#end-if
(defconst low-min-number-upgrade 3)
(defconst mid-min-number-upgrade 6)
(defconst high-min-number-upgrade 9)
#end-if
#load-if-defined POPULATION-CAP-150
(defconst minNavy 8)
(defconst max-fleet 56)
(defconst twenty-five-percent-pop 38)
(defconst thirty-percent-pop 45)
(defconst fourty-percent-pop 60)
(defconst fifty-percent-pop 75)
(defconst sixty-percent-pop 90)
(defconst seventy-five-percent-pop 113)
(defconst eighty-five-percent-pop 128)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 2)
(defconst max-civ 7)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 5)
(defconst max-civ 18)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 9)
(defconst max-civ 39)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 14)
(defconst max-civ 65)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 20)
(defconst max-civ 90)
#end-if
(defconst max-civ-pop 140)
(defconst del-civ-pop 148)
(defconst max-pop 150)
#load-if-not-defined SUDDEN-DEATH
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 3)
(defconst tc-level-four 3)
(defconst tc-level-five 4)
#else
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
#end-if
(defconst low-min-number-upgrade 4)
(defconst mid-min-number-upgrade 7)
(defconst high-min-number-upgrade 10)
#end-if
#load-if-defined POPULATION-CAP-175
(defconst minNavy 9)
(defconst max-fleet 63)
(defconst twenty-five-percent-pop 44)
(defconst thirty-percent-pop 52)
(defconst fourty-percent-pop 70)
(defconst fifty-percent-pop 88)
(defconst sixty-percent-pop 105)
(defconst seventy-five-percent-pop 131)
(defconst eighty-five-percent-pop 149)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 2)
(defconst max-civ 7)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 5)
(defconst max-civ 20)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 11)
(defconst max-civ 43)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 24)
(defconst max-civ 80)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 34)
(defconst max-civ 110)
#end-if
(defconst max-civ-pop 165)
(defconst del-civ-pop 173)
(defconst max-pop 175)
#load-if-not-defined SUDDEN-DEATH
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 3)
(defconst tc-level-four 4)
(defconst tc-level-five 5)
#else
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
#end-if
(defconst low-min-number-upgrade 4)
(defconst mid-min-number-upgrade 8)
(defconst high-min-number-upgrade 12)
#end-if
#load-if-defined POPULATION-CAP-200
#load-if-not-defined POPULATION-CAP-EXTENDED
(defconst minNavy 10)
(defconst max-fleet 70)
(defconst twenty-five-percent-pop 50)
(defconst thirty-percent-pop 60)
(defconst fourty-percent-pop 80)
(defconst fifty-percent-pop 100)
(defconst sixty-percent-pop 120)
(defconst seventy-five-percent-pop 150)
(defconst eighty-five-percent-pop 170)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 2)
(defconst max-civ 7)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 5)
(defconst max-civ 21)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 13)
(defconst max-civ 48)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 26)
(defconst max-civ 89)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 40)
(defconst max-civ 125)
#end-if
(defconst max-civ-pop 185)
#load-if-not-defined GOTHIC-CIV
(defconst del-civ-pop 196)
(defconst max-pop 200)
#else
(defconst del-civ-pop 206)
(defconst max-pop 210)
#end-if
#end-if
#load-if-not-defined SUDDEN-DEATH
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 3)
(defconst tc-level-four 4)
(defconst tc-level-five 5)
#else
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
#end-if
(defconst low-min-number-upgrade 4)
(defconst mid-min-number-upgrade 8)
(defconst high-min-number-upgrade 12)
#end-if
#load-if-defined POPULATION-CAP-EXTENDED
#load-if-defined POPULATION-CAP-250
(defconst minNavy 11)
(defconst max-fleet 77)
(defconst twenty-five-percent-pop 63)
(defconst thirty-percent-pop 75)
(defconst fourty-percent-pop 100)
(defconst fifty-percent-pop 125)
(defconst sixty-percent-pop 150)
(defconst seventy-five-percent-pop 187)
(defconst eighty-five-percent-pop 212)
#load-if-not-defined SUDDEN-DEATH
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 3)
(defconst tc-level-four 4)
(defconst tc-level-five 5)
#else
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
#end-if
(defconst low-min-number-upgrade 4)
(defconst mid-min-number-upgrade 8)
(defconst high-min-number-upgrade 12)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 2)
(defconst max-civ 8)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 8)
(defconst max-civ 23)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 17)
(defconst max-civ 51)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 33)
(defconst max-civ 90)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 55)
(defconst max-civ 130)
#end-if
(defconst max-civ-pop 225)
(defconst del-civ-pop 245)
(defconst max-pop 250)
#end-if
#load-if-not-defined POPULATION-CAP-250; Load for Pop >= 300
(defconst minNavy 14)
(defconst max-fleet 105)
(defconst twenty-five-percent-pop 75)
(defconst thirty-percent-pop 90)
(defconst fourty-percent-pop 120)
(defconst fifty-percent-pop 150)
(defconst sixty-percent-pop 180)
(defconst seventy-five-percent-pop 225)
(defconst eighty-five-percent-pop 255)
#load-if-not-defined SUDDEN-DEATH
(defconst tc-level-one 1)
(defconst tc-level-two 2)
(defconst tc-level-three 3)
(defconst tc-level-four 4)
(defconst tc-level-five 5)
#else
(defconst tc-level-one 1)
(defconst tc-level-two 1)
(defconst tc-level-three 1)
(defconst tc-level-four 1)
(defconst tc-level-five 1)
#end-if
(defconst low-min-number-upgrade 5)
(defconst mid-min-number-upgrade 9)
(defconst high-min-number-upgrade 13)
#load-if-defined DIFFICULTY-EASIEST
(defconst max-trade-pop 2)
(defconst max-civ 8)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst max-trade-pop 8)
(defconst max-civ 25)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst max-trade-pop 17)
(defconst max-civ 57)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst max-trade-pop 33)
(defconst max-civ 99)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst max-trade-pop 55)
(defconst max-civ 140)
#end-if
(defconst max-civ-pop 265)
(defconst del-civ-pop 293)
(defconst max-pop 300)
#end-if
#end-if

#load-if-defined DIFFICULTY-EASIEST
(defconst ability-to-dodge 100)
(defconst ability-to-kite 100)
(defconst enable-patrol 0)
(defconst local-targeting 0)
#end-if
#load-if-defined DIFFICULTY-EASY
(defconst ability-to-dodge 75)
(defconst ability-to-kite 75)
(defconst enable-patrol 0)
(defconst local-targeting 0)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defconst ability-to-dodge 50)
(defconst ability-to-kite 50)
(defconst enable-patrol 0)
(defconst local-targeting 0)
#end-if
#load-if-defined DIFFICULTY-HARD
(defconst ability-to-dodge 25)
(defconst ability-to-kite 25)
(defconst enable-patrol 1)
(defconst local-targeting 1)
#end-if
#load-if-defined DIFFICULTY-HARDEST
(defconst ability-to-dodge 0)
(defconst ability-to-kite 0)
(defconst enable-patrol 1)
(defconst local-targeting 1)
#end-if
#load-if-defined ARABIA-MAP
(defconst additional-town-center-placed-distance 14)
(defconst pop60-town-size 16)
(defconst pop90-town-size 20)
(defconst pop120-town-size 24)
#end-if
#load-if-defined ARENA-MAP
(defconst additional-town-center-placed-distance 16)
(defconst pop60-town-size 20)
(defconst pop90-town-size 24)
(defconst pop120-town-size 24)
#end-if
#load-if-not-defined ARENA-MAP
#load-if-not-defined ARABIA-MAP
(defconst additional-town-center-placed-distance 16)
(defconst pop60-town-size 20)
(defconst pop90-town-size 24)
(defconst pop120-town-size 28)
#end-if
#end-if

#load-if-not-defined INCAN-CIV
#load-if-not-defined FRANKISH-CIV
(defconst castle-stone 650)
#else ; Franks
(defconst castle-stone 488)
#end-if
#else ; Incas
(defconst castle-stone 553)
#end-if

#load-if-defined UP-POCKET-POSITION
(defconst scouting-type scout-mirror)
#else
(defconst scouting-type scout-flank)
#end-if
; The locations that are implemented as of now are center, mirror, opposite and enemy.
; Corner, border and flank are the ones that aren't currently implemented.

(defrule
	(strategic-number sn-attack-intelligence == 1)
	(game-time >= 15)
=>
	(up-jump-rule 5))
(defrule
	(true)
=>
	(set-strategic-number sn-maximum-town-size 8)
	(set-strategic-number sn-total-number-explorers 13); start with civilians as explorers
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-minimum-civilian-explorers 12)
	(set-strategic-number sn-number-explore-groups 1);explore with scouts
	(set-difficulty-parameter ability-to-dodge-missiles ability-to-dodge)
	(set-difficulty-parameter ability-to-maintain-distance ability-to-kite)
	(set-strategic-number sn-percent-enemy-sighted-response 100)
	(set-strategic-number sn-group-commander-selection-method 0)
	(set-strategic-number sn-ignore-attack-group-under-attack 0)
	(set-strategic-number sn-attack-group-size-randomness 0)
	(set-strategic-number sn-scale-minimum-attack-group-size 0)
	(set-strategic-number sn-scale-maximum-attack-group-size 0)
	(set-strategic-number sn-group-leader-defense-distance 3); increases chance to make a few big groups instead of many medium sized ones
	(set-strategic-number sn-intelligent-gathering 1)
	(set-strategic-number sn-retask-gather-amount 0)	
	(set-strategic-number sn-camp-max-distance camp-distance);small distances at the start
	(set-strategic-number sn-mill-max-distance mill-distance)
	(set-strategic-number sn-cap-civilian-builders 100)
	(set-strategic-number sn-cap-civilian-explorers 100)
	(set-strategic-number sn-maximum-hunt-drop-distance hunt-distance) 
	(set-strategic-number sn-maximum-food-drop-distance food-distance)
	(set-strategic-number sn-maximum-wood-drop-distance wood-distance)
	(set-strategic-number sn-maximum-stone-drop-distance 0)
	(set-strategic-number sn-maximum-gold-drop-distance 0)
	(set-strategic-number sn-blot-exploration-map 0);1=rexplore
	(set-strategic-number sn-blot-size blot-size)
	(set-strategic-number sn-sentry-distance-variation 0)
	(disable-self)
)
(defrule
	(true)
=>
	(set-strategic-number sn-group-form-distance 20)
	(set-strategic-number sn-consecutive-idle-unit-limit 0)
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-attack-winning-player 1)
	(set-strategic-number sn-attack-winning-player-factor 10000)
	(set-strategic-number sn-attack-intelligence 1);doesn't really avoid TC/castle fire, but better than nothing
	(set-strategic-number sn-build-frequency 1);sometimes it helps when AI trys to build next to enemy and get interrupted
	(set-strategic-number sn-number-build-attempts-before-skip 5)
	(set-strategic-number sn-max-skips-per-attempt 5)
	(set-strategic-number sn-coop-share-attacking 1); usually helps ally too late, but better than nothing
	(set-strategic-number sn-coop-share-information 1); gives information to an AI ally
	(set-strategic-number sn-garrison-rams 0)
	(set-strategic-number sn-current-age dark)
	(set-strategic-number sn-minimum-water-body-size-for-dock 999); don't build docks in small puddles
	(set-strategic-number sn-target-evaluation-in-progress 0)
	(set-strategic-number sn-target-evaluation-boat 0)
	(set-strategic-number sn-target-evaluation-rof 0)
	(set-strategic-number sn-target-evaluation-continent 0)
	(set-strategic-number sn-target-evaluation-siege-weapon 500)
	(set-strategic-number sn-target-evaluation-distance evaluation-distance)
	(set-strategic-number sn-target-evaluation-time-kill-ratio 0)
	(set-strategic-number sn-target-evaluation-hitpoints evaluation-hitpoints)
	(set-strategic-number sn-target-evaluation-damage-capability 1)
	(set-strategic-number sn-target-evaluation-kills 0)
	(set-strategic-number sn-target-evaluation-randomness 0)
	(set-strategic-number sn-target-evaluation-attack-attempts 0)
	(set-strategic-number sn-target-evaluation-range -100)
	(set-strategic-number sn-special-attack-type2 special-attack-type2)
	(disable-self)
)
(defrule
	(true)
=>
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-zero-priority-distance 450)
	(set-strategic-number sn-attack-group-gather-spacing 5)
	(set-strategic-number sn-do-not-scale-for-difficulty-level 1)
	(set-strategic-number sn-initial-exploration-required 0); !
	(set-strategic-number sn-gather-defense-units 1)
	(set-strategic-number sn-ignore-tower-elevation 1)
	(set-goal escrow-purpose-goal 0)
	(generate-random-number 100)
	(enable-timer civ-explore-timer 150)
	(enable-timer attack-timer 1)
	(enable-timer spread-military-timer 150)
	(set-strategic-number sn-task-ungrouped-soldiers 0); spread military 0=no,1=yes
	(set-strategic-number sn-forage-defend-priority 1)
	(set-strategic-number sn-gold-defend-priority 1)
	(set-strategic-number sn-stone-defend-priority 1)
	(set-strategic-number sn-livestock-defend-priority 1)
	(set-goal reset 0)
	(set-goal control-goal 0); secondary unit
	(set-goal enemy-goal 0); enemy strategy unkonwn
	(set-goal increase-town-size-goal 0); disable TS increase
	(set-goal strategy-goal default-strategy)
	(set-goal unit-goal default-unit)
	(set-goal ranged-unit-type-goal default-ranged)
	(set-goal under-attack-goal 0); not under attack
	(set-goal spread-military-goal 0)
	(disable-self)
)
(defrule
	(true)
=>
;	(set-strategic-number sn-percent-half-exploration 30); default
;	(set-strategic-number sn-percent-exploration-required 0)
	(set-strategic-number sn-dropsite-separation-distance 6)
	(set-strategic-number sn-number-enemy-objects-required 1)
	(set-goal stanceg 0)
	(set-goal request 0)
	(set-goal request2 0)
	(enable-timer retreat-timer 1)
	(enable-timer micro-timer 1)
	(set-goal retargetenemy yes)
	(enable-timer navy-attack-timer 1)
	(set-goal defendchat no); soon to be reset
	(set-strategic-number sn-allow-civilian-defense 1)
	(set-strategic-number sn-percent-building-cancellation 25)
	(set-strategic-number sn-home-exploration-time home-exploration-time)
	(set-strategic-number sn-minimum-boar-hunt-group-size 0)
;	(set-strategic-number sn-enable-boar-hunting 2)
	(set-strategic-number sn-number-civilian-militia 9)
	(set-strategic-number sn-enable-patrol-attack enable-patrol)
	(set-strategic-number sn-safe-town-size safe-town)
	(set-strategic-number sn-local-targeting-mode local-targeting)
	(set-strategic-number sn-ttkfactor-scalar 500); 600
	(set-goal nomad no)
	(set-goal landnomad no)
	(set-strategic-number sn-livestock-to-town-center 1)
	(set-strategic-number sn-dock-training-filter 0)
	(set-strategic-number sn-defer-dropsite-update 1)
	(enable-timer garrison-timer 1)
	(disable-self)
)
(defrule
	(true)
=>
	(set-goal raid-goal 0)
	(set-goal forward-goal -1)
	(enable-timer defend-timer 10)
	(set-goal position-goal 0); pocket for nomad?
	(set-strategic-number sn-preferred-mill-placement 0)
	(set-strategic-number sn-disable-builder-assistance 1)
	(set-strategic-number sn-minimum-dropsite-buffer 20)
	(set-goal navy-count 0)
	(set-goal biggest-enemy-navy 0)
	(set-goal enemy-focus-navy 0)
	(set-goal max-navy minNavy); 0
	(enable-timer lumber-timer 60)
	(enable-wall-placement 2)
	(set-goal assistance no)
	(up-get-fact population-cap 0 feitoria-cap)
	(up-modify-goal feitoria-cap c:z/ 100)
	(set-strategic-number sn-maximum-gaia-attack-response 3)
	(enable-timer reset-timer 1)
	(set-goal FDTaunt no)
	(set-goal FDTaunt2 no)
	(disable-self); end init
); end jump












(defrule
	(true); clear these goals/SNs each rule pass
=>
	(set-strategic-number sn-military-level 0)
	(set-strategic-number sn-archer-threat 0)
	(set-strategic-number sn-infantry-threat 0)
	(set-strategic-number sn-cavalry-threat 0)
	(set-goal anti-cavalry-threat-goal 0)
	(set-goal anti-monk-threat-goal 0)
	(set-goal monk-threat-goal 0)
	(set-goal enemy-sighted-goal 0)
	(set-goal attack-goal 0)
	(set-goal farm-goal 0)
	(set-goal housing-goal 0)
	(set-goal enemy-boats-goal 0)
	(set-goal hostilities-goal 0)
	(set-goal save-wood-goal 0)
	(set-goal math-goal 0)
	(set-strategic-number sn-gather-idle-soldiers-at-center 0)
	(set-goal gather-inside-goal 0)
	(set-goal tribute-goal 0)
	(set-goal threat-source 0)
	(set-goal threat-target 0)
	(up-get-threat-data threat-time threat-player threat-source threat-target)
	(up-get-victory-data winning-player victory-type victory-time)
	(up-modify-goal attacking-enemy-goal g:= threat-player); replacement
	(set-goal team-coordination-goal 0)
	(up-get-treaty-data treaty-time)
	(up-get-fact resource-amount amount-relics relic-count)
	(up-get-fact unit-type-count-total trade-cart trade-units)
	(up-get-fact unit-type-count-total trade-cog math-goal)
	(up-modify-goal trade-units g:+ math-goal)
	(up-modify-goal trade-units g:+ relic-count)
	(up-modify-goal jumpgoal c:+ 1))
(defrule
	(true)
=>
	(set-goal math-goal 0)
;	(up-get-fact unit-count 0 math-goal)
;	(up-chat-data-to-self "t0: %d" g: math-goal)
	(up-get-fact warboat-count 0 navy-count)
;	(up-chat-data-to-self "t1: %d" g: navy-count)
	(up-get-fact unit-type-count turtle-ship-line math-goal)
;	(up-chat-data-to-self "t2: %d" g: math-goal)
	(up-modify-goal math-goal c:* 2)
	(up-modify-goal navy-count g:+ math-goal)
;	(up-chat-data-to-self "t3: %d" g: navy-count)
	(up-get-fact building-type-count-total feitoria feitoria-count)
	(up-modify-goal math-goal g:= feitoria-count)
	(up-modify-goal math-goal c:* 20)
	(up-get-fact civilian-population 0 custom-civ-pop)
	(up-modify-goal custom-civ-pop g:+ math-goal)
	(up-modify-goal custom-civ-pop g:+ relic-count)
;	(up-chat-data-to-self "c1: %d" g: custom-civ-pop)
	(set-strategic-number sn-town-center-placement 0)
	(set-goal enemy-fortifications-goal -1); end init 2
	(set-strategic-number sn-gather-defense-units 1)
)








(defrule
	(game-time < 10)
	(wood-amount < 275)
	(building-type-count-total town-center <= 0)
	(up-compare-goal landnomad != yes)
=>
	(set-goal nomad yes)
	(set-goal landnomad yes)
;	(chat-local-to-self "Land-Nomad.")
	(up-assign-builders c: town-center-foundation c: 10)
	(disable-self))
(defrule
	(game-time < 10)
	(wood-amount >= 275)
	(building-type-count-total town-center <= 0)
	(up-compare-goal nomad != yes)
=>
	(set-goal nomad yes)
;	(chat-local-to-self "Nomad.")
	(up-assign-builders c: town-center-foundation c: 10)
	(disable-self))

#load-if-defined UP-POCKET-POSITION
(defrule
;	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(up-compare-goal position-goal != pocket)
=>
	(set-goal position-goal pocket)
	(set-goal strategy-goal pocket-strategy)
	(set-goal unit-goal pocket-unit)
	(set-goal control-goal 0)
;	(chat-local-to-self "I'm pocket.")
;	(chat-to-player every-ally "I'm pocket.")
	(disable-self))
#else
(defrule
;	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(up-compare-goal position-goal != flank)
=>
	(set-goal position-goal flank)
;	(chat-local-to-self "I'm flank.")
;	(chat-to-player every-ally "I'm flank.")
	(disable-self))
#end-if


(defrule
	(up-timer-status one-minute-timer != timer-running)
=>
	(up-modify-goal math-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal allies 0)
	(set-goal enemies 0))
(defrule; end neg jump
	(up-timer-status one-minute-timer != timer-running)
(or	(players-stance focus-player ally)
	(stance-toward focus-player ally))
	(player-in-game focus-player)
=>
	(up-modify-goal allies c:+ 1))
(defrule
	(up-timer-status one-minute-timer != timer-running)
(nor	(players-stance focus-player ally)
	(stance-toward focus-player ally))
	(player-in-game focus-player)
=>
	(up-modify-goal enemies c:+ 1))
(defrule
	(up-timer-status one-minute-timer != timer-running)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -3))
(defrule
	(up-timer-status one-minute-timer != timer-running)
=>
	(up-modify-sn sn-focus-player-number g:= math-goal)
	(up-modify-sn teambalance g:= allies)
	(up-modify-sn teambalance g:- enemies)
	(up-modify-sn teambalance c:max -1)
	(up-modify-sn teambalance c:min 1))

(defrule
	(unit-type-count-total 213 < 3); Dead female builder
	(unit-type-count-total 225 < 3); Dead male builder
	(building-type-count town-center >= 1)
	(strategic-number sn-percent-building-cancellation > 10)
=>
	(set-strategic-number sn-percent-building-cancellation 10))

(defrule
(or	(unit-type-count-total 213 >= 3); Dead female builder
	(unit-type-count-total 225 >= 3)); Dead male builder
	(population < max-civ-pop)
	(building-type-count town-center >= 1)
	(strategic-number sn-percent-building-cancellation < 100)
=>
	(set-strategic-number sn-percent-building-cancellation 100)
;	(chat-local-to-self "Resetting townsize."); test
;	(set-strategic-number sn-maximum-town-size 12)
)

(defrule
	(building-type-count town-center <= 0)
	(building-type-count-total town-center >= 1)
	(strategic-number sn-percent-building-cancellation > 0)
=>
	(set-strategic-number sn-percent-building-cancellation 0))

(defrule
	(strategic-number sn-allow-adjacent-dropsites != 0)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0))

(defrule
	(game-time >= 1620)
(or	(game-time >= 2220)
(or	(building-type-count-total mining-camp >= 5)
	(and	(game-time >= 1920)
		(building-type-count-total town-center >= 3))))
	(strategic-number sn-defer-dropsite-update == 0)
=>
	(set-strategic-number sn-defer-dropsite-update 1))


(defrule
	(goal enemy-fortifications-goal -1)
(or	(players-building-type-count any-enemy castle >= 4)
	(and	(nand	(building-type-count stone-wall-line >= 11); arena map
			(unit-type-count battering-ram-line >= 1))
		(and	(players-building-type-count any-enemy castle >= 1)
			(players-building-type-count any-enemy stone-wall-line >= 11))))
	(unit-type-count battering-ram-line < 8)
	(unit-type-count trebuchet-set < 5)
	(unit-type-count bombard-cannon < 8)
=>
	(set-goal enemy-fortifications-goal 1)
)


;(defrule
;	(up-compare-goal jumpgoal >= 2) 
;=>
;	(set-goal jumpgoal 0)
;	(up-jump-rule 10000); doesn't even seem to actually help performance - pathfinding eats up most of it(?)
;)
;(defrule
;	(game-time > 0)
;=>
;	(chat-to-player 1 "test")
;	(chat-to-all "test2")
;(up-chat-data-to-self "string %d" g: math-goal)
;	(up-chat-data-to-all "test: %d." s: sn-defer-dropsite-update)
;)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(true)
=>
	(set-strategic-number sn-enable-training-queue 1)
	(set-strategic-number sn-wall-targeting-mode 1)
	(set-strategic-number sn-enable-new-building-system 1))
#end-if
#end-if
#end-if

(defrule
	(players-building-count any-enemy > 0)
=>
	(up-find-player enemy find-closest closest-enemy-goal)
;	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
;	(up-chat-data-to-self "Focus-player: %d" g: closest-enemy-goal)
)
(defrule
(or	(military-population >= 2)
	(population >= max-civ-pop))
(or	(and	(strategic-number sn-maximum-town-size >= 40)
		(building-type-count town-center >= 1))
	(or	(strategic-number sn-number-attack-groups >= 1)
		(strategic-number sn-number-boat-attack-groups >= 1)))
	(up-compare-goal team-coordination-goal != 1)
=>
	(set-strategic-number sn-gather-defense-units 0)
	(set-goal team-coordination-goal 1))
(defrule
(or	(goal under-attack-goal 1)
(or	(goal team-coordination-goal 1)
	(or	(and	(strategic-number sn-maximum-town-size >= 40)
			(strategic-number sn-minimum-water-body-size-for-dock < water-islands)); TSA is not used on islands
		(strategic-number sn-number-attack-groups >= 1))))
	(building-type-count-total town-center >= 1)
=>
	(set-goal hostilities-goal 1))

(defrule
	(true)
=>
	(set-goal assistance no)
	(up-modify-goal math-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1))
(defrule
	(player-in-game focus-player); valid
	(stance-toward focus-player ally)
	(strategic-number sn-focus-player-number != my-player-number)
	(up-allied-sn focus-player sn-target-player-number s:== sn-target-player-number)
	(up-allied-goal focus-player team-coordination-goal == 1); attacking
	(strategic-number sn-target-player-number >= 1)
	(strategic-number sn-target-player-number <= 8)
=>
	(set-goal assistance yes))
(defrule
	(up-compare-goal assistance != yes)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -2))
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= math-goal))

#load-if-defined DARK-AGE-END
(defrule
	(current-age >= dark-age)
(or	(building-type-count mining-camp >= 1)
	(up-compare-goal custom-civ-pop >= max-civ))
	(strategic-number sn-current-age < imperial)
=>
	(set-strategic-number sn-maximum-gold-drop-distance 20)
	(set-strategic-number sn-current-age imperial))
#end-if
#load-if-defined FEUDAL-AGE-END
(defrule
	(current-age >= feudal-age)
(or	(building-type-count blacksmith >= 1)
	(up-compare-goal custom-civ-pop >= max-civ))
	(strategic-number sn-current-age < imperial)
=>
	(set-strategic-number sn-current-age imperial))
(defrule
	(up-compare-goal team-coordination-goal == 1)
	(strategic-number sn-military-level >= 1)
;	(building-type-count-total watch-tower < 4)
	(can-build watch-tower)
=>
	(build-forward watch-tower))
(defrule
	(strategic-number sn-military-level <= -1)
;	(building-type-count-total watch-tower < 4)
	(can-build watch-tower)
=>
	(build watch-tower))
#end-if
#load-if-defined CASTLE-AGE-END
(defrule
	(current-age >= castle-age)
(or	(building-type-count castle >= 1)
	(up-compare-goal custom-civ-pop >= max-civ))
	(strategic-number sn-current-age < imperial)
=>
	(set-strategic-number sn-current-age imperial))
#end-if
#load-if-not-defined IMPERIAL-AGE-END
(defrule
;	(strategic-number sn-current-age >= imperial)
	(up-compare-goal attack-goal < 2)
	(up-compare-goal team-coordination-goal != 1)
	(population >= max-pop)
=>
	(set-goal attack-goal 2))
#end-if

(defrule
	(taunt-detected any-ally 38)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 38)
	(acknowledge-taunt this-any-ally 33)
	(chat-to-allies "1")
	(chat-to-allies-using-id 7110); "Yes."
)
(defrule
(or	(taunt-detected any-ally 32)
	(taunt-detected any-ally 33))
(or	(goal strategy-goal sling)
	(goal control-goal shot))
=>
	(acknowledge-taunt this-any-ally 32)
	(acknowledge-taunt this-any-ally 33)
	(chat-to-allies "2")
	(chat-to-allies-using-id 7111); "No."
)
(defrule
(or	(game-time < 1200); don't block early villagers in DM
(nor	(and	(goal train-civ-goal -1)
		(population >= max-civ-pop))
	(goal train-civ-goal 2)))	
=>
	(set-goal train-civ-goal 1)
)
(defrule
	(taunt-detected any-ally 33)
	(game-time > 300)
=>
	(acknowledge-taunt this-any-ally 33)
	(chat-to-allies-using-id 22157)
	(set-goal train-civ-goal 1)
)
(defrule
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(population >= max-civ-pop)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(chat-to-allies-using-id 22154)
	(set-goal train-civ-goal -1)
)
(defrule
	(game-time > 1800)
(or	(or	(dropsite-min-distance wood == -1); wood gone
		(dropsite-min-distance wood >= 480)); or remaining wood is on other islands
	(and	(unit-type-count-total villager > thirty-percent-pop)
		(game-type == 9))); 8
=>
	(set-goal train-civ-goal -1)
)
(defrule
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(and	(unit-type-count villager > twenty-five-percent-pop)
		(game-time > 2700))
	(and	(and	(players-unit-type-count every-enemy galley-line < 15)
			(players-unit-type-count every-enemy fire-ship-line < 15))
		(up-compare-goal navy-count > 25)))
=>
	(set-goal train-civ-goal -1)
)
(defrule
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(strategic-number sn-resource-control < 1)
	(up-compare-goal escrow-purpose-goal != ri-halberdier)
	(up-compare-goal custom-civ-pop > max-civ); more than enough civ, usually achieved by adding trade carts
(or	(gold-amount > 800); and enough of all resources
	(and	(up-compare-goal custom-civ-pop > sixty-percent-pop)
		(up-compare-goal trade-units > 0)))
	(wood-amount > 800)
	(food-amount > 800)
	(population > del-civ-pop)
	(unit-type-count-total villager >= 15)
	(population-cap <= 250)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
;	(chat-local-to-self "Deleting excess villagers.")
)
#load-if-defined UP-SCENARIO-GAME; don't want to screw up beautiful scenarios
(defrule
	(strategic-number sn-number-explore-groups == 101)
	(game-type == 3)
=>
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-number-explore-groups 1))
#end-if
(defrule
	(strategic-number sn-number-explore-groups == 101)
	(unit-type-count-total villager > 0)
	(building-type-count-total lumber-camp >= 1)
	(wood-amount < 275)
=>
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-number-explore-groups 1))
(defrule
	(strategic-number sn-number-explore-groups == 101)
;	(game-time < 60)
	(unit-type-count-total villager > 0)
	(building-type-count-total mining-camp >= 1)
	(stone-amount < 100)
=>
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-number-explore-groups 1))
(defrule
	(strategic-number sn-number-explore-groups == 101)
;	(game-time < 60)
(or	(game-time >= 120)
	(and	(unit-type-count-total villager > 0)
		(building-type-count town-center >= 1))); -total
=>
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-number-explore-groups 1))
(defrule
	(game-time < 120)
;	(unit-type-count-total villager > 0)
	(building-type-count-total town-center == 0)
	(building-type-count-total lumber-camp == 0)
	(wood-amount < 275)
=>
	(set-strategic-number sn-camp-max-distance 480)
	(set-strategic-number sn-maximum-town-size 480)
	(set-strategic-number sn-wood-gatherer-percentage 50); provisory
	(set-strategic-number sn-food-gatherer-percentage 9)
	(set-strategic-number sn-gold-gatherer-percentage 8)
	(set-strategic-number sn-stone-gatherer-percentage 33)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-cap-civilian-explorers 100)
	(set-strategic-number sn-total-number-explorers 101)
	(set-strategic-number sn-number-explore-groups 101))
(defrule
	(game-time < 120)
;	(unit-type-count-total villager > 0)
	(building-type-count-total town-center == 0)
	(building-type-count-total mining-camp == 0)
	(stone-amount < 100)
=>
	(set-strategic-number sn-camp-max-distance 480)
	(set-strategic-number sn-maximum-town-size 480)
	(set-strategic-number sn-wood-gatherer-percentage 33); provisory
	(set-strategic-number sn-food-gatherer-percentage 9)
	(set-strategic-number sn-gold-gatherer-percentage 8)
	(set-strategic-number sn-stone-gatherer-percentage 50)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-cap-civilian-explorers 100)
	(set-strategic-number sn-total-number-explorers 101)
	(set-strategic-number sn-number-explore-groups 101))
(defrule
;	(game-time < 120)
	(unit-type-count-total villager > 0)
	(building-type-count-total town-center == 0)
(or	(building-type-count-total lumber-camp >= 1)
	(wood-amount >= 275))
(or	(building-type-count-total mining-camp >= 1)
	(stone-amount >= 100))
=>
	(set-strategic-number sn-camp-max-distance 480)
	(set-strategic-number sn-maximum-town-size 480)
	(set-strategic-number sn-wood-gatherer-percentage 33); provisory
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 5)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-cap-civilian-explorers 100)
	(set-strategic-number sn-total-number-explorers 101)
	(set-strategic-number sn-number-explore-groups 101))
(defrule
	(unit-type-count-total villager > 0)
	(building-type-count-total town-center == 0)
(or	(building-type-count-total lumber-camp >= 1)
	(wood-amount >= 275))
(or	(building-type-count-total mining-camp >= 1)
	(stone-amount >= 100))
=>
	(set-strategic-number sn-camp-max-distance 480)
	(set-strategic-number sn-maximum-town-size 480)
; no	(set-strategic-number sn-mill-max-distance 28); 480
	(up-modify-sn sn-maximum-food-drop-distance c:max 15); 30
;	(set-strategic-number sn-wood-gatherer-percentage 100)
;	(set-strategic-number sn-food-gatherer-percentage 0)
;	(set-strategic-number sn-gold-gatherer-percentage 0)
;	(set-strategic-number sn-stone-gatherer-percentage 0)
	(set-escrow-percentage wood 100)
	(set-escrow-percentage stone 100)
	(set-goal escrow-purpose-goal town-center)
)
(defrule ; 123
	(goal escrow-purpose-goal town-center)
	(building-type-count-total town-center >= 1)
=>
	(release-escrow wood)(release-escrow stone)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage stone 0)
	(set-goal escrow-purpose-goal 0)
)
(defrule ; 125
	(goal escrow-purpose-goal town-center)
(or	(building-type-count-total town-center <= 0)
	(and	(up-pending-objects c: town-center <= 0)
		(building-type-count town-center <= 0))); just to be sure
	(can-build-with-escrow town-center)
=>
	(release-escrow wood)(release-escrow stone)
	(set-escrow-percentage wood 0)
	(set-escrow-percentage stone 0)
	(set-goal increase-town-size-goal 0)
	(build town-center)
	(set-goal escrow-purpose-goal 0)
)
(defrule ; 126
(or	(building-type-count-total town-center <= 0)
	(and	(up-pending-objects c: town-center <= 0)
		(building-type-count town-center <= 0))); just to be sure
;	(goal increase-town-size-goal 0)
	(can-build town-center)
;	(wood-amount >= 275)
;	(stone-amount >= 100)
;	(building-available town-center)
=>
	(set-goal increase-town-size-goal 0)
	(build town-center)
;	(set-goal increase-town-size-goal town-center)
;	(chat-local-to-self "Trying to get a TC up.")
)

(defrule
	(building-type-count-total mill >= 1)
(or	(wood-amount >= 200)
	(dropsite-min-distance wood s:<= sn-maximum-wood-drop-distance))
	(strategic-number sn-wood-gatherer-percentage < 5)
	(strategic-number sn-minimum-civilian-explorers >= 1)
=>
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-number-explore-groups 1))
(defrule
(or	(unit-type-count scout-unit >= 1)
	(current-age <= dark-age))
(or	(players-building-count every-enemy >= 1)
	(current-age <= dark-age))
	(building-type-count-total mill >= 1)
	(building-type-count-total lumber-camp >= 1)
	(dropsite-min-distance wood s:<= sn-maximum-wood-drop-distance)
	(strategic-number sn-minimum-civilian-explorers >= 1)
=>
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-number-explore-groups 1))
(defrule
	(unit-type-count scout-unit <= 0)
(or	(not	(resource-found wood))
(or	(dropsite-min-distance wood s:> sn-maximum-wood-drop-distance)
	(dropsite-min-distance wood > 7)))
	(strategic-number sn-wood-gatherer-percentage >= 5)
	(building-type-count town-center >= 1); -total
=>
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-minimum-civilian-explorers 1)
	(set-strategic-number sn-cap-civilian-explorers 1)
	(set-strategic-number sn-total-number-explorers 2)
	(set-strategic-number sn-number-explore-groups 2))
(defrule
(or	(unit-type-count-total villager <= 1)
	(unit-type-count scout-unit >= 1))
	(strategic-number sn-current-age >= fc-transit); provisory
	(strategic-number sn-minimum-civilian-explorers >= 1)
=>
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-total-number-explorers 1)
	(set-strategic-number sn-number-explore-groups 1))

(defrule
	(up-pending-objects c: lumber-camp < 1)
	(game-time > 10);
	(resource-found wood)
	(building-type-count-total town-center <= 0)
(or	(dropsite-min-distance wood >= 5)
	(building-type-count-total lumber-camp <= 0))
	(dropsite-min-distance wood < 480)
	(wood-amount < 275)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-camp-max-distance 480)
	(set-strategic-number sn-maximum-town-size 480)
	(set-strategic-number sn-allow-adjacent-dropsites 0); testing adjalumb
	(set-strategic-number sn-wood-gatherer-percentage 100)
	(build lumber-camp))
(defrule
	(up-pending-objects c: mining-camp < 1)
	(resource-found stone)
	(building-type-count-total town-center <= 0)
(or	(dropsite-min-distance stone > 5)
	(building-type-count-total mining-camp <= 0))
	(dropsite-min-distance stone < 480)
(or	(wood-amount >= 260)
	(building-type-count-total lumber-camp > 0))
	(stone-amount < 100)
	(can-build mining-camp)
=>
	(set-strategic-number sn-camp-max-distance 480)
	(set-strategic-number sn-maximum-town-size 480)
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp))

#load-if-defined DEFEND-WONDER
(defrule
	(unit-type-count-total villager > fourty-percent-pop)
=>
	(set-goal train-civ-goal -1))
#end-if
(defrule
	(strategic-number sn-resource-control != 3)
(nand	(strategic-number sn-current-age == feudal)
	(and	(strategic-number sn-resource-control == 2)
		(goal under-attack-goal 0)))
=>
	(set-strategic-number sn-resource-control 0))
(defrule
	(game-time > 20)
(or	(or	(map-type scandanavia)
		(death-match-game))
	(and	(or	(dropsite-min-distance live-boar <= 32)
			(and	(dropsite-min-distance deer-hunting <= 32)
				(game-time > 240)))
		(unit-type-count-total villager >= 10))); 15; 12
	(research-available ri-loom)
=>
	(set-goal need-loom-goal 1)
)
(defrule
(or	(players-military-population any-enemy >= 3); loom fast when enemy seems dangerous
(or	(current-age >= castle-age); loom anyways at some point
(or	(goal need-loom-goal 1); loom needed before hunting
(or	(and	(housing-headroom <= 0)
		(up-pending-objects c: house <= 0))
	(and	(up-pending-objects c: villager <= 0)
		(and	(food-amount < 50)
			(up-timer-status FDrop != timer-running)))))))
	(can-research ri-loom)
=>
	(research ri-loom)
)
(defrule
	(building-type-count-total town-center > 0)
(or 	(housing-headroom < housing-headroom1); too late actually, but if we have no food we can't train vils anyways.
	(and	(population > 10)
		(housing-headroom < 4)))
	(population-headroom > 0)
=>
	(set-goal housing-goal 1)
)
#load-if-not-defined WONDER-RACE
(defrule
	(housing-headroom < 10)
(or	(goal strategy-goal flush)
	(building-type-count-total blacksmith > 0))
	(strategic-number sn-current-age >= feudal)
	(population < eighty-five-percent-pop)
	(housing-headroom < housing-headroom2)
	(population-headroom > 0)
=>
	(set-goal housing-goal 1)
)
(defrule
(or	(population > 60)
	(and	(strategic-number sn-current-age >= castle)
		(or	(goal unit-goal eagle-warrior)
			(goal unit-goal archer))))	
	(strategic-number sn-current-age >= feudal)
(or	(housing-headroom < housing-headroom2)
	(population > seventy-five-percent-pop))
	(population-headroom > 0)
(nand	(goal strategy-goal boom)
	(building-type-count-total town-center < 2))
=>
	(set-goal housing-goal 1)
)
(defrule
(or	(and	(housing-headroom < 10)
		(up-pending-objects c: house < 1)); test
	(unit-type-count villager >= 4)); 5
	(housing-headroom < 40)
	(population-headroom > 0)
	(wood-amount >= 1000)
	(food-amount >= 2000)
	(gold-amount >= 1500); don't get capped on PIDM etc
	(building-type-count-total town-center >= 1)
	(game-time >= 45)
	(strategic-number sn-current-age >= df-transit); fc-transit
=>
	(set-goal housing-goal 1)
)
#end-if

(defrule
(or	(up-pending-objects c: house >= 10)
(or	(housing-headroom >= 50)
	(population-headroom <= 0)))
=>
	(set-goal housing-goal 0)
)
(defrule
	(strategic-number sn-current-age <= dark)
	(building-type-count town-center <= 0)
(or	(or	(civ-selected hun)
		(civ-selected chinese))
	(or	(building-type-count-total house >= 1)
		(wood-amount >= 300)))
=>
	(up-assign-builders c: town-center-foundation c: 6)
	(set-goal housing-goal 0)
)
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-current-age <= dark)
	(up-pending-objects c: house >= 1); test
	(building-type-count-total house >= 2)
=>
	(set-goal housing-goal 0)
)
#end-if
#load-if-not-defined HUN-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined SPANISH-CIV ; speed bonus on buildings
(defrule
	(building-type-count-total house == 0)
	(goal housing-goal 1)
(or	(or	(civ-selected aztec)
		(civ-selected mayan))
	(not (map-type scandanavia))); go for early loom
(nor	(up-research-status c: ri-treadmill-crane >= research-pending)
	(and	(death-match-game)
		(starting-age == dark-age)))
=>
	(up-assign-builders c: house c: 2)
	(disable-self)
)
(defrule
	(building-type-count house > 0)
=>
	(up-assign-builders c: house c: 1)
	(disable-self)
)
#end-if
#end-if
#end-if
(defrule
	(goal housing-goal 1)
	(up-pending-objects c: house < 5)
(or	(up-pending-objects c: house < 2)
(or	(and	(up-pending-objects c: house < 4)
		(unit-type-count villager >= 5))
	(unit-type-count villager >= 7)))
	(housing-headroom < 40)
	(wood-amount >= 2000)
	(food-amount >= 2000)
	(gold-amount >= 2000)
	(building-type-count-total town-center >= 1)
	(game-time >= 45)
	(strategic-number sn-current-age >= df-transit); fc-transit
	(can-build house)
=>
	(build house)
	(set-goal housing-goal 0)
	(set-goal increase-town-size-goal house)
)
(defrule
	(goal housing-goal 1)
(or	(up-pending-objects c: house < 1)
(or	(and	(and	(population >= 90)
			(housing-headroom < 6))
		(or	(up-pending-objects c: house < 2)
			(population >= pop-house)))
	(and	(game-time < 30)
		(and	(wood-amount >= 225)
			(and	(population >= 10)
				(housing-headroom <= 0))))))
	(up-pending-objects c: house < 3)
	(can-build house)
=>
	(build house)
	(set-goal housing-goal 0)
	(set-goal increase-town-size-goal house)
)
(defrule
	(up-pending-objects c: house == 0)
	(housing-headroom <= 4)
	(population-headroom > 0)
(or	(building-type-count-total dock >= 1)
	(and	(goal strategy-goal drush)
		(building-type-count-total barracks >= 1)))
	(building-type-count-total town-center >= 1)
	(strategic-number sn-current-age == dark)
	(can-build house)
=>
	(build house)
	(set-goal housing-goal 0)
	(set-goal increase-town-size-goal house)
)
#load-if-defined DEATH-MATCH
(defrule
	(goal housing-goal 1)
(or	(game-time >= 180)
(or	(building-type-count-total archery-range > 0)
(or	(building-type-count-total barracks > 0)
	(building-type-count-total stable > 0))))
(or	(up-pending-objects c: house < 2)
	(strategic-number sn-current-age >= df-transit))	
(or	(up-pending-objects c: house < 3)
	(starting-age == post-imperial-age))
	(up-pending-objects c: house < 5)
	(can-build house)
=>
	(build house)
	(set-goal housing-goal 0)
	(set-goal increase-town-size-goal house)
)
#end-if
(defrule
	(goal housing-goal 1)
	(population > 150)
	(population-cap >= 300)
	(up-pending-objects c: house < 5)
	(can-build house)
=>
	(build house)
	(set-goal housing-goal 0)
	(set-goal increase-town-size-goal house)
)
#load-if-defined WONDER-RACE
(defrule
	(true)
=>
	(set-goal strategy-goal fast-imp);overwrite all other settings
	(set-goal unit-goal wonder)
	(set-goal control-goal wonder))
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total market < 1)
	(current-age == feudal-age)
	(can-afford-building market)
	(building-available market)
=>
	(set-goal increase-town-size-goal market)
	(enable-timer increase-town-size-timer 4)
)
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total market >= 1)
	(building-type-count-total blacksmith < 1)
	(current-age == feudal-age)
	(can-afford-building blacksmith)
	(building-available blacksmith)
=>
	(set-goal increase-town-size-goal blacksmith)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total university < 1)
	(current-age == castle-age)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal university)
	(enable-timer increase-town-size-timer 4))
#end-if ; Just to test something, but not needed anyway.
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(can-research ri-treadmill-crane)
=>
	(research ri-treadmill-crane))
(defrule
	(strategic-number sn-current-age >= ci-transit)
=>
	(enable-timer 6 60)
	(disable-self))
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(timer-triggered 6)
	(food-amount < 300)
	(can-buy-commodity food)
	(research-available ri-stonecutting)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food))
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(not (research-available ri-stonecutting))
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food)
	(delete-building farm)
	(enable-timer lumber-timer 1200))
(defrule
	(current-age >= imperial-age)
	(wood-amount > 1100)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood.")
	(sell-commodity wood))
(defrule
	(current-age >= imperial-age)
	(wood-amount < 1000)
	(gold-amount > 1150)
	(commodity-buying-price wood <= 150)
=>
	(chat-local-to-self "Buying wood.")
	(buy-commodity wood))
(defrule
	(current-age >= imperial-age)
	(stone-amount < 1000)
	(gold-amount >= 1200)
;	(commodity-buying-price stone <= 200)
=>
	(chat-local-to-self "Buying stone.")
	(buy-commodity stone))
(defrule
(nand	(death-match-game)
	(game-time < 1200)); testing if this rule was bugging
	(can-build wonder)
=>
	(build wonder))
(defrule
	(building-type-count-total wonder > 0)
=>
	(delete-building blacksmith)
	(delete-building market)
	(delete-building university)
	(delete-building monastery)
	(delete-building town-center)
	(set-goal increase-town-size-goal 2)); block build system
#else
;******************** NAVY INITIALISATION ********************

(defrule
(not	(taunt-detected any-human 35))
(or	(up-compare-goal biggest-enemy-navy > 0)
(or	(players-unit-type-count any-enemy turtle-ship-line > 0)
(or	(players-unit-type-count any-enemy caravel-line > 0)
(or	(players-unit-type-count any-enemy cannon-galleon-line > 0)
(or	(players-unit-type-count any-enemy demolition-ship-line > 0)
(or	(players-unit-type-count any-enemy longboat-line > 0)
(or	(players-unit-type-count any-enemy galley-line > 0)
	(players-unit-type-count any-enemy fire-ship-line > 0))))))))
=>
	(set-goal enemy-boats-goal 1)
)
(defrule
(not	(taunt-detected any-human 35))
	(building-type-count dock > 0)
(or	(players-building-type-count any-enemy dock > 0)
	(players-unit-type-count any-enemy fishing-ship > 0))
=>
	(set-goal enemy-boats-goal 1)
)
(defrule
(or	(goal enemy-boats-goal 1)
	(players-building-type-count any-enemy dock > 0))
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-number-boat-explore-groups 0)
;	(chat-to-player my-player-number "Enemy going for water, treat this as a watermap now.")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(taunt-detected any-human 34)
=>
	(acknowledge-taunt every-human 34)
	(acknowledge-taunt every-human 35)
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-number-boat-explore-groups 0)
;	(chat-to-allies-using-id 7110); "Yes."
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(taunt-detected any-human 35)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock 999)
;	(chat-to-allies-using-id 7110); "Yes."
)
#load-if-not-defined BLACK-FOREST-MAP
#load-if-not-defined FORTRESS-MAP
#load-if-not-defined OASIS-MAP
#load-if-not-defined SALT-MARSH-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
(or	(cc-players-unit-type-count 0 shore-fish >= shorefishreq) ; a lot
(or	(cc-players-unit-type-count 0 sea-fish >= deepfishreq); a lot
	(and	(cc-players-unit-type-count 0 shore-fish >= shorefishreq2); a bit
		(cc-players-unit-type-count 0 sea-fish >= deepfishreq2)))); a bit
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-number-boat-explore-groups 0)
;	(chat-to-player my-player-number "This map has fish.")
	(disable-self))
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
;	(set-strategic-number sn-maximum-fish-boat-drop-distance 14)
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-number-boat-explore-groups 0)
	(disable-self))
#end-if
#end-if
#end-if
#end-if
(defrule
(or	(map-type islands)
	(map-type team-islands))
	(strategic-number sn-minimum-water-body-size-for-dock != water-islands)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-islands)
	(set-strategic-number sn-garrison-rams 0); don't load rams or the computer messes up with transports
	(set-strategic-number sn-group-form-distance 30); big distances to load transport ships
	(set-goal strategy-goal rush)
;	(chat-to-player my-player-number "Defined as island-map.")
)
#load-if-defined PACIFIC-ISLANDS-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock != water-islands)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-islands)
	(set-strategic-number sn-garrison-rams 0); don't load rams or the computer messes up with transports
	(set-strategic-number sn-group-form-distance 30); big distances to load transport ships
	(set-goal strategy-goal rush)
;	(chat-to-player my-player-number "Defined as island-map.")
)
#end-if
#load-if-not-defined BALTIC-MAP
#load-if-not-defined COASTAL-MAP
#load-if-not-defined CONTINENTAL-MAP
#load-if-not-defined CRATER-LAKE-MAP
#load-if-not-defined HIGHLAND-MAP
#load-if-not-defined MEDITERRANEAN-MAP
#load-if-not-defined RIVERS-MAP
#load-if-not-defined SALT-MARSH-MAP
#load-if-not-defined SCANDANAVIA-MAP
#load-if-not-defined YUCATAN-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(wall-completed-percentage 2 >= 100)
;(or	(goal position-goal flank)
(or	(players-building-type-count any-enemy dock > 0)
	(goal enemy-boats-goal 1));); So that we don't train tons of boats in a mixed map in case the detection was wrong - sn-dock-training-filter
	(building-type-count stone-wall-line < 9)
	(building-type-count palisade-wall < 9)
	(building-type-count gate < 3)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-islands)
	(set-strategic-number sn-garrison-rams 0); don't load rams or the computer messes up with transports
	(set-strategic-number sn-group-form-distance 30); big distances to load transport ships
	(set-goal strategy-goal rush)
;	(chat-to-player my-player-number "Islands?")
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
(not	(player-in-game any-ally))
(or	(player-valid 3)
(or	(player-valid 4)
(or	(player-valid 5)
(or	(player-valid 6)
(or	(player-valid 7)
	(player-valid 8))))))
	(game-time > 13)
=>
	(set-goal nr-map-goal 1)
	(set-goal ffa-game-goal 1)
	(disable-self))
(defrule
(or	(and	(player-in-game any-human-enemy)
		(or	(or	(map-type black-forest)
				(cc-players-unit-type-count 0 tree-class > heavy-wood))
			;(or	(map-type mongolia)
				(map-type oasis)));)
	(building-type-count stone-wall-line > 15))
=>
	(set-goal nr-map-goal 1)
	(disable-self))
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(goal enemy-boats-goal 0)
	(players-building-type-count any-enemy dock <= 0)
=>
	(set-strategic-number sn-dock-training-filter 0)
	(up-jump-rule 2))
(defrule
(or	(warboat-count >= 4); hmm
(or	(goal enemy-boats-goal 1)
	(players-building-type-count any-enemy dock > 0)))
	(current-age == feudal-age)
	(strategic-number sn-dock-training-filter != 1)
=>
	(set-strategic-number sn-dock-training-filter 1)
	(disable-self))
(defrule
(or	(up-compare-goal navy-count >= 4); hmm
(or	(goal enemy-boats-goal 1)
	(players-building-type-count any-enemy dock > 0)))
	(current-age >= castle-age)
	(strategic-number sn-dock-training-filter != 2)
=>
	(set-strategic-number sn-dock-training-filter 2)); only train ships where needed
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(population >= del-civ-pop); max pop
	(wood-amount >= 125)
;	(up-compare-goal navy-count <= 0)
	(unit-type-count-total transport-ship <= 0)
	(strategic-number sn-dock-training-filter != 0)
=>
	(set-strategic-number sn-dock-training-filter 0)); train ships everywhere

(defrule
	(strategic-number sn-target-player-number > 0); (strategic-number sn-focus-player-number > 0)
=>
	(up-get-focus-fact unit-type-count galley-line math-goal)
	(up-modify-goal enemy-focus-navy g:= math-goal)
	(up-get-focus-fact unit-type-count fire-ship-line math-goal)
	(up-modify-goal enemy-focus-navy g:+ math-goal)
	(up-get-focus-fact unit-type-count longboat-line math-goal)
	(up-modify-goal enemy-focus-navy g:+ math-goal)
	(up-get-focus-fact unit-type-count turtle-ship-line math-goal)
	(up-modify-goal math-goal c:* 3)
	(up-modify-goal enemy-focus-navy g:+ math-goal)
	(up-get-focus-fact unit-type-count cannon-galleon-line math-goal)
	(up-modify-goal enemy-focus-navy g:+ math-goal))
(defrule
	(strategic-number sn-target-player-number > 0); (strategic-number sn-focus-player-number > 0)
=>
	(up-get-fact-max any-enemy unit-type-count galley-line math-goal)
	(up-modify-goal biggest-enemy-navy g:= math-goal)
	(up-get-fact-max any-enemy unit-type-count fire-ship-line math-goal)
	(up-modify-goal biggest-enemy-navy g:+ math-goal)
	(up-get-fact-max any-enemy unit-type-count longboat-line math-goal)
	(up-modify-goal biggest-enemy-navy g:+ math-goal)
	(up-get-fact-max any-enemy unit-type-count turtle-ship-line math-goal)
	(up-modify-goal math-goal c:* 3)
	(up-modify-goal biggest-enemy-navy g:+ math-goal)
	(up-get-fact-max any-enemy unit-type-count cannon-galleon-line math-goal)
	(up-modify-goal biggest-enemy-navy g:+ math-goal))
;(defrule
;	(strategic-number sn-target-player-number > 0); (strategic-number sn-focus-player-number > 0)
;(or	(up-compare-goal navy-count <= 0)
;	(up-compare-goal enemy-focus-navy <= 0))
;=>
;	(up-get-fact-sum any-ally warboat-count 0 math-goal)
;	(up-modify-goal math-goal g:+ navy-count)
;	(up-get-fact-sum any-enemy warboat-count 0 math-goal2)
;	(up-modify-goal math-goal g:- math-goal2)
;	(up-modify-goal math-goal3 c:= 15)
;	(up-modify-goal math-goal3 c:max minNavy)
;	(up-modify-goal math-goal3 g:* enemies)
;	(up-modify-goal math-goal3 c:+ 10)
;	(up-modify-goal math-goal g:- math-goal3)
;	(up-modify-goal math-goal c:max 0))
(defrule
	(strategic-number sn-target-player-number > 0); (strategic-number sn-focus-player-number > 0)
=>
;	(set-goal math-goal 0)
	(up-get-fact-sum any-ally warboat-count 0 math-goal4)
	(up-modify-goal math-goal4 g:+ navy-count)
	(up-get-fact-sum any-enemy warboat-count 0 math-goal2)
	(up-modify-goal math-goal4 g:- math-goal2)
	(up-modify-goal math-goal3 c:= minNavy)
	(up-modify-goal math-goal3 g:* enemies)
	(up-modify-goal math-goal4 g:- math-goal3))
(defrule
	(strategic-number sn-target-player-number > 0); (strategic-number sn-focus-player-number > 0)
	(up-compare-goal math-goal4 >= 0)
;	(goal enemy-boats yes)
=>
	(up-modify-goal max-navy g:= enemy-focus-navy)
;;	(up-modify-goal max-navy g:- math-goal)
	(up-modify-goal max-navy c:+ minNavy)
	(up-modify-goal max-navy c:max 0))
(defrule
	(strategic-number sn-target-player-number > 0); (strategic-number sn-focus-player-number > 0)
	(up-compare-goal math-goal4 < 0)
;	(goal enemy-boats yes)
=>
	(up-modify-goal max-navy g:= biggest-enemy-navy)
;	(up-modify-goal max-navy g:- math-goal)
	(up-modify-goal max-navy c:+ minNavy)
	(up-modify-goal max-navy c:max 0))
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
(or	(population < max-civ-pop)
	(soldier-count >= 50)); 20; 40
=>
;	(up-modify-goal max-navy c:max 900)
;	(up-modify-goal max-navy c:= max-civ-pop)
	(up-modify-goal math-goal c:= max-pop)
	(up-modify-goal math-goal c:- max-civ)
	(up-modify-goal math-goal c:- 20)
	(up-modify-goal math-goal c:max 0)
	(up-modify-goal max-navy g:max math-goal)
	(up-modify-goal max-navy c:max minNavy)); 0

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
(or	(goal unit-goal skirmisher)
	(goal unit-goal archer))
	(up-compare-goal strategy-goal != flush)
	(current-age < castle-age)
	(goal position-goal flank)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal default-unit);pocket-unit);my-unique-unit-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
(or	(goal unit-goal skirmisher)
	(goal unit-goal archer))
	(up-compare-goal strategy-goal != flush)
	(current-age < castle-age)
(or	(goal position-goal pocket)
	(strategic-number sn-current-age >= fc-transit))
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(goal unit-goal my-unique-unit-line)
(or	(goal unit-goal skirmisher)
	(goal unit-goal archer)))
	(current-age < castle-age)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal militiaman-line)
)
(defrule
	(goal unit-goal battle-elephant)
	(goal monk-threat-goal 1)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
)

;******************** MILITARY SUPERIORITY CODE ********************

(defrule
	(true)
=>
	(up-get-fact military-population 0 math-goal)
	(up-get-target-fact military-population 0 math-goal2); -focus
	(up-modify-goal math-goal g:- math-goal2))

(defrule
	(strategic-number sn-current-age >= fc-transit)
=>
	(up-jump-rule 5))
(defrule
	(up-compare-goal math-goal >= 25)
	(strategic-number sn-military-level != 3)
=>
	(set-strategic-number sn-military-level 3))
(defrule
	(up-compare-goal math-goal <= 24)
	(up-compare-goal math-goal >= 14)
	(strategic-number sn-military-level != 2)
=>
	(set-strategic-number sn-military-level 2))
(defrule
	(up-compare-goal math-goal <= 13)
	(up-compare-goal math-goal >= 7)
	(strategic-number sn-military-level != 1)
=>
	(set-strategic-number sn-military-level 1))
(defrule
	(up-compare-goal math-goal <= 6)
	(up-compare-goal math-goal >= -4)
	(strategic-number sn-military-level != 0)
=>
	(set-strategic-number sn-military-level 0))
(defrule
	(up-compare-goal math-goal <= -5)
	(strategic-number sn-military-level != -1)
=>
	(set-strategic-number sn-military-level -1))
(defrule
	(strategic-number sn-current-age < fc-transit)
=>
	(up-jump-rule 5))
(defrule
	(up-compare-goal math-goal >= 45)
	(strategic-number sn-military-level != 3)
=>
	(set-strategic-number sn-military-level 3))
(defrule
	(up-compare-goal math-goal <= 44)
	(up-compare-goal math-goal >= 25)
	(strategic-number sn-military-level != 2)
=>
	(set-strategic-number sn-military-level 2))
(defrule
	(up-compare-goal math-goal <= 24)
	(up-compare-goal math-goal >= 10)
	(strategic-number sn-military-level != 1)
=>
	(set-strategic-number sn-military-level 1))
(defrule
	(up-compare-goal math-goal <= 9)
	(up-compare-goal math-goal >= -9)
	(strategic-number sn-military-level != 0)
=>
	(set-strategic-number sn-military-level 0))
(defrule
	(up-compare-goal math-goal <= -10)
	(strategic-number sn-military-level != -1)
=>
	(set-strategic-number sn-military-level -1))

(defrule
	(population >= del-civ-pop)
	(goal escrow-purpose-goal 0)
(or	(research-completed ri-bracer)
(or	(research-completed ri-plate-mail)
(or	(research-completed ri-plate-barding)
(or	(research-completed ri-blast-furnace)
	(research-completed ri-ring-archer-armor)))))
	(strategic-number sn-military-level <= 0)
=>
	(set-strategic-number sn-military-level 1))
(defrule
	(population >= del-civ-pop)
	(current-age-time > 180)
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(goal escrow-purpose-goal 0)
	(strategic-number sn-military-level <= 0)
=>
	(set-strategic-number sn-military-level 1))

(defrule
(or	(military-population >= 2)
(or	(players-military-population any-ally >= 2)
	(players-military-population any-enemy >= 2)))
	(timer-triggered one-minute-timer)
=>
	(up-chat-data-to-self "Military level: %d." s: sn-military-level)
)


(defrule ; counter the actual attacker too, but only when we're actually under attack
(nor	(unit-type-count castle-arrow > 0)
(or	(unit-type-count castle-arrow-chemistry > 0)
(or	(unit-type-count tc-arrow > 0)
	(goal under-attack-goal 1))))
=>
	(up-jump-rule 2))
(defrule
	(up-compare-goal threat-player >= 1)
	(up-compare-goal threat-player < 8)
	(strategic-number sn-target-player-number g:!= threat-player)
	(strategic-number sn-target-player-number s:== sn-focus-player-number)
=>
	(up-modify-goal math-goal s:= sn-focus-player-number))
(defrule
	(up-compare-goal threat-player >= 1)
	(up-compare-goal threat-player < 8)
	(strategic-number sn-target-player-number g:!= threat-player)
	(strategic-number sn-target-player-number s:== sn-focus-player-number)
=>
	(up-modify-sn sn-focus-player-number g:= threat-player))


(defrule
	(strategic-number sn-infantry-threat < 1)
(or 	(or	(or	(players-unit-type-count focus-player militiaman-line > 6)
			(players-unit-type-count focus-player eagle-warrior-line > 6))
		(or	(players-unit-type-count focus-player teutonic-knight-line > 4)
			(players-unit-type-count focus-player berserk-line > 4)))
	(or	(or	(players-unit-type-count focus-player samurai-line > 4)
			(players-unit-type-count focus-player woad-raider-line > 4))
		(players-unit-type-count focus-player jaguar-man-line > 4)))
=>
	(set-strategic-number sn-infantry-threat 1)
)
(defrule
	(strategic-number sn-infantry-threat < 1)
(or	(players-unit-type-count focus-player karambit-warrior-line > 6)
(or	(players-unit-type-count focus-player kamayuk-line > 6)
(or	(players-unit-type-count focus-player shotel-line > 4)
(or	(players-unit-type-count focus-player gbeto-line > 4)
(or	(players-unit-type-count focus-player huskarl-line > 6)
	(players-unit-type-count focus-player throwing-axeman-line > 6))))))
=>
	(set-strategic-number sn-infantry-threat 1)
)
(defrule
	(strategic-number sn-infantry-threat < 2)
(or	(or	(or	(players-unit-type-count focus-player militiaman-line > 13)
			(players-unit-type-count focus-player eagle-warrior-line > 13))
		(or	(players-unit-type-count focus-player teutonic-knight-line > 10)
			(players-unit-type-count focus-player berserk-line > 10)))
	(or	(or	(players-unit-type-count focus-player samurai-line > 10)
			(players-unit-type-count focus-player woad-raider-line > 10))
		(players-unit-type-count focus-player jaguar-man-line > 13)))
=>
	(set-strategic-number sn-infantry-threat 2)
)
(defrule
	(strategic-number sn-infantry-threat < 2)
(or	(players-unit-type-count focus-player kamayuk-line > 13)
(or	(players-unit-type-count focus-player karambit-warrior-line > 13)
(or	(players-unit-type-count focus-player shotel-line > 10)
(or	(players-unit-type-count focus-player gbeto-line > 10)
(or	(or	(and	(players-unit-type-count focus-player spearman-line >= 17)
			(unit-type-count cavalry-unit-class >= 20))
		(players-unit-type-count focus-player huskarl-line > 13))
	(players-unit-type-count focus-player throwing-axeman-line > 13))))))
=>
	(set-strategic-number sn-infantry-threat 2)
)
(defrule
	(strategic-number sn-infantry-threat < 2)
(or	(or	(or	(players-unit-type-count focus-player militiaman-line > 20)
			(players-unit-type-count focus-player eagle-warrior-line > 20))
		(or	(players-unit-type-count focus-player teutonic-knight-line > 15)
			(players-unit-type-count focus-player berserk-line > 15)))
	(or	(or	(players-unit-type-count focus-player samurai-line > 15)
			(players-unit-type-count focus-player woad-raider-line > 15))
		(players-unit-type-count focus-player jaguar-man-line > 15)))
=>
	(set-strategic-number sn-infantry-threat 3)
)
(defrule
	(strategic-number sn-infantry-threat < 3)
(or	(players-unit-type-count focus-player kamayuk-line > 20)
(or	(players-unit-type-count focus-player karambit-warrior-line > 20)
(or	(players-unit-type-count focus-player shotel-line > 15)
(or	(players-unit-type-count focus-player gbeto-line > 15)
(or	(or	(and	(players-unit-type-count focus-player spearman-line >= 25)
			(unit-type-count cavalry-unit-class >= 20))
		(players-unit-type-count focus-player huskarl-line > 16))
	(players-unit-type-count focus-player throwing-axeman-line > 15))))))
=>
	(set-strategic-number sn-infantry-threat 3)
)
(defrule
	(strategic-number sn-infantry-threat < 3)
(or	(or	(or	(players-unit-type-count focus-player militiaman-line > 30)
			(players-unit-type-count focus-player eagle-warrior-line > 30))
		(or	(players-unit-type-count focus-player teutonic-knight-line > 24)
			(players-unit-type-count focus-player berserk-line > 24)))
	(or	(or	(players-unit-type-count focus-player samurai-line > 24)
			(players-unit-type-count focus-player woad-raider-line > 24))
		(players-unit-type-count focus-player jaguar-man-line > 24)))
=>
	(set-strategic-number sn-infantry-threat 4)
)
(defrule
	(strategic-number sn-infantry-threat < 4)
(or	(players-unit-type-count focus-player kamayuk-line > 30)
(or	(players-unit-type-count focus-player karambit-warrior-line > 30)
(or	(players-unit-type-count focus-player shotel-line > 24)
(or	(players-unit-type-count focus-player gbeto-line > 24)
(or 	(or	(and	(players-unit-type-count focus-player spearman-line >= 42)
			(unit-type-count cavalry-unit-class >= 20))
		(players-unit-type-count focus-player huskarl-line > 24))
	(players-unit-type-count focus-player throwing-axeman-line > 24))))))
=>
	(set-strategic-number sn-infantry-threat 4)
)
(defrule
	(game-time < 1500)
	(players-building-type-count focus-player castle > 0); early enemy castle and ranged uu civ
(or	(or	(players-civ focus-player berbers)
		(or	(players-civ focus-player burmese)
			(players-civ focus-player vietnamese)))
(or	(or	(players-civ focus-player briton)
		(players-civ focus-player chinese))
	(or	(or	(players-civ focus-player mayan)
			(players-civ focus-player mongol))
		(or	(players-civ focus-player spanish)
			(players-civ focus-player turkish)))))
=>
	(set-strategic-number sn-archer-threat 1)
)
(defrule
(or	(players-unit-type-count focus-player hand-cannoneer > 6)
(or	(players-unit-type-count focus-player conquistador-line > 4)
	(players-unit-type-count focus-player janissary-line > 4)))
=>
	(set-strategic-number sn-archer-threat 1)
)
(defrule
(or 	(players-unit-type-count focus-player genoese-crossbowman-line > 11)
(or	(players-unit-type-count focus-player rattan-archer-line > 9)
(or	(players-unit-type-count focus-player arambai-line > 9)
(or	(players-unit-type-count focus-player chu-ko-nu-line > 9)
(or	(players-unit-type-count focus-player longbowman-line > 9)
(or	(players-unit-type-count focus-player plumed-archer-line > 9)
(or	(players-unit-type-count focus-player mangudai-line > 9)
(or	(players-unit-type-count focus-player cavalry-archer-line > 9)
	(players-unit-type-count focus-player war-wagon-line > 9)))))))))
=>
	(set-strategic-number sn-archer-threat 2)
)
(defrule
(or	(players-unit-type-count focus-player camel-archer-line > 9)
(or	(players-unit-type-count focus-player elephant-archer-line > 9)
(or	(players-unit-type-count focus-player hand-cannoneer > 11)
(or	(and	(goal unit-goal archer)
		(players-unit-type-count focus-player skirmisher-line > 15))
(or	(players-unit-type-count focus-player conquistador-line > 9)
	(players-unit-type-count focus-player janissary-line > 9))))))
=>
	(set-strategic-number sn-archer-threat 2)
)
(defrule
(or 	(players-unit-type-count focus-player genoese-crossbowman-line > 23)
(or	(players-unit-type-count focus-player rattan-archer-line > 20)
(or	(players-unit-type-count focus-player arambai-line > 20)
(or	(players-unit-type-count focus-player chu-ko-nu-line > 20)
(or	(players-unit-type-count focus-player longbowman-line > 20)
(or	(players-unit-type-count focus-player plumed-archer-line > 20)
(or	(players-unit-type-count focus-player mangudai-line > 20)
(or	(players-unit-type-count focus-player cavalry-archer-line > 20)
	(players-unit-type-count focus-player war-wagon-line > 20)))))))))
=>
	(set-strategic-number sn-archer-threat 3)
)
(defrule
(or	(players-unit-type-count focus-player camel-archer-line > 20)
(or	(players-unit-type-count focus-player elephant-archer-line > 20)
(or	(players-unit-type-count focus-player hand-cannoneer > 23)
(or	(and	(goal unit-goal archer)
		(players-unit-type-count focus-player skirmisher-line > 30))
(or	(players-unit-type-count focus-player conquistador-line > 20)
	(players-unit-type-count focus-player janissary-line > 20))))))
=>
	(set-strategic-number sn-archer-threat 3)
)
(defrule
(or 	(players-unit-type-count focus-player genoese-crossbowman-line > 46)
(or	(players-unit-type-count focus-player rattan-archer-line > 40)
(or	(players-unit-type-count focus-player arambai-line > 40)
(or	(players-unit-type-count focus-player chu-ko-nu-line > 40)
(or	(players-unit-type-count focus-player longbowman-line > 40)
(or	(players-unit-type-count focus-player plumed-archer-line > 40)
(or	(players-unit-type-count focus-player mangudai-line > 40)
(or	(players-unit-type-count focus-player cavalry-archer-line > 40)
	(players-unit-type-count focus-player war-wagon-line > 40)))))))))
=>
	(set-strategic-number sn-archer-threat 4)
)
(defrule
(or	(players-unit-type-count focus-player camel-archer-line > 40)
(or	(players-unit-type-count focus-player elephant-archer-line > 40)
(or	(players-unit-type-count focus-player hand-cannoneer > 46)
(or	(and	(goal unit-goal archer)
		(players-unit-type-count focus-player skirmisher-line > 60))
(or	(players-unit-type-count focus-player conquistador-line > 40)
	(players-unit-type-count focus-player janissary-line > 40))))))
=>
	(set-strategic-number sn-archer-threat 4)
)
(defrule
(or	(or	(or	(players-unit-type-count focus-player magyar-huszar-line > 4)
			(players-unit-type-count focus-player boyar-line > 4))
		(or	(or	(players-unit-type-count focus-player knight-line > 4)
				(players-unit-type-count focus-player scout-cavalry-line > 4))
			(or	(players-unit-type-count focus-player tarkan-line > 3)
				(players-unit-type-count focus-player war-elephant-line > 2))))
	(or	(players-unit-type-count focus-player camel-line > 4)
		(players-unit-type-count focus-player cataphract-line > 4)))
=>
	(set-strategic-number sn-cavalry-threat 1)
)
(defrule
(or	(or	(or	(players-unit-type-count focus-player magyar-huszar-line > 10)
			(players-unit-type-count focus-player boyar-line > 10))
		(or	(or	(players-unit-type-count focus-player knight-line > 10)
				(players-unit-type-count focus-player scout-cavalry-line > 10))
			(or	(players-unit-type-count focus-player tarkan-line > 10)
				(players-unit-type-count focus-player war-elephant-line > 6))))
	(or	(players-unit-type-count focus-player camel-line > 10)
		(players-unit-type-count focus-player cataphract-line > 10)))
=>
	(set-strategic-number sn-cavalry-threat 2)
)
(defrule
(or	(or	(or	(players-unit-type-count focus-player magyar-huszar-line > 16)
			(players-unit-type-count focus-player boyar-line > 16))
		(or	(or	(players-unit-type-count focus-player knight-line > 16)
				(players-unit-type-count focus-player scout-cavalry-line > 16))
			(or	(players-unit-type-count focus-player tarkan-line > 16)
				(players-unit-type-count focus-player war-elephant-line > 10))))
	(or	(players-unit-type-count focus-player camel-line > 16)
		(players-unit-type-count focus-player cataphract-line > 16)))
=>
	(set-strategic-number sn-cavalry-threat 3)
)
(defrule
(or	(or	(or	(players-unit-type-count focus-player magyar-huszar-line > 26)
			(players-unit-type-count focus-player boyar-line > 22))
		(or	(or	(players-unit-type-count focus-player knight-line > 22)
				(players-unit-type-count focus-player scout-cavalry-line > 26))
			(or	(players-unit-type-count focus-player tarkan-line > 22)
				(players-unit-type-count focus-player war-elephant-line > 15))))
	(or	(players-unit-type-count focus-player camel-line > 22)
		(players-unit-type-count focus-player cataphract-line > 22)))
=>
	(set-strategic-number sn-cavalry-threat 4)
)
(defrule
(or	(players-unit-type-count focus-player kamayuk-line > 10)
(or	(or	(players-unit-type-count focus-player camel-line > 9)
		(players-unit-type-count focus-player spearman-line > 12))
	(or	(players-unit-type-count focus-player mameluke-line > 9)
		(and	(game-time < 1380)
			(players-unit-type-count focus-player spearman-line > 6)))))
=>
	(set-goal anti-cavalry-threat-goal 1)
)
(defrule
(or	(players-unit-type-count any-enemy scout-cavalry-line > 9)
(or	(players-unit-type-count any-enemy eagle-warrior-line > 9)
	(goal enemy-goal eagle-warrior)))
=>
	(set-goal anti-monk-threat-goal 1)
)
(defrule
(or	(players-unit-type-count any-enemy missionary > 5)
(or	(players-unit-type-count any-enemy monk > 5)
	(and	(game-time < 1500)
		(players-building-type-count focus-player monastery > 1))))
(or	(game-time < 1500)
(or	(players-unit-type-count any-enemy missionary > 11)
	(players-unit-type-count any-enemy monk > 11)))
(or	(game-time < 1800)
(or	(players-unit-type-count any-enemy missionary > 18)
	(players-unit-type-count any-enemy monk > 18)))
=>
	(set-goal monk-threat-goal 1)
)
; Following rules help to make up for poor scouting.
(defrule
	(game-time > 900)
	(game-time < 1800)
	(strategic-number sn-cavalry-threat <= 0)
(or	(players-unit-type-count focus-player knight-line > 0)
	(game-time < 1320))
	(players-building-type-count focus-player stable > 0)

=>
	(set-strategic-number sn-cavalry-threat 1)
)
(defrule
	(strategic-number sn-cavalry-threat < 2)
(or	(and	(and	(game-time < 1500)
			(players-unit-type-count focus-player knight-line > 3))
		(or	(players-unit-type-count focus-player knight-line > 5)
			(game-time < 1320)))
		(players-building-type-count focus-player stable > 1))
=>
	(set-strategic-number sn-cavalry-threat 2)
)
(defrule
	(game-time > 1020)
	(game-time < 1260)
	(goal strategy-goal flush)
	(strategic-number sn-cavalry-threat == 0)
	(players-building-type-count focus-player barracks < 1)
	(players-building-type-count focus-player archery-range == 0)
	(players-military-population focus-player < 2)
	(players-building-type-count focus-player market == 0)
(nor	(players-civ focus-player aztec)
(or	(players-civ focus-player incan)
	(players-civ focus-player mayan)))
=>
	(set-strategic-number sn-cavalry-threat 1)
)
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-cavalry-threat < 1)
	(current-age >= castle-age)
	(game-time < 480)
(nor	(or	(players-civ focus-player gothic)
		(players-civ focus-player korean))
	(or	(players-civ focus-player viking)
		(players-civ focus-player briton)))
(nor	(players-civ focus-player japanese)
	(goal meso-enemy-goal 1))
=>
	(set-strategic-number sn-cavalry-threat 1)
)
#end-if
(defrule
	(strategic-number sn-archer-threat < 1)
	(players-current-age focus-player < imperial-age)
	(players-current-age-time focus-player < 600)
	(players-building-type-count focus-player archery-range > 1)
=>
	(set-strategic-number sn-archer-threat 1)
)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined DIFFICULTY-HARD
;(defrule
;(or	(goal unit-goal archer)
;	(goal strategy-goal flush))
;	(up-research-status c: ri-ballistics < research-pending)
;(or	(and	(strategic-number sn-cavalry-threat > 1)
;		(players-current-age every-enemy >= castle-age))
;	(players-unit-type-count focus-player eagle-warrior-line > 10))
;=>
;	(set-difficulty-parameter ability-to-maintain-distance 100); stay
;)
(defrule
(or	(or	(unit-type-count fire-ship-line >= 4)
		(unit-type-count scorpion-line >= 18))
	(or	(unit-type-count ranged-unit-class >= 46)
		(unit-type-count war-wagon-line >= 46)))
=>
	(set-difficulty-parameter ability-to-maintain-distance 100); stay
)
(defrule
	(unit-type-count fire-ship-line < 3)
	(unit-type-count scorpion-line < 16)
	(unit-type-count ranged-unit-class < 42)
	(unit-type-count war-wagon-line < 42)
=>
	(set-difficulty-parameter ability-to-dodge-missiles ability-to-dodge); 0 = dodge
	(set-difficulty-parameter ability-to-maintain-distance ability-to-kite)); 0 = kite
(defrule
(or	(unit-type-count-total cavalry-class >= 30)
	(unit-type-count-total scout-cavalry-line >= 27))
=>
	(set-difficulty-parameter ability-to-dodge-missiles 100))
(defrule
	(unit-type-count-total cavalry-class < 30)
	(unit-type-count-total scout-cavalry-line < 27)
=>
	(set-difficulty-parameter ability-to-dodge-missiles 0))
#end-if
#end-if
#end-if
#end-if




(defrule ; test
(nor	(unit-type-count castle-arrow > 0)
(or	(unit-type-count castle-arrow-chemistry > 0)
(or	(unit-type-count tc-arrow > 0)
	(goal under-attack-goal 1))))
=>
	(up-jump-rule 1))
(defrule
	(strategic-number sn-target-player-number g:== threat-player)
	(strategic-number sn-target-player-number s:!= sn-focus-player-number)
=>
	(up-modify-sn sn-focus-player-number s:== sn-target-player-number)
;jtbs	(up-modify-sn sn-focus-player-number g:= math-goal)
)







#end-if

; Scouting
#load-if-not-defined WONDER-RACE
#load-if-not-defined DEATH-MATCH
#load-if-not-defined SCANDANAVIA-MAP
(defrule
(or	(civ-selected hun)
(or	(civ-selected mayan)
(or	(housing-headroom >= 2)
(or	(unit-type-count 118 >= 2)
(or	(unit-type-count 212 >= 2)
(or	(and	(unit-type-count 118 >= 1)
		(unit-type-count 212 >= 1))
(or	(building-type-count house >= 1)
	(building-type-count-total town-center <= 0))))))))
;	(timer-triggered civ-explore-timer)
;	(game-time > 90)
;	(strategic-number sn-minimum-civilian-explorers > 0)
;	(strategic-number sn-maximum-wood-drop-distance == 0)
=>
	(up-modify-sn sn-maximum-wood-drop-distance c:max wood-distance);test	(set-strategic-number sn-maximum-wood-drop-distance -1)
	(up-modify-sn sn-maximum-wood-drop-distance c:max wood-distance2)
	(up-modify-sn sn-maximum-wood-drop-distance c:max 15)
;	(chat-local-to-self "Enable wood gathering.")
)
(defrule
	(game-time > 90)
	(game-time < 1800)
	(strategic-number sn-percent-civilian-explorers == 0)
	(building-type-count-total mill == 0)
	(unit-type-count villager < 11)
	(sheep-and-forage-too-far)
	(strategic-number sn-current-age == dark)
	(building-type-count town-center > 0)
=>
	(set-strategic-number sn-percent-civilian-builders 0)
	(set-strategic-number sn-percent-civilian-explorers 100)
	(set-strategic-number sn-minimum-civilian-explorers 12)
	(set-strategic-number sn-maximum-food-drop-distance 15); 32
	(set-strategic-number sn-maximum-wood-drop-distance 15); 0
	(enable-timer civ-explore-timer 20)
;	(chat-local-to-self "Civ explore again.")
	(disable-self)
)
#end-if
#end-if
;(defrule
;(nand	(strategic-number sn-current-age >= df-transit)
;	(unit-type-count-total fishing-ship <= 0))
;;	(up-gaia-type-count c: sea-fish <= 0)
;	(cc-players-unit-type-count 0 sea-fish >= deepfishreq2)
;=>
;	(up-jump-rule 2))
(defrule
	(strategic-number sn-number-boat-explore-groups >= 1)
(or	(and	(strategic-number sn-number-boat-explore-groups >= 2)
		(players-building-count any-enemy >= 1))
(or	(game-time >= 3000)
	(up-compare-goal navy-count <= 0)))
=>
	(up-modify-sn sn-number-boat-explore-groups c:- 1)
	(up-modify-sn sn-number-boat-explore-groups c:max 0))
(defrule
	(strategic-number sn-number-boat-explore-groups >= 1)
	(strategic-number sn-military-level <= 0)
	(goal team-coordination-goal 0)
	(strategic-number sn-current-age < ci-transit)
=>
	(up-modify-sn sn-number-boat-explore-groups c:- 1)
	(up-modify-sn sn-number-boat-explore-groups c:max 0))

(defrule
	(strategic-number sn-number-boat-explore-groups <= 0)
(or	(players-building-count every-enemy <= 0); just to make sure
(or	(goal team-coordination-goal 1)
	(and	(strategic-number sn-military-level >= 0)
		(population >= max-civ-pop))))
	(up-compare-goal navy-count >= 1)
=>
	(up-modify-sn sn-number-boat-explore-groups c:+ 1))
(defrule
	(strategic-number sn-number-boat-explore-groups <= 0)
(or	(players-building-count every-enemy <= 0); any
	(and	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
		(players-building-type-count every-enemy dock <= 0))); any
(or	(strategic-number sn-current-age >= ci-transit)
	(and	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
		(or	(and	(strategic-number sn-current-age >= df-transit)
				(up-compare-goal strategy-goal == flush))
			(and	(strategic-number sn-current-age >= fc-transit)
				(up-compare-goal strategy-goal == rush)))))
=>
	(up-modify-sn sn-number-boat-explore-groups c:+ 1))
(defrule
	(players-building-count every-enemy <= 0); any
	(strategic-number sn-number-boat-explore-groups >= 1)
(or	(unit-type-count fishing-ship >= 1)
	(up-compare-goal navy-count >= 1))
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
=>
	(up-send-scout group-type-water-explore scouting-type)
	(disable-self))

(defrule
	(game-time s:>= sn-home-exploration-time)
	(strategic-number sn-home-exploration-time < 900)
	(players-building-count every-enemy >= 1)
(or	(dropsite-min-distance live-boar > 32)
	(dropsite-min-distance deer-hunting > 20))
	(players-current-age target-player <= dark-age); every-enemy
	(players-military-population target-player <= 2)
=>
	(up-modify-sn sn-home-exploration-time c:+ 20)); 10
(defrule
	(game-time s:>= sn-home-exploration-time)
	(dropsite-min-distance live-boar > 32)
	(dropsite-min-distance deer-hunting > 20)
(or	(unit-type-count-total villager >= 10)
	(players-building-count every-enemy >= 1))
(or	(goal position-goal pocket)
	(players-building-count every-enemy >= 1))
=>
	(up-modify-sn sn-home-exploration-time c:+ 30); 60
	(disable-self))
(defrule
	(game-time s:>= sn-home-exploration-time)
	(unit-type-count 590 <= 0)
	(unit-type-count 592 <= 0)
	(unit-type-count 122 <= 0)
	(unit-type-count 216 <= 0)
(or	(unit-type-count-total villager >= 10)
	(players-building-count every-enemy >= 1))
=>
	(up-modify-sn sn-home-exploration-time c:+ 30); 60
	(disable-self))
(defrule
	(game-time s:< sn-home-exploration-time)
	(game-time >= home-exploration-time)
(or	(dropsite-min-distance live-boar <= 32)
	(dropsite-min-distance deer-hunting <= 20))
(or	(goal position-goal flank)
	(strategic-number sn-current-age >= df-transit))
	(players-building-count any-enemy <= 0)
=>
	(up-modify-sn sn-home-exploration-time c:= home-exploration-time)
	(disable-self))
(defrule
	(game-time s:>= sn-home-exploration-time)
(nor	(map-type islands)
	(map-type team-islands))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(players-building-count any-enemy <= 0); every
	(military-population >= 1)
;	(up-compare-goal strategy-goal != boom)
=>
;	(chat-local-to-self "Searching for the closest enemy.")
	(up-send-scout group-type-land-explore scouting-type)
	(enable-timer scouting-timer 120)
	(disable-self))
(defrule
	(timer-triggered scouting-timer)
	(game-time < 1200)
(nor	(map-type islands)
	(map-type team-islands))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(players-building-count every-enemy <= 0)
	(military-population >= 1)
;	(up-compare-goal strategy-goal != boom)
=>
;	(chat-local-to-self "Searching for the closest enemy again.")
	(up-send-scout group-type-land-explore scouting-type)
	(enable-timer scouting-timer 120)); 80
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(and	(unit-type-count knight-line == 0)
		(strategic-number sn-military-level >= 0))
	(game-time >= 1380))
	(game-time > 1140)
	(game-time < 1800)
	(timer-triggered scouting-timer)
	(strategic-number sn-infantry-threat == 0)
	(strategic-number sn-archer-threat == 0)
	(strategic-number sn-cavalry-threat == 0)
	(players-building-count any-enemy >= 1)
	(players-current-age focus-player >= feudal-age)
	(goal monk-threat-goal 0)
=>
	(enable-timer scouting-timer 180)
;	(set-strategic-number sn-percent-attack-soldiers 1)
;	(attack-now)
;	(chat-local-to-self "Scouting the target-player.")
	(up-send-scout group-type-land-explore scout-enemy)
)
(defrule
	(game-time > 1500)
	(players-building-count every-enemy > 0)
(or	(or	(strategic-number sn-infantry-threat >= 1)
		(strategic-number sn-archer-threat >= 1))
	(or	(strategic-number sn-cavalry-threat >= 1)
		(goal monk-threat-goal 1)))
=>
	(set-strategic-number sn-number-explore-groups 0);disable scouting when found threats to not waste units
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(and	(and	(strategic-number sn-infantry-threat == 0)
			(strategic-number sn-archer-threat == 0))
		(and	(strategic-number sn-cavalry-threat == 0)
			(goal monk-threat-goal 0)))
	(players-building-count any-enemy == 0))
	(strategic-number sn-number-explore-groups == 0)
=>
	(set-strategic-number sn-number-explore-groups 1); restart scouting when no threats found
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(players-current-age any-enemy == feudal-age)
	(players-current-age-time any-enemy > 360); enemy in feudal age for 6+ mins
	(game-time < 1320)
	(players-military-population any-enemy < 2); yet no military
	(players-building-count any-enemy == 0); not all enemy sighted
	(military-population > 10)
	(goal position-goal pocket)
=>
	(set-strategic-number sn-number-explore-groups 3); find the sling
	(set-strategic-number sn-total-number-explorers 3)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(nor	(players-civ every-enemy gothic)
	(players-civ every-enemy viking))
(nor	(players-civ every-enemy japanese)
	(goal meso-enemy-goal 1))
	(strategic-number sn-cavalry-threat == 0)
	(strategic-number sn-number-explore-groups == 0)
=>
	(set-strategic-number sn-number-explore-groups 1);resume exploring
)
(defrule
	(up-compare-goal meso-enemy-goal != 1)
	(stance-toward focus-player enemy)
(or	(players-civ focus-player aztec)
(or	(players-civ focus-player mayan)
	(players-civ focus-player incan)))
=>
	(set-goal meso-enemy-goal 1))
(defrule
	(up-compare-goal meso-enemy-goal != 0)
	(stance-toward focus-player enemy)
(nor	(players-civ focus-player aztec)
(or	(players-civ focus-player mayan)
	(players-civ focus-player incan)))
=>
	(set-goal meso-enemy-goal 0))

#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined UP-POCKET-POSITION


#load-if-not-defined ARENA-MAP
#load-if-not-defined FORTRESS-MAP
(defrule
(or	(wall-completed-percentage 2 >= 100)
	(wall-completed-percentage 1 >= 100))
(or	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(building-type-count stone-wall-line >= 10)
(or	(building-type-count palisade-wall >= 50)
	(building-type-count gate >= 2))))
=>
	(up-jump-rule 2))
(defrule
	(current-age == dark-age); we have +2 villagers, so enemy feudals early?! => flush
	(players-building-count any-enemy > 0)
	(players-current-age target-player == dark-age)
	(unit-type-count villager >= 22); or +3 villagers as meso as they start with either one more or free loom and save time.
(or	(players-civilian-population target-player < 21)
	(unit-type-count villager >= 23))
(or	(players-civilian-population target-player < 22)
	(unit-type-count villager >= 24))
(or	(players-civilian-population target-player < 23)
	(unit-type-count villager >= 25))
(or	(players-civilian-population target-player < 24)
	(unit-type-count villager >= 26))
(or	(players-civilian-population target-player < 25)
	(unit-type-count villager >= 27))
	(players-civilian-population target-player < 26)
=>
	(set-goal enemy-goal flush)
)
(defrule
	(players-current-age target-player == feudal-age)
(or	(game-time < 1020)
	(players-military-population target-player > 11))
	(players-military-population target-player > 4)
=>
	(set-goal enemy-goal flush)
)
#end-if ; maps
#end-if


#end-if ; <- no pocket
(defrule
	(players-current-age target-player == dark-age)
(or	(goal ffa-game-goal 1)
	(players-civilian-population target-player >= 26))
	(goal enemy-goal flush)
=>
	(set-goal enemy-goal 0)
)
#load-if-defined CHINESE-CIV
(defrule
	(players-current-age target-player == dark-age)
(or	(starting-resources >= medium-resources); don't false trigger flush if chinese are able to keep their villager advantage
	(regicide-game))
	(goal enemy-goal flush)
=>
	(set-goal enemy-goal 0)
)
#end-if
(defrule
	(players-current-age target-player == castle-age)
	(game-time < 1200)
	(players-military-population target-player < 3); enemy fast castle without military could be rush so better be prepared
(nor	(goal enemy-goal rush)
	(goal enemy-goal eagle-warrior))
=>
	(set-goal enemy-goal rush)
)
(defrule
	(game-time < 1260)
	(players-current-age target-player >= castle-age)
	(players-military-population target-player > 5)
	(goal enemy-goal flush)
=>
	(set-goal enemy-goal skirmisher)
;	(chat-to-player my-player-number "The enemy isn't flushing.")
)
(defrule
	(game-time < 1720)
(or	(and	(players-current-age target-player == feudal-age)
		(up-compare-goal enemy-goal != flush))
	(players-unit-type-count target-player skirmisher-line > 8))
	(players-military-population target-player >= 6)
=>
	(set-goal enemy-goal skirmisher)
;	(chat-to-player my-player-number "Enemy trash-unit strategy detected.")
	(disable-self)
)
(defrule
	(game-time < 1500)
	(or
		(or
			(players-unit-type-count target-player eagle-warrior-line > 7)
			(and
				(players-building-type-count target-player barracks > 2)
				(players-unit-type-count target-player militiaman-line < 3)
			)
		)
		(and
			(game-time < 1200)
			(and
				(players-building-type-count target-player barracks > 1)
				(players-military-population target-player < 2)
			)
		)
	)
=>
	(set-goal enemy-goal eagle-warrior)
;	(chat-to-player my-player-number "24Enemy EW rush detected.")
	(disable-self)
)
(defrule
	(game-time < 1500)
	(players-unit-type-count target-player eagle-warrior-line > 4)
	(players-current-age-time target-player < 150)
=>
	(set-goal enemy-goal eagle-warrior)
;	(chat-to-player my-player-number "24Enemy EW rush detected.")
	(disable-self)
)
(defrule
	(game-time >= 1800)
	(or
		(players-unit-type-count target-player eagle-warrior-line < 5)
		(game-time > 2400)
	)
	(players-unit-type-count target-player eagle-warrior-line < 20)
	(goal enemy-goal eagle-warrior)
=>
	(set-goal enemy-goal 0)
	(disable-self)
)
#end-if

;******************** STRATEGY SELECTION ********************

#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal enemy-goal flush)
	(up-compare-goal control-goal != aggressive-rush)
	(up-compare-goal control-goal != shot)
	(up-compare-goal strategy-goal != sling)
	(up-compare-goal position-goal == flank)
	(strategic-number sn-current-age == dark); not too early, if the enemy just had idle TC and we have no food for feudal
	(food-amount >= 430)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-strategic-number sn-task-ungrouped-soldiers 1); spread military to find forward towers, set back after 4 mins
	(set-goal spread-military-goal 1)
	(enable-timer spread-military-timer 240)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal enemy-goal flush)
	(up-compare-goal control-goal != aggressive-rush)
	(up-compare-goal control-goal != shot)
	(up-compare-goal strategy-goal != sling)
	(up-compare-goal position-goal == flank)
	(players-current-age focus-player == feudal-age)
	(strategic-number sn-current-age == df-transit)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-strategic-number sn-task-ungrouped-soldiers 1); spread military to find forward towers, set back after 3 mins
	(set-goal spread-military-goal 1)
	(enable-timer spread-military-timer 180)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal enemy-goal flush)
	(current-age == dark-age)
	(goal control-goal aggressive-rush)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal 0)
	(set-strategic-number sn-task-ungrouped-soldiers 1); spread military to find forward towers, set back after 3 mins
	(set-goal spread-military-goal 1)
	(enable-timer spread-military-timer 180)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal nr-map-goal -1)
	(building-type-count stone-wall-line < 15); not on walled maps
	(strategic-number sn-current-age == feudal)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank); hm
	(building-type-count-total barracks > 0)
(or	(food-amount < 500)
	(goal unit-goal skirmisher))
	(players-military-population focus-player > 2)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal belated-flush-defense); change gatherer percentages to collect more wood
;	(chat-to-player my-player-number "Counter-flushing. 1")
)
#load-if-not-defined BRITON-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count stone-wall-line < 15); not on walled maps
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal rush)
	(goal enemy-goal flush)
	(up-compare-goal position-goal == flank); hm
(nor	(or	(goal control-goal aggressive-rush)
		(goal control-goal shot))
		(goal position-goal pocket))
	(building-type-count barracks > 0)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal belated-flush-defense); change gatherer percentages to collect more wood
;	(chat-to-player my-player-number "Counter-flushing. 2")
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count stone-wall-line < 15); not on walled maps
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal rush)
	(goal enemy-goal flush)
	(up-compare-goal position-goal == flank); hm
	(up-compare-goal control-goal != shot)
	(building-type-count-total stable == 0)
	(building-type-count barracks > 0)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit);	(set-goal unit-goal archer)
	(set-goal control-goal belated-flush-defense); change gatherer percentages to collect more wood
;	(chat-to-player my-player-number "Counter-flushing. 3")
)
#end-if
#end-if
#end-if
#end-if
#load-if-defined DARK-AGE-END
(defrule
(or	(up-compare-goal strategy-goal != boom)
	(up-compare-goal unit-goal != militiaman-line))
	(game-time > 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal militiaman-line)
;	(disable-self)
)
#end-if
#load-if-defined FEUDAL-AGE-END
(defrule
(or	(up-compare-goal strategy-goal != flush)
(or	(up-compare-goal unit-goal == knight)
(or	(up-compare-goal unit-goal == scorpion)
	(up-compare-goal unit-goal == my-unique-unit-line))))
	(game-time > 60)
=>
	(set-goal enemy-goal flush)
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
;	(disable-self)
)
#else
#load-if-not-defined DEATH-MATCH
#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined DIFFICULTY-HARD
;#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(current-age < feudal-age);(strategic-number sn-current-age == dark)
	(goal strategy-goal flush)
=>
	(set-goal strategy-goal rush); boom
	(set-goal unit-goal default-unit)
;	(chat-local-to-self "Don't flush on easy difficulty-levels.")
)
;#end-if
#end-if
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defrule
	(current-age < feudal-age)
	(goal strategy-goal flush)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal default-unit)
;	(chat-local-to-self "Moderate: Flush->Rush.")
)
#end-if
#end-if
#end-if
#load-if-defined DEATH-MATCH ; treat this as flush and build an army in feudal age.
;(defrule
;	(strategic-number sn-current-age == df-transit)
;=>
;	(set-goal enemy-goal flush)
;	(set-goal strategy-goal flush)
;	(set-goal unit-goal default-flush-unit)
;	(disable-self)
;)
#else
#load-if-not-defined SARACEN-CIV
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(nor
		(goal strategy-goal flush)
		(goal strategy-goal sling)
	)
	(or
		(building-type-count-total mining-camp == 0)
		(dropsite-min-distance gold < 0)
	)
	(strategic-number sn-current-age == feudal)
	(building-type-count-total market < 1)
	(current-age-time < 10)
	(nor
		(town-under-attack)
		(goal unit-goal eagle-warrior)
	)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal no-gold-flush-unit)
	(set-strategic-number sn-maximum-gold-drop-distance 20)
)
#end-if
#end-if
#end-if
#end-if
(defrule
;	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal unit-goal my-unique-unit-line)
	(strategic-number sn-current-age == feudal)
	(current-age-time < 10)
(or	(dropsite-min-distance stone < 0); no stone found
	(dropsite-min-distance stone > 20)); so switch strategy ; 33
=>
	(set-goal unit-goal default-ranged); should work for all civs
	(set-goal ranged-unit-type-goal default-ranged)
)
(defrule
;	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age <= fc-transit);
(or	(civ-selected aztec)
;(or	(civ-selected hun)
;(or	(civ-selected incan)
	(civ-selected persian));))
	(goal unit-goal my-unique-unit-line)
=>
;	(chat-local-to-self "Trying to find an alternate strategy: No castledrop.")
	(set-goal unit-goal default-ranged); should work for all civs
	(set-goal ranged-unit-type-goal default-ranged)
	(disable-self)
)
(defrule
;	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count castle >= 1)
	(game-time >= 60)
	(game-time <= 62)
	(goal strategy-goal flush)
=>
;	(chat-local-to-self "Trying to find an alternate strategy: No flush.")
	(set-goal strategy-goal boom); rush
	(set-goal unit-goal default-unit); test
	(set-goal ranged-unit-type-goal default-ranged)
	(disable-self)
)

#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(game-time > 60)
	(game-time < 180)
	(goal nr-map-goal -1)
	(building-type-count stone-wall-line < 15)
	(building-type-count castle < 1)
	(up-compare-goal strategy-goal != flush)
(or	(dropsite-min-distance live-boar <= 32)
(or	(dropsite-min-distance deer-hunting <= 32)
(or	(and	(random-number > 22)
		(random-number < 78))
(or	(up-compare-goal unit-goal == monk)
(or	(up-compare-goal strategy-goal == boom)
(or	(up-research-status c: ri-loom >= research-pending);
(or	(players-building-count any-enemy >= 1)
	(strategic-number sn-enable-boar-hunting >= 1))))))))
	(up-compare-goal position-goal == flank)
	(up-compare-goal control-goal != shot)
	(up-compare-goal strategy-goal != flush)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal 0)
	(disable-self))
#end-if ; flank flush
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(game-time > 60);
;	(game-time < 180)
	(up-compare-goal strategy-goal == flush)
;	(random-number >= 9)
	(current-age <= dark-age)
(or	(up-compare-goal position-goal == pocket)
(or	(up-compare-goal nr-map-goal != -1)
	(building-type-count stone-wall-line >= 15))); not on walled maps
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal default-unit)
	(set-goal control-goal 0)
	(disable-self))


(defrule
	(goal strategy-goal flush)
	(up-research-status c: castle-age <= research-available); unavailable
(or	(goal unit-goal scorpion)
(or	(goal unit-goal knight)
(or	(goal unit-goal battle-elephant)
(or	(goal unit-goal gunpowder-class)
	(goal unit-goal my-unique-unit-line)))))
=>
	(set-goal unit-goal default-flush-unit))
(defrule
	(up-compare-goal unit-goal == 0); don't use <= here
	(game-time > 62); 180
=>
;	(chat-to-all "test")
	(set-goal unit-goal default-unit))


#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
(or	(game-time < 850)
	(and	(building-type-count-total monastery > 0)
		(and	(players-current-age focus-player == feudal-age)
			(players-military-population focus-player < 2))))
	(strategic-number sn-current-age >= fc-transit)
	(goal unit-goal eagle-warrior)
	(goal control-goal 0)
=>
	(set-goal control-goal aggressive-rush)
;	(chat-to-player my-player-number "Going for an aggressive EW rush.")
)
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count-total villager >= 28)
	(goal strategy-goal flush)
	(up-compare-goal enemy-goal != flush)
(or	(unit-type-count-total villager >= 30)
	(and	(up-compare-goal unit-goal != militiaman-line)
		(up-compare-goal unit-goal != scout-cavalry)))
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal default-unit)
;	(chat-local-to-self "Had a bad dark-age, switching to a fast castle-age strategy.")
)
#end-if
#end-if
#load-if-defined LUDIKRIS-MAP
#load-if-defined UP-POCKET-POSITION
(defrule
	(up-compare-goal strategy-goal == flush)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal default-unit)
	(disable-self))
#else
(defrule
	(up-compare-goal strategy-goal == flush)
	(random-number >= 13)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal default-unit)
	(disable-self))
#end-if
#end-if
(defrule
	(up-compare-goal strategy-goal == boom)
(or	(map-size tiny)
(or	(goal nomad yes)
	(goal landnomad yes)))
=>
	(set-goal strategy-goal rush)
	(disable-self))
#load-if-defined SUDDEN-DEATH
(defrule
	(up-compare-goal strategy-goal == boom)
=>
	(set-goal strategy-goal rush))
#end-if
(defrule
	(up-compare-goal treaty-time >= 1150)
	(up-compare-goal strategy-goal == flush)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal default-unit))
(defrule
	(up-compare-goal treaty-time >= 2050)
	(up-compare-goal strategy-goal != boom)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal default-unit))

; *** STRATEGY DEPENDING ON CIV ***


#load-if-defined AZTEC-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(game-time > 13)
	(game-time < 60)
	(random-number <= 20)
(or	(goal position-goal pocket)
(or	(map-size giant)
	(map-size ludikris)))
(or	(up-compare-goal position-goal != flank)
(or	(random-number <= 5)
(or	(map-size giant)
	(map-size ludikris))))
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(game-time < 1500)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal unit-goal archer)
	(goal strategy-goal boom)
	(up-compare-goal position-goal == flank)
	(strategic-number sn-military-level < 0)
(or	(building-type-count-total town-center > tc-level-one)
	(goal enemy-goal flush))
=>
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(disable-self)
)
#load-if-not-defined UP-POCKET-POSITION
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(game-time > 13)
	(game-time < 60)
	(random-number >= 41)
	(random-number <= 86)
	(up-compare-goal position-goal == flank)
	(up-compare-goal control-goal != shot)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(set-goal control-goal 0)
	(disable-self)
)
#end-if
#end-if
(defrule
(not	(goal meso-enemy-goal 1)); not scouted yet though
(not	(players-civ any-enemy teutonic))
(or	(random-number >= 36)
(or	(up-compare-goal position-goal != flank)
	(goal nr-map-goal 1)))
	(random-number > 24)
	(random-number <= 36)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(random-number <= 20)
	(random-number > 86))
	(goal position-goal pocket)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal ffa-game-goal -1)
	(goal nr-map-goal -1)
	(strategic-number sn-current-age <= fc-transit)
(nor	(players-civ any-ally briton); don't play with too much ranged
	(players-civ any-ally mayan))
	(random-number >= 70)
(or	(up-compare-goal position-goal == pocket)
	(random-number >= 85))
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == castle)
(or	(and	(goal strategy-goal boom)
		(or	(goal unit-goal archer)
			(goal unit-goal eagle-warrior)))
	(goal unit-goal skirmisher))
	(building-type-count-total town-center >= tc-level-three)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
(or	(building-type-count-total town-center >= tc-level-four)
	(goal unit-goal eagle-warrior))))
=>
	(set-goal strategy-goal fast-imp)
)
(defrule
(or	(or	(players-unit-type-count focus-player huskarl-line > 15)
		(players-unit-type-count focus-player samurai-line > 20))
	(or	(and	(strategic-number sn-cavalry-threat > 3)
			(goal anti-monk-threat-goal 0))
		(strategic-number sn-minimum-water-body-size-for-dock == water-islands)))
=>
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(goal unit-goal monk)
(or	(and	(building-type-count-total barracks > 0)
		(building-type-count-total monastery < 2))
	(up-research-status c: ri-long-swordsman >= research-pending))
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
(or	(or	(goal strategy-goal boom)
		(goal strategy-goal fast-imp))
	(and	(goal unit-goal skirmisher)
		(goal ranged-unit-type-goal archer)))
	(up-compare-goal unit-goal != monk)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(strategic-number sn-current-age < ci-transit)
	(goal unit-goal eagle-warrior)
	(goal strategy-goal rush)
(or	(military-population >= 55)
	(unit-type-count-total eagle-warrior-line >= 40))	
=>
	(set-goal unit-goal eagle-warrior)
	(set-goal strategy-goal fast-imp)
	(set-goal ranged-unit-type-goal 0)
)
(defrule
	(goal unit-goal eagle-warrior)
	(goal strategy-goal rush)
(or 	(players-building-type-count focus-player castle > 0)
(or	(players-unit-type-count focus-player jaguar-man-line > 0)
(or	(players-unit-type-count focus-player samurai-line > 0)
(or	(players-unit-type-count focus-player teutonic-knight-line > 0)
	(players-unit-type-count focus-player cataphract-line > 0)))))
	(game-time < 1500)
=>
	(set-goal unit-goal eagle-warrior)
	(set-goal strategy-goal fast-imp)
	(set-goal ranged-unit-type-goal monk)
)
(defrule
(not	(player-in-game any-ally))
(nor	(goal control-goal my-unique-unit-line)
	(goal unit-goal my-unique-unit-line))
	(up-compare-goal custom-civ-pop > 90)
(or	(and	(strategic-number sn-current-age >= ci-transit)
		(game-time > 3000))
	(and	(food-amount > 400)
		(gold-amount < 100)))
	(current-age-time > 300)
=>
	(set-goal control-goal militiaman-line)
;	(chat-to-player my-player-number "Trying to research m@a and LSM.")
	(disable-self)
)
(defrule
	(game-time < 2100)
	(players-current-age focus-player == imperial-age)
(or	(goal unit-goal mix)
	(goal unit-goal eagle-warrior))
	(players-unit-type-count focus-player eagle-warrior-line > 5)
=>
	(set-goal control-goal militiaman-line)
;	(chat-to-player my-player-number "Trying to research m@a and LSM.")
	(disable-self)
)
(defrule
	(food-amount > 150)
(or	(gold-amount < 50)
	(food-amount > 300))
(or	(and	(up-research-status c: ri-iron-casting >= research-pending)
		(and	(goal unit-goal eagle-warrior)
			(goal enemy-goal eagle-warrior)))
	(and	(goal unit-goal monk)
		(players-unit-type-count focus-player eagle-warrior-line >= 7)))	
=>
	(set-goal control-goal militiaman-line)
;	(chat-to-player my-player-number "Going for LSM to counter KLEW.")
	(disable-self)
)
#load-if-not-defined RIVERS-MAP
#load-if-not-defined BALTIC-MAP
(defrule
(or	(and	(strategic-number sn-current-age >= ci-transit)
		(and	(goal control-goal militiaman-line)
			(up-research-status c: ri-long-swordsman >= research-pending)))
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands))
(nand	(unit-type-count-total eagle-warrior-line > 20); go for eew instead as some enemy still may have ranged units
	(strategic-number sn-archer-threat > 0))
=>
	(set-goal unit-goal militiaman-line)
	(disable-self)
)
#end-if
#end-if
(defrule
	(up-compare-goal control-goal != shot)
	(strategic-number sn-infantry-threat >= 3)
	(players-unit-type-count every-enemy samurai-line < 20)
	(nand
		(players-unit-type-count focus-player eagle-warrior-line > 20)
		(goal control-goal militiaman-line)
	)
	(dropsite-min-distance stone < 5)
	(building-type-count-total town-center >= tc-level-two)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(building-type-count castle > 1)
	(goal control-goal my-unique-unit-line)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
(or	(map-type baltic)
	(map-type rivers))
	(current-age < castle-age)
	(goal unit-goal eagle-warrior)
	(players-unit-type-count any-enemy galley-line > 0)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-islands)
	(set-goal strategy-goal rush)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(map-type baltic)
	(map-type rivers))	
	(goal unit-goal eagle-warrior)
(or	(goal enemy-boats-goal 0)
(or	(up-compare-goal navy-count g:>= max-navy)
	(up-compare-goal navy-count >= 40)))
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-current-age >= fc-transit)
(or	(players-building-type-count focus-player watch-tower > 3)
	(and	(and	(players-unit-type-count focus-player skirmisher-line > 7)
			(players-unit-type-count focus-player militiaman-line < 5))
		(or	(players-unit-type-count focus-player skirmisher-line > 15)
			(game-time < 1500))))
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
	(disable-self)
)
(defrule
	(goal strategy-goal flush)
	(goal unit-goal archer)
	(strategic-number sn-current-age == fc-transit)	
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal strategy-goal boom)
	(set-goal control-goal 0)
	(set-goal unit-goal eagle-warrior)
	(chat-to-allies-using-id 22156)
)
#end-if ; AZTEC CIV STRATEGY
#load-if-defined BERBERS-CIV
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(up-compare-goal unit-goal != knight)
(or	(goal strategy-goal flush)
	(up-compare-goal unit-goal == archer))
=>
	(set-goal unit-goal knight)
;	(chat-to-player my-player-number "Switching to knights.")
	(disable-self)
)
(defrule
	(random-number > 58)
(or	(random-number < 63)
	(goal position-goal pocket))
	(game-time > 13)
	(game-time < 60)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
	(current-age == dark-age)
(or	(and	(random-number > 79)
		(goal position-goal pocket))
(or	(goal nr-map-goal 1)
	(building-type-count stone-wall-line > 15)))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal boom)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
(or	(or	(and	(goal position-goal pocket)
			(and	(random-number < 73)
				(random-number >= 65)))
		(regicide-game))
	(and	(goal nr-map-goal 1)
		(random-number >= 75)))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal unit-goal != knight)
	(up-compare-goal control-goal != my-unique-unit-line)
	(up-compare-goal control-goal != knight)
(or	(unit-type-count villager > fourty-percent-pop)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
(or	(dropsite-min-distance stone < 5)
	(building-type-count castle >= 1))
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
;	(chat-to-player my-player-number "Switching to unique units.")
)
(defrule
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal control-goal != my-unique-unit-line)
	(up-compare-goal control-goal != knight);
(or	(players-unit-type-count focus-player cavalry-archer-line > high-min-number-upgrade)
(or	(players-unit-type-count focus-player mangudai-line > high-min-number-upgrade)
	(players-unit-type-count focus-player conquistador-line > high-min-number-upgrade))); for now
	(building-type-count castle >= 1)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
;	(chat-to-player my-player-number "Switching to unique units.")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
;	(set-goal ranged-unit-type-goal scorpion)
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22156)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal nr-map-goal -1)
	(up-compare-goal position-goal == flank)
(or	(random-number >= 69)
	(and	(goal strategy-goal boom)
		(current-age <= dark-age)))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal default-flush-unit)
	(set-goal strategy-goal flush)
	(disable-self)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 61)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal 0)
	(disable-self)
)
#end-if
#end-if ; Berbers
#load-if-defined BRITON-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
(or	(or	(and	(random-number < 24)
			(or	(goal position-goal pocket)
				(random-number < 8)))
		(regicide-game))
	(goal nr-map-goal 1))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(random-number >= 40)
(or	(random-number >= 98)
	(up-compare-goal position-goal == pocket))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
;	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(up-compare-goal unit-goal != my-unique-unit-line);	(goal unit-goal knight)
	(up-compare-goal control-goal != my-unique-unit-line)
(or	(unit-type-count villager > fourty-percent-pop)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
(or	(dropsite-min-distance stone < 5)
	(building-type-count castle >= 1))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
;	(chat-to-player my-player-number "Switching to unique units.")
)
(defrule
	(building-type-count castle > 1)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(game-time > 13)
	(game-time < 60)
	(random-number > 33)
	(up-compare-goal position-goal == flank)
	(up-compare-goal control-goal != shot)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(set-goal control-goal 0)
	(disable-self)
)
#end-if
(defrule
	(random-number >= 24)
	(random-number < 43)
	(game-time > 13)
	(game-time < 60)
	(goal nr-map-goal -1)
(nand	(up-compare-goal position-goal == flank)
	(up-compare-goal strategy-goal == flush))
=>
	(set-goal unit-goal archer)
	(set-goal strategy-goal rush)
	(disable-self)
)
(defrule
	(up-compare-goal control-goal != shot)
(or	(and	(goal strategy-goal flush)
		(building-type-count-total town-center >= tc-level-three))
	(and	(building-type-count castle > 0)
		(goal unit-goal archer)))
=>
	(set-goal unit-goal mix)
	(set-goal control-goal my-unique-unit-line)
	(disable-self)
)
(defrule
	(up-research-status c: ri-man-at-arms >= research-available)
(or	(or	(players-unit-type-count focus-player eagle-warrior-line > 14)
		(players-unit-type-count focus-player huskarl-line > 20))
	(goal enemy-goal eagle-warrior))
=>
	(set-goal control-goal militiaman-line)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if ; BRITON STRATEGY
#load-if-defined BURMESE-CIV
(defrule
(nor	(goal meso-enemy-goal 1); not scouted yet though
	(players-civ any-enemy teutonic))
	(up-compare-goal position-goal != flank)
	(random-number >= 33)
	(random-number <= 35)
;	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush);	(set-goal strategy-goal fast-imp)
	(set-goal unit-goal monk)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(random-number < 54)
(or	(random-number < 2)
	(goal position-goal pocket))
	(game-time > 13)
	(game-time < 60)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
	(random-number >= 56)
	(random-number < 68)
(or	(goal nr-map-goal 1)
	(and	(goal position-goal pocket)
		(random-number > 60)))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal battle-elephant)
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1);
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
	(random-number >= 68)
(or	(random-number >= 99)
(or	(and	(goal position-goal pocket)
		(random-number >= 96))
(or	(goal nr-map-goal 1)
	(building-type-count castle > 0))))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal control-goal != my-unique-unit-line)
;	(up-compare-goal unit-goal != militiaman-line)
(or	(dropsite-min-distance stone < 6)
	(building-type-count castle > 0))
(or	(building-type-count castle > 1)
	(up-compare-goal unit-goal != battle-elephant))
(or	(building-type-count-total town-center >= tc-level-three)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
;	(chat-to-player my-player-number "Preparing in order to train unique units later on.")
	(set-goal ranged-unit-type-goal scorpion); archer)
;	(disable-self)
)
(defrule
	(up-compare-goal unit-goal != my-unique-unit-line)
	(goal control-goal my-unique-unit-line)
(or	(dropsite-min-distance stone < 6)
	(building-type-count castle >= 1))
(or	(up-research-status c: ri-long-swordsman < research-pending)
(or	(up-compare-goal unit-goal != militiaman-line)
	(building-type-count castle >= 2)))
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion); archer)
)
(defrule
	(up-compare-goal unit-goal != militiaman-line)
	(up-compare-goal control-goal != militiaman-line)
	(up-compare-goal control-goal != my-unique-unit-line)
(or	(and	(strategic-number sn-current-age >= ci-transit)
		(or	(players-unit-type-count focus-player huskarl-line > 10)
			(players-unit-type-count focus-player eagle-warrior-line > 10)))
	(and	(or	(strategic-number sn-current-age >= ci-transit)
			(up-compare-goal anti-cavalry-threat-goal >= 1))
		(and	(food-amount > 500)
			(and	(gold-amount < 100)
				(goal unit-goal knight)))))
=>
	(set-goal control-goal militiaman-line)
	(set-goal ranged-unit-type-goal archer)
)
(defrule
	(up-compare-goal unit-goal != militiaman-line)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-research-status c: ri-long-swordsman >= research-pending)
	(strategic-number sn-current-age >= ci-transit);
=>
	(set-goal unit-goal militiaman-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion); archer)
)
(defrule; test
	(strategic-number sn-current-age < ci-transit)
	(population < max-civ-pop)
	(up-compare-goal custom-civ-pop < max-civ)
	(current-age <= castle-age)
	(up-compare-goal anti-cavalry-threat-goal <= 0)
	(up-compare-goal unit-goal == militiaman-line)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
)
(defrule
	(up-compare-goal unit-goal != battle-elephant)
	(up-compare-goal unit-goal != militiaman-line)
	(up-compare-goal control-goal != battle-elephant)
	(up-compare-goal control-goal != militiaman-line)
	(up-compare-goal control-goal != my-unique-unit-line)
(or	(up-research-status c: ri-howdah >= research-pending)
	(up-research-status c: ri-elite-battle-elephant >= research-pending))
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal control-goal battle-elephant)
	(set-goal ranged-unit-type-goal archer)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number > 72)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal militiaman-line)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 59)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal skirmisher)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
#end-if
#load-if-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
;	(set-goal ranged-unit-type-goal 0)
	(chat-to-allies-using-id 22155)
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal position-goal == flank); hm
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal flush)
	(set-goal unit-goal militiaman-line)
	(set-goal ranged-unit-type-goal archer)
	(chat-to-allies-using-id 22155)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if ; BURMESE STRATEGY
#load-if-defined BYZANTINE-CIV
(defrule
	(goal unit-goal skirmisher)
	(goal meso-enemy-goal 1)
(or	(goal enemy-goal eagle-warrior)
	(and	(and	(game-time < 1200)
			(players-building-type-count focus-player barracks > 0))
		(or	(players-building-type-count focus-player barracks > 1)
			(players-building-type-count focus-player market > 0))))
	(building-type-count castle == 0)
=>
	(set-goal unit-goal mix)
	(disable-self)
)
(defrule
	(building-type-count castle > 1)
	(up-compare-goal unit-goal != my-unique-unit-line)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
;	(chat-to-player my-player-number "Switching to unique units.")
	(disable-self)
)
(defrule
(or	(random-number < 15)
	(and	(up-compare-goal position-goal == pocket)
		(random-number < 45)))
	(goal nr-map-goal -1)
	(game-time > 15)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(random-number > 89)
	(strategic-number sn-current-age == df-transit)
	(building-type-count-total archery-range == 0)
	(goal strategy-goal rush)
	(up-compare-goal enemy-goal != flush)
(or	(or	(players-civ focus-player hun)
		(players-civ focus-player mongol))
	(or	(players-civ focus-player persian)
		(players-civ focus-player frankish)))
=>
	(set-goal unit-goal knight)
)
(defrule
(or	(building-type-count castle > 0)
	(goal nr-map-goal 1))
	(random-number >= 60)
	(game-time > 15)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(dropsite-min-distance stone < 5)
	(building-type-count-total town-center >= tc-level-four)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal control-goal != my-unique-unit-line)
=>
	(set-goal control-goal my-unique-unit-line)
;	(chat-to-player my-player-number "Preparing in order to train unique units later on.")
	(disable-self)
)
(defrule	
	(random-number >= 67)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal my-unique-unit-line)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
#else
(defrule
	(dropsite-min-distance stone < 5)
	(building-type-count-total town-center >= tc-level-three)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal control-goal != my-unique-unit-line)
=>
	(set-goal control-goal my-unique-unit-line)
;	(chat-to-player my-player-number "Preparing in order to train unique units later on.")
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
;	(up-compare-goal position-goal == flank)
	(up-compare-goal strategy-goal != flush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal flush)
	(set-goal control-goal 0)
	(set-goal unit-goal skirmisher)
	(chat-to-allies-using-id 22155)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 87)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal skirmisher)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number > 93)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(goal unit-goal militiaman-line)
(or	(strategic-number sn-current-age == fc-transit)
	(research-available ri-long-swordsman))
	(players-unit-type-count focus-player eagle-warrior-line < 5)
=>
	(set-goal unit-goal skirmisher)
	(set-goal control-goal 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(random-number < 6)
(or	(random-number < 12)
	(goal position-goal pocket))
=>
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(disable-self)
)
(defrule
(or	(and	(goal unit-goal knight)
		(game-time > 1800))
	(and	(goal unit-goal scorpion)
		(building-type-count town-center >= tc-level-four)))
(or	(building-type-count-total castle >= 1)
	(dropsite-min-distance stone < 6))
=>
	(set-goal control-goal my-unique-unit-line)
	(disable-self)
)
(defrule
(or	(goal unit-goal knight)
(or	(goal unit-goal scorpion)
	(goal unit-goal archer)))
	(building-type-count castle > 0)
(or	(building-type-count castle > 1)
	(strategic-number sn-current-age >= ci-transit))
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
)
(defrule
	(goal nr-map-goal -1)
	(current-age == dark-age)
	(random-number > 45)
(or	(up-compare-goal position-goal == pocket)
	(random-number > 96))
	(game-time > 15)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal rush)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(up-compare-goal position-goal == flank)
	(goal nr-map-goal -1)
	(building-type-count stone-wall-line < 10)
	(goal unit-goal knight)
	(goal strategy-goal boom)
=>
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
	(goal unit-goal archer)
	(building-type-count-total town-center >= tc-level-four)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal scorpion)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number > 20)
	(random-number < 40)
(or	(goal nr-map-goal 1)
	(and	(goal position-goal pocket)
		(random-number > 36)))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(goal nr-map-goal 1)
	(and	(goal position-goal pocket)
		(random-number > 42)))
	(random-number <= 72)
	(game-time > 15)
	(game-time < 60)
=>
	(set-goal unit-goal scorpion)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != boom)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 80)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal 0)
	(disable-self)
)
#end-if
#end-if
#load-if-defined CHINESE-CIV
(defrule
(nor	(goal unit-goal knight)
	(goal unit-goal my-unique-unit-line))
(or	(and	(goal strategy-goal flush)
		(strategic-number sn-current-age == fc-transit))
	(and	(goal unit-goal archer)
		(goal forward-threat-goal 1)))
=>
	(set-goal unit-goal knight)
;	(chat-to-player my-player-number "Switching to knights.")
)
(defrule
	(goal unit-goal knight)
	(goal strategy-goal rush)
	(strategic-number sn-current-age == fc-transit)
	(goal ranged-unit-type-goal archer)
	(up-research-status c: ri-bloodlines >= research-pending)
=>
	(set-goal ranged-unit-type-goal cavalry-archer)
	(disable-self)
)
(defrule
	(up-compare-goal unit-goal != my-unique-unit-line);	(goal unit-goal knight)
	(up-compare-goal control-goal != shot)
	(up-compare-goal control-goal != my-unique-unit-line)
(or	(and	(building-type-count-total archery-range > 0)
		(building-type-count-total town-center >= tc-level-three))
(or	(unit-type-count villager > fourty-percent-pop)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop))))
(or	(dropsite-min-distance stone < 5)
	(building-type-count castle >= 1))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
;	(chat-to-player my-player-number "Switching to unique units.")
)
(defrule
	(goal unit-goal knight)
	(goal control-goal my-unique-unit-line)
(or	(and	(goal anti-cavalry-threat-goal 1)
		(not	(player-in-game any-ally)))
	(goal enemy-goal eagle-warrior))
	(up-compare-goal custom-civ-pop > 80)
	(building-type-count castle >= 1)
=>
	(set-goal unit-goal militiaman-line)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(or	(goal nr-map-goal 1)
		(building-type-count castle > 0))
(or	(random-number < 10)
	(and	(up-compare-goal position-goal == pocket)
		(random-number < 50))))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(goal nr-map-goal 1)
	(random-number > 65)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal nr-map-goal -1)
	(building-type-count-total castle == 0)
	(random-number > 75)
(or	(random-number > 90)
	(up-compare-goal position-goal == pocket))
	(game-time < 60)
=>
	(set-goal unit-goal archer)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 80)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(disable-self)
)
#end-if
#end-if
#load-if-defined ETHIOPIAN-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
(or	(or	(random-number < 20)
		(regicide-game))
	(goal nr-map-goal 1))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(random-number > 35)
	(random-number < 88)
	(game-time > 15)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(goal unit-goal knight)
	(up-compare-goal control-goal != shot)
	(up-compare-goal control-goal != my-unique-unit-line)
(or	(strategic-number sn-current-age >= ci-transit)
	(building-type-count castle >= 2))
(or	(unit-type-count villager > sixty-percent-pop)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
	(building-type-count castle >= 1)
(or	(dropsite-min-distance stone < 5)
	(building-type-count castle >= 2))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
;	(chat-to-player my-player-number "Switching to unique units.")
)
(defrule
	(building-type-count castle > 1)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(strategic-number sn-archer-threat < 3)
(or	(strategic-number sn-archer-threat == 0)
	(up-research-status c: ri-siege-onager >= research-pending));(research-completed ri-onager))
=>
	(set-goal unit-goal my-unique-unit-line); shotel power!
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
)
#end-if
#load-if-not-defined UP-POCKET-POSITION
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(game-time > 13)
	(game-time < 60)
	(random-number > 26)
	(up-compare-goal position-goal == flank)
	(up-compare-goal control-goal != shot)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(set-goal control-goal 0)
	(disable-self)
)
#end-if
#end-if
(defrule
	(random-number >= 10)
(or	(random-number <= 25)
	(and	(up-compare-goal position-goal == pocket)
		(random-number <= 35)))
	(game-time > 13)
	(game-time < 60)
(or	(goal nr-map-goal -1)
	(up-compare-goal position-goal == pocket))
=>
	(set-goal unit-goal archer)
	(set-goal strategy-goal rush)
	(disable-self)
)
(defrule
	(random-number >= 88)
	(up-compare-goal position-goal == pocket)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(up-compare-goal control-goal != shot)
(or	(and	(goal strategy-goal flush)
		(building-type-count-total town-center >= tc-level-three))
	(and	(building-type-count castle > 0)
		(goal unit-goal archer)))
=>
	(set-goal unit-goal archer); mix
	(set-goal control-goal my-unique-unit-line)
	(disable-self)
)
(defrule
	(up-research-status c: ri-man-at-arms >= research-available)
(or	(or	(players-unit-type-count focus-player eagle-warrior-line > 14)
		(players-unit-type-count focus-player huskarl-line > 20))
	(goal enemy-goal eagle-warrior))
	(building-type-count castle <= 0)
=>
	(set-goal control-goal militiaman-line)
	(disable-self)
)
(defrule
	(goal control-goal militiaman-line)
(or	(and	(players-unit-type-count focus-player eagle-warrior-line < 12)
		(and	(players-unit-type-count focus-player huskarl-line < 14)
			(up-compare-goal enemy-goal != eagle-warrior)))
	(building-type-count castle >= 1))
=>
	(set-goal control-goal militiaman-line)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22156)
)
#end-if ; ETHIOPIAN STRATEGY
#load-if-defined FRANKISH-CIV
(defrule
	(goal unit-goal militiaman-line)
(or	(players-unit-type-count focus-player spearman-line < 25); every-enemy
	(up-compare-goal control-goal == my-unique-unit-line))
	(gold-amount > 225)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal unit-goal knight)
;	(chat-to-player my-player-number "Switching to knight-line.")
)
(defrule
	(goal unit-goal knight)
	(players-unit-type-count focus-player camel-line >= 10)
(or	(dropsite-min-distance stone < 5)
	(building-type-count castle >= 1))
	(game-time >= 1800)
	(research-available ri-man-at-arms)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
	(goal unit-goal knight)
	(up-compare-goal control-goal != shot)
	(goal anti-cavalry-threat-goal 1)
(or	(strategic-number sn-current-age >= ci-transit)
	(and	(food-amount > 400)
		(gold-amount < 100)))
	(up-compare-goal control-goal != militiaman-line);	(research-available ri-man-at-arms)
(or	(up-research-status c: ri-hand-cart >= research-pending)
	(goal ranged-unit-type-goal 0))
	(building-type-count-total castle > 0)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
	(goal control-goal my-unique-unit-line)
	(goal anti-cavalry-threat-goal 1)
	(building-type-count-total castle > 0)
	(up-compare-goal unit-goal != militiaman-line);	(research-available ri-man-at-arms)
(or	(building-type-count-total castle > 1)
	(strategic-number sn-archer-threat < 2))
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
(not	(player-in-game any-ally))
(nor	(players-civ any-enemy turkish)
	(players-civ any-enemy saracen))
	(goal unit-goal knight)
	(strategic-number sn-military-level < 0)
	(goal anti-cavalry-threat-goal 1)
	(building-type-count-total castle <= 0)
	(up-compare-goal control-goal != my-unique-unit-line)
	(up-research-status c: ri-hand-cart >= research-pending)
=>
	(set-goal control-goal militiaman-line)
)
(defrule
(not	(player-in-game any-ally))
(nor	(players-civ any-enemy turkish)
	(players-civ any-enemy saracen))
	(goal unit-goal knight)
	(up-compare-goal strategy-goal != boom)
	(up-compare-goal control-goal != shot)
	(up-compare-goal ranged-unit-type-goal != scorpion)
	(goal anti-cavalry-threat-goal 1)
	(building-type-count-total castle <= 0)
	(up-compare-goal control-goal != my-unique-unit-line)
(or	(strategic-number sn-current-age >= ci-transit)
	(and	(food-amount > 400)
		(gold-amount < 100)))
	(up-research-status c: ri-hand-cart >= research-pending)
=>
	(set-goal control-goal militiaman-line)
)
(defrule
	(goal unit-goal knight)
	(goal control-goal militiaman-line)
	(players-unit-type-count focus-player spearman-line > 32)
	(strategic-number sn-archer-threat < 2)
	(up-research-status c: ri-long-swordsman >= research-pending)
	(building-type-count-total barracks >= 3)
	(up-compare-goal ranged-unit-type-goal != scorpion)
=>
	(set-goal unit-goal militiaman-line)
;	(chat-to-player my-player-number "Switching to militiaman-line.")
)
(defrule
	(up-compare-goal trade-units > 20)
	(goal anti-cavalry-threat-goal 1)
	(goal unit-goal militiaman-line)
	(up-compare-goal control-goal != militiaman-line)
	(up-compare-goal control-goal != my-unique-unit-line)
	(up-research-status c: ri-cavalier >= research-pending)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
)
(defrule
	(up-compare-goal trade-units > 20)
	(goal anti-cavalry-threat-goal 1)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(goal control-goal militiaman-line)
=>
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total stone-wall-line > 15)
	(game-time > 13)
	(game-time < 60)
	(random-number > 40)
(or	(players-civ focus-player aztec)
	(players-civ focus-player saracen))
=>
	(set-goal control-goal aggressive-rush)
	(set-goal strategy-goal rush)
	(set-goal unit-goal scout-cavalry)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal ffa-game-goal -1)
	(goal nr-map-goal -1)
	(building-type-count-total stone-wall-line < 15)
	(random-number < 30)
	(up-compare-goal position-goal == flank)
(or	(player-in-game any-ally)
	(random-number < 22))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal control-goal aggressive-rush)
	(set-goal strategy-goal flush)
	(set-goal unit-goal scout-cavalry)
	(disable-self)
)
(defrule
	(current-age == castle-age)
	(goal unit-goal scout-cavalry)
=>
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
	(building-type-count castle >= 2)
(or	(up-compare-goal unit-goal == my-unique-unit-line)
	(up-compare-goal control-goal == my-unique-unit-line))
	(goal ranged-unit-type-goal scorpion)
=>
	(set-goal ranged-unit-type-goal 0); test
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
(or	(and	(random-number > 25)
		(or	(random-number > 80)
			(goal nr-map-goal 1)))
	(building-type-count-total stone-wall-line >= 15))
	(up-compare-goal position-goal == pocket)
=>
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(set-goal ranged-unit-type-goal scorpion)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
(or	(random-number < 3)
(or	(and	(or	(goal nr-map-goal 1)
			(building-type-count-total stone-wall-line >= 15))
		(random-number < 9))
	(building-type-count castle > 0)))
	(up-compare-goal position-goal == pocket)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22156)
)
#end-if ;french
#load-if-defined GOTHIC-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-archer-threat >= 1)
	(up-research-status c: ri-champion < research-pending)
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
;	(chat-to-player my-player-number "Switching to husks.")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(dropsite-min-distance stone < 6)
	(building-type-count-total town-center >= tc-level-three)
(or	(or	(players-civ focus-player briton)
		(players-civ focus-player hun))
	(or	(or	(players-civ focus-player mongol)
			(players-civ focus-player mayan))
			(and	(current-age >= imperial-age)
				(goal unit-goal skirmisher))))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
	(up-compare-goal control-goal != militiaman-line)
(or	(or	(players-unit-type-count focus-player eagle-warrior-line > 10)
		(strategic-number sn-current-age >= ci-transit))
	(and	(and	(food-amount > 500)
			(gold-amount < 100))
		(goal unit-goal knight)))
=>
	(set-goal control-goal militiaman-line)
)
(defrule
	(goal unit-goal knight)
	(up-research-status c: ri-long-swordsman >= research-pending)
=>
	(set-goal unit-goal militiaman-line)
	(set-goal control-goal 0)
)
(defrule
(or	(random-number >= 85)
(or	(and	(goal position-goal pocket)
		(random-number >= 70))
(or	(goal nr-map-goal 1)
	(building-type-count castle > 0))))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 13)
	(game-time < 60)
	(random-number >= 14)
	(random-number <= 32)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal militiaman-line)
	(set-goal ranged-unit-type-goal archer)
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
	(set-goal ranged-unit-type-goal 0)
	(chat-to-allies-using-id 22155)
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal position-goal == flank)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal flush)
	(set-goal unit-goal militiaman-line)
	(set-goal ranged-unit-type-goal archer)
	(chat-to-allies-using-id 22155)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if; goths
#load-if-defined HUN-CIV
(defrule
	(current-age >= castle-age)
	(building-type-count archery-range >= 2)
(or	(building-type-count archery-range >= 3); 4)
	(up-compare-goal anti-cavalry-threat-goal >= 1))
	(up-compare-goal unit-goal != cavalry-archer)
	(up-compare-goal control-goal != shot)
	(strategic-number sn-minimum-water-body-size-for-dock <= water-mixed)
=>
	(up-modify-goal control-goal g:= unit-goal);test	(set-goal control-goal 0)
	(set-goal unit-goal cavalry-archer)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
(or	(goal nr-map-goal 1)
(or	(goal position-goal pocket)
	(building-type-count-total stone-wall-line >= 15)))
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(building-type-count-total stone-wall-line < 15)
	(random-number > 60)
(or	(goal nr-map-goal 1)
	(goal position-goal pocket))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal cavalry-archer)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal ffa-game-goal -1)
	(goal nr-map-goal -1)
	(building-type-count-total stone-wall-line < 15)
	(random-number < 88)
(or	(random-number < 66)
	(goal position-goal pocket))
	(random-number > 62)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal control-goal aggressive-rush)
	(set-goal strategy-goal rush)
	(set-goal unit-goal cavalry-archer)
	(disable-self)
)
(defrule
(or	(and	(or	(goal position-goal pocket)
			(goal nr-map-goal 1))
		(random-number < 9)); 12?
	(building-type-count castle > 0))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush); boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal ffa-game-goal -1)
	(goal nr-map-goal -1)
	(building-type-count-total stone-wall-line < 15)
	(random-number < 45)
	(up-compare-goal position-goal == flank)
(or	(player-in-game any-ally)
	(random-number < 25))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal control-goal aggressive-rush)
	(set-goal strategy-goal flush)
	(set-goal unit-goal scout-cavalry)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal cavalry-archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22156)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
	(up-compare-goal strategy-goal != flush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 80)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal skirmisher)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
#end-if
#end-if
#load-if-defined INCAN-CIV
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal strategy-goal fast-imp)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
;	(disable-self); for now
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal boom)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(building-type-count-total town-center >= tc-level-three)))
=>
	(set-goal strategy-goal fast-imp)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number < 38)
(or	(random-number > 19)
	(goal nr-map-goal 1))
	(game-time > 13)
	(game-time < 60)
(or	(goal position-goal pocket)
	(goal nr-map-goal 1))
=>
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number >= 39)
(or	(goal position-goal pocket)
	(goal nr-map-goal 1))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal eagle-warrior)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(strategic-number sn-cavalry-threat <= 0)
	(strategic-number sn-infantry-threat >= 1)
	(up-research-status c: ri-arbalest < research-pending)
=>
	(set-goal ranged-unit-type-goal slinger)
;	(disable-self)
)
(defrule
	(random-number > 60)
	(game-time > 13)
	(game-time < 60)
	(building-type-count castle >= 1)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
	(random-number >= 90)
(or	(goal position-goal pocket)
	(random-number >= 99))
	(goal ffa-game-goal -1)
	(game-time > 13)
	(game-time < 60)
	(building-type-count-total castle <= 0)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
(or	(dropsite-min-distance stone < 5)
	(building-type-count-total castle >= 1))
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(building-type-count-total town-center >= tc-level-three)))
(nor	(goal unit-goal my-unique-unit-line)
	(goal control-goal shot))
(or	(or	(strategic-number sn-cavalry-threat >= 2); 3
		(strategic-number sn-infantry-threat >= 3))
	(and	(up-compare-goal unit-goal != eagle-warrior)
		(strategic-number sn-current-age >= ci-transit)))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
;	(chat-to-player my-player-number "Preparing in order to train unique units later on.")
	(disable-self)
)
(defrule
(or	(and	(goal control-goal my-unique-unit-line)
		(building-type-count castle >= 1))
(or	(and	(up-compare-goal unit-goal != eagle-warrior)
		(building-type-count castle >= 2))
	(building-type-count castle >= 3)))
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
;	(chat-to-player my-player-number "Switching to unique units.")
;	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal strategy-goal boom)
	(set-goal control-goal 0)
	(set-goal unit-goal eagle-warrior)
	(set-goal ranged-unit-type-goal archer)
	(chat-to-allies-using-id 22156)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
	(up-compare-goal strategy-goal != flush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 74)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal skirmisher)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
#end-if
#end-if; INCAN-CIV
#load-if-defined INDIAN-CIV
(defrule
	(game-time > 13)
	(game-time < 60)
(or	(or	(players-civ every-enemy hun)
		(players-civ every-enemy mongol))
	(or	(or	(players-civ every-enemy persian)
			(players-civ every-enemy teutonic))
		(or	(players-civ every-enemy frankish)
			(players-civ every-enemy magyar))))
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
	(game-time < 60)
	(game-time > 16)
(or	(goal nr-map-goal 1)
	(and	(goal position-goal pocket)
		(or	(and	(random-number > 25)
				(random-number < 33))
			(and	(random-number > 67)
				(random-number < 75)))))
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(goal nr-map-goal -1)
	(random-number < 33)
	(up-compare-goal position-goal == flank); hm
	(game-time < 13)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(disable-self)
)
(defrule
	(goal nr-map-goal -1)
	(random-number > 40)
	(random-number < 60)
	(up-compare-goal position-goal == flank); hm
	(game-time < 13)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal skirmisher)
	(disable-self)
)
(defrule
	(goal nr-map-goal -1)
	(random-number > 67)
	(up-compare-goal position-goal == flank); hm
	(game-time < 13)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal scout-cavalry)
	(disable-self)
)
#else
(defrule
	(goal nr-map-goal -1)
	(random-number < 28)
	(game-time > 13)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
#end-if
(defrule
(or	(goal unit-goal militiaman-line)
(or	(goal unit-goal skirmisher)
	(goal unit-goal archer)))
	(building-type-count stable > 1)
=>
	(set-goal unit-goal knight)
;	(chat-to-player my-player-number "Enable training of camels.")
)
(defrule
(or	(goal unit-goal militiaman-line)
(or	(goal unit-goal skirmisher)
	(goal unit-goal archer)))
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone < 6)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if
#load-if-defined ITALIAN-CIV
(defrule
	(game-time < 60)
	(game-time > 16)
(or	(building-type-count castle >= 1)
(or	(goal nr-map-goal 1)
(or	(and	(random-number < 40)
		(goal position-goal pocket))
	(random-number < 12))))
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(game-time < 60)
	(game-time > 13)
	(goal nr-map-goal -1)
	(random-number >= 35)
	(random-number < 56)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
	(game-time < 60)
	(game-time > 13)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number < 73)
	(random-number >= 37)
	(building-type-count stone-wall-line > 15)
=>
	(set-goal strategy-goal fast-imp)
	(set-goal unit-goal gunpowder-class)
	(set-goal ranged-unit-type-goal gunpowder-class)
	(set-goal control-goal 0)
	(disable-self)
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(goal nr-map-goal -1)
	(random-number > 39)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(up-compare-goal position-goal == flank); hm
	(game-time > 13)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(disable-self)
)
#end-if
(defrule
(not	(goal meso-enemy-goal 1)); not scouted yet though
(not	(players-civ any-enemy teutonic))
	(random-number < 9)
	(game-time > 20)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(goal unit-goal archer)
	(strategic-number sn-cavalry-threat >= 1)
(or	(building-type-count-total town-center >= tc-level-three)
(or	(building-type-count castle >= 1)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop))))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
	(goal control-goal my-unique-unit-line)
	(building-type-count castle > 0)
(or	(nor	(strategic-number sn-infantry-threat >= 1)
		(players-civ every-enemy gothic))
	(not (goal unit-goal gunpowder-class)))
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
(or	(strategic-number sn-infantry-threat >= 2)
	(players-civ every-enemy gothic))
=>
	(set-goal unit-goal gunpowder-class)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if ; italy
#load-if-defined JAPANESE-CIV
(defrule
	(strategic-number sn-current-age >= castle)
(or	(goal strategy-goal boom)
(or	(goal unit-goal knight)
	(goal unit-goal skirmisher)))
	(building-type-count-total town-center >= tc-level-four)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
	(strategic-number sn-current-age == castle)
	(up-research-status c: ri-long-swordsman < research-pending)
	(unit-type-count-total militiaman-line < 10)
	(goal strategy-goal flush)
=>
	(set-goal unit-goal skirmisher)
	(set-goal control-goal my-unique-unit-line)
)
(defrule
(or	(goal unit-goal skirmisher)
	(and	(goal unit-goal knight)
		(building-type-count-total castle > 1)))
	(building-type-count castle > 0)
	(up-research-status c: ri-long-swordsman < research-pending)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
(not	(player-in-game any-ally))
	(current-age == dark-age)
(or	(or	(and	(goal ffa-game-goal 1)
			(random-number > 60))
		(building-type-count castle > 0))
	(and	(random-number >= 80)
		(goal nr-map-goal 1)))
	(game-time > 12)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
(not	(player-in-game any-ally))
	(current-age == dark-age)
	(goal meso-enemy-goal 1)
	(random-number >= 90)
	(game-time > 12)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
(not	(player-in-game any-ally))
(not	(goal meso-enemy-goal 1)); not scouted yet though
(not	(players-civ any-enemy teutonic))
	(random-number < 7)
	(game-time > 15)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal strategy-goal flush)
	(goal nr-map-goal 1)
=>
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal strategy-goal flush)
	(unit-type-count villager > 27)
	(strategic-number sn-current-age == dark)
=>
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal strategy-goal rush)
	(disable-self)
)
#load-if-defined UP-POCKET-POSITION
#load-if-defined UP-GAME-AGE2-X2
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
	(set-goal ranged-unit-type-goal archer)
	(chat-to-allies-using-id 22155)
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(chat-to-allies-using-id 22156)
)
#end-if
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal position-goal == flank); hm
	(up-compare-goal strategy-goal != flush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 13)
	(game-time < 60)
	(random-number >= 19)
	(random-number <= 29)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal militiaman-line)
	(set-goal ranged-unit-type-goal archer)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != boom)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22156)
)
#end-if
#load-if-defined KHMER-CIV
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal strategy-goal fast-imp)
=>
	(set-goal strategy-goal rush)
;	(disable-self); for now
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal boom)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(building-type-count-total town-center >= tc-level-five)))
=>
	(set-goal strategy-goal fast-imp)
	(disable-self)
)
(defrule
	(goal unit-goal militiaman-line)
(or	(strategic-number sn-current-age == fc-transit)
	(research-available ri-long-swordsman))
	(players-unit-type-count focus-player eagle-warrior-line < 5)
=>
	(set-goal unit-goal skirmisher)
	(set-goal control-goal 0)
)
(defrule
	(up-compare-goal unit-goal != archer)
	(goal ranged-unit-type-goal archer)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal ranged-unit-type-goal scorpion)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(random-number < 8)
(or	(up-compare-goal position-goal == pocket)
	(random-number < 4))
=>
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(disable-self)
)
(defrule
(or	(and	(goal unit-goal knight)
		(game-time > 1800))
	(and	(goal unit-goal scorpion)
		(building-type-count town-center >= tc-level-four)))
(or	(dropsite-min-distance stone < 6)
	(building-type-count castle >= 1))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
(or	(goal unit-goal knight)
(or	(goal unit-goal scorpion)
	(goal unit-goal archer)))
	(building-type-count castle >= 1)
(or	(building-type-count castle >= 2)
	(strategic-number sn-current-age >= ci-transit))
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
)
(defrule
	(goal nr-map-goal -1)
	(current-age == dark-age)
	(random-number > 55)
(or	(up-compare-goal position-goal == pocket)
	(random-number > 95))
	(game-time > 13); 15
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal rush)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(up-compare-goal position-goal == flank)
	(goal nr-map-goal -1)
	(building-type-count stone-wall-line < 10)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(goal strategy-goal boom)
=>
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
	(goal unit-goal archer)
(or	(building-type-count-total town-center >= tc-level-four)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(strategic-number sn-current-age >= ci-transit))))
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal scorpion)
	(set-goal ranged-unit-type-goal scorpion)
;	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(goal unit-goal scorpion)
(or	(building-type-count-total town-center >= tc-level-four)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(strategic-number sn-current-age >= ci-transit))))
(or	(dropsite-min-distance stone < 6)
	(building-type-count castle >= 1))
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal ranged-unit-type-goal scorpion); test 0
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number < 40)
(or	(and	(random-number > 20)
		(goal position-goal pocket))
	(goal nr-map-goal 1))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number > 40)
(or	(goal nr-map-goal 1)
	(and	(goal position-goal pocket)
		(random-number > 62)))
	(random-number <= 72)
	(game-time > 13); 15
	(game-time < 60)
=>
	(set-goal unit-goal scorpion)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion); test 0
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(random-number >= 42)
	(random-number < 69)
(or	(goal nr-map-goal 1)
	(and	(goal position-goal pocket)
		(random-number > 57)))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal battle-elephant)
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1);
	(disable-self)
)
(defrule
(or	(strategic-number sn-current-age >= ci-transit)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(building-type-count-total town-center >= tc-level-four))))
(or	(dropsite-min-distance stone < 5)
	(building-type-count castle >= 1))
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal control-goal != my-unique-unit-line)
=>
	(set-goal uu-up-goal 1)
	(set-goal control-goal my-unique-unit-line)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(building-type-count castle >= 2)))
	(building-type-count castle >= 1)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal control-goal == my-unique-unit-line)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
)
(defrule
	(up-compare-goal unit-goal != battle-elephant)
	(up-compare-goal unit-goal != militiaman-line)
	(up-compare-goal control-goal != battle-elephant)
	(up-compare-goal control-goal != militiaman-line)
	(up-compare-goal control-goal != my-unique-unit-line)
(or	(goal unit-goal archer)
(or	(goal unit-goal scorpion)
(or	(goal control-goal knight)
(or	(goal control-goal skirmisher)
(or	(goal control-goal 0)
(or	(up-research-status c: ri-tusk-swords >= research-pending)
	(up-research-status c: ri-elite-battle-elephant >= research-pending)))))))
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal control-goal battle-elephant)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != boom)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 78)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal 0)
	(disable-self)
)
#end-if
#end-if; KHMER END
#load-if-defined KOREAN-CIV
(defrule
	(goal strategy-goal flush)
=>
	(set-goal unit-goal skirmisher)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
(or	(dropsite-min-distance stone < 5)
	(building-type-count castle >= 1))
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(building-type-count-total town-center >= tc-level-three)))
	(up-compare-goal unit-goal != my-unique-unit-line)
=>
	(set-goal control-goal my-unique-unit-line)
;	(chat-to-player my-player-number "Preparing in order to train unique units later on.")
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(random-number > 16)
	(random-number < 68)
	(up-compare-goal position-goal == flank)
	(goal nr-map-goal -1)
=>
	(set-goal unit-goal skirmisher)
	(set-goal strategy-goal flush)
;	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
(or	(random-number >= 92)
	(goal position-goal pocket))
(or	(and	(or	(random-number >= 60)
			(players-civ every-enemy aztec))
		(random-number > 40))
	(building-type-count castle > 0))
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
;	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal nr-map-goal 1)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
;	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(building-type-count castle > 1)
	(goal unit-goal militiaman-line)
	(goal control-goal my-unique-unit-line)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal militiaman-line)
;	(disable-self)
)
(defrule
	(building-type-count castle > 1)
	(up-compare-goal unit-goal != militiaman-line)
	(up-compare-goal unit-goal != my-unique-unit-line)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
;	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if
#load-if-defined MAGYAR-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal nr-map-goal 1)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal rush)
	(disable-self)
)
(defrule
	(goal strategy-goal flush)
	(random-number > 3)
=>
	(set-goal unit-goal scout-cavalry)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(goal strategy-goal flush)
	(random-number > 67)
=>
	(set-goal unit-goal knight)
;	(chat-to-player my-player-number "Switching to knights.")
	(disable-self)
)
(defrule
(or	(strategic-number sn-current-age >= ci-transit)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(building-type-count-total town-center >= tc-level-four))))
(or	(dropsite-min-distance stone < 5)
	(building-type-count castle >= 1))
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal control-goal != my-unique-unit-line)
=>
	(set-goal uu-up-goal 1)
	(set-goal control-goal my-unique-unit-line)
)
(defrule
	(game-time > 13)
	(game-time < 60)
	(random-number >= 72)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal cavalry-archer)
	(set-goal ranged-unit-type-goal cavalry-archer)
	(set-goal control-goal my-unique-unit-line)
	(disable-self)
)
(defrule
(or	(and	(regicide-game)
		(random-number < 72))
	(goal nr-map-goal 1))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal cavalry-archer)
	(set-goal ranged-unit-type-goal cavalry-archer)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(building-type-count castle <= 0)
	(building-type-count stone-wall-line > 15)
(or	(players-civ every-enemy aztec)
	(players-civ every-enemy saracen))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal scout-cavalry)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
(defrule
	(up-research-status c: ri-mercenaries >= research-pending)
	(up-compare-goal unit-goal != my-unique-unit-line)
;	(up-compare-goal control-goal != my-unique-unit-line)
	(gold-amount < 225)
(or	(gold-amount < 20)
(or	(dropsite-min-distance gold >= 6)
	(and	(current-age-time >= 360)
		(strategic-number sn-military-level <= -1))))
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
;	(chat-to-player my-player-number "Switching to unique units.")
)
(defrule
	(up-research-status c: ri-recurve-bow >= research-pending)
	(up-compare-goal unit-goal != cavalry-archer)
	(up-compare-goal control-goal != cavalry-archer)
(or	(up-compare-goal trade-units >= 6)
(or	(gold-amount > 250)
(or	(dropsite-min-distance gold < 6)
	(goal anti-cavalry-threat-goal 1))))
=>
	(set-goal control-goal cavalry-archer)
	(set-goal ranged-unit-type-goal cavalry-archer)
;	(chat-to-player my-player-number "Adding cavalry archers.")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(set-goal ranged-unit-type-goal cavalry-archer)
	(set-goal unit-goal cavalry-archer)
	(chat-to-allies-using-id 22156)
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(building-type-count stone-wall-line > 15)
	(up-compare-goal unit-goal != scout-cavalry)
	(game-time > 25)
=>
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 60)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal scout-cavalry)
	(set-goal control-goal 0)
	(disable-self)
)
#end-if
#end-if
#load-if-defined MALAY-CIV
(defrule
(or	(random-number >= 100)
	(and	(goal position-goal pocket)
		(random-number >= 99)))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(random-number >= 79)
(or	(goal nr-map-goal 1)
(or	(and	(goal position-goal pocket)
		(random-number < 82))
	(regicide-game)))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
(or	(random-number < 1)
	(and	(goal position-goal pocket)
		(random-number < 6)))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal ffa-game-goal -1)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
	(random-number >= 11)
	(random-number <= 66)
	(goal position-goal pocket)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal ffa-game-goal -1)
	(building-type-count-total castle <= 0)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(disable-self)
)
(defrule
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal control-goal != my-unique-unit-line)
	(up-compare-goal unit-goal != militiaman-line)
	(up-compare-goal control-goal != militiaman-line)
	(up-research-status c: ri-forced-levy >= research-pending)
=>
	(set-goal unit-goal militiaman-line)
)
(defrule
	(up-research-status c: my-unique-unit-upgrade >= research-pending)
;	(up-compare-goal unit-goal != my-unique-unit-line)
;	(up-compare-goal control-goal != my-unique-unit-line)
	(building-type-count castle > 2)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0);
)
(defrule
(or	(goal position-goal pocket)
	(strategic-number sn-current-age >= ci-transit))
(nand	(up-compare-goal strategy-goal >= boom)
	(and	(up-compare-goal anti-cavalry-threat-goal <= 0)
		(or	(goal unit-goal knight)
			(goal unit-goal battle-elephant))))
(or 	(and	(players-building-type-count focus-player castle > 0)
		(up-compare-goal strategy-goal <= rush))
(or	(players-unit-type-count focus-player jaguar-man-line > 0)
(or	(players-unit-type-count focus-player samurai-line > 0)
(or	(players-unit-type-count focus-player teutonic-knight-line > 0)
	(players-unit-type-count focus-player cataphract-line > 0)))))
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal archer)
)
(defrule
	(up-compare-goal control-goal != my-unique-unit-line)
	(up-compare-goal unit-goal != militiaman-line)
	(up-compare-goal control-goal != militiaman-line)
	(up-research-status c: ri-forced-levy >= research-pending)
(or	(building-type-count castle <= 2)
	(gold-amount < 250))
=>
	(set-goal control-goal militiaman-line)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal unit-goal != militiaman-line)
	(up-compare-goal control-goal != militiaman-line)
(or	(dropsite-min-distance stone < 6)
	(building-type-count castle >= 1))
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(building-type-count-total town-center >= tc-level-three)))
(or	(and	(current-age >= imperial-age)
		(goal unit-goal skirmisher))
	(and	(strategic-number sn-current-age >= ci-transit)
		(nor	(or	(players-civ focus-player briton)
				(players-civ focus-player hun))
			(or	(players-civ focus-player mongol)
				(players-civ focus-player mayan)))))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
	(up-research-status c: ri-forced-levy >= research-pending)
	(up-compare-goal unit-goal == my-unique-unit-line)
;	(up-compare-goal control-goal != militiaman-line)
	(gold-amount < 225)
(or	(gold-amount < 20)
(or	(dropsite-min-distance gold >= 6)
(or	(building-type-count castle < 2)
	(and	(current-age-time >= 360)
		(strategic-number sn-military-level <= -1)))))
=>
	(set-goal unit-goal militiaman-line)
	(set-goal control-goal my-unique-unit-line); 0
	(set-goal uu-up-goal 1)
)
(defrule
(or	(goal unit-goal knight)
	(and	(current-age >= imperial-age)
		(goal unit-goal skirmisher)))
(or	(up-research-status c: ri-long-swordsman >= research-pending)
	(strategic-number sn-current-age >= ci-transit))
=>
	(set-goal unit-goal militiaman-line)
	(set-goal control-goal 0)
)
(defrule; test
	(strategic-number sn-current-age < ci-transit)
	(population < max-civ-pop)
	(up-compare-goal custom-civ-pop < max-civ)
	(current-age <= castle-age)
	(up-compare-goal anti-cavalry-threat-goal <= 0)
(or	(and	(up-compare-goal unit-goal == my-unique-unit-line)
		(building-type-count-total castle <= 0))
	(up-compare-goal unit-goal == militiaman-line))
=>
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
	(set-goal ranged-unit-type-goal 0)
	(chat-to-allies-using-id 22155)
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal position-goal == flank)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal flush)
	(set-goal unit-goal militiaman-line)
	(set-goal ranged-unit-type-goal archer)
	(chat-to-allies-using-id 22155)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number > 93)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal militiaman-line)
;	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 92)
	(random-number > 63)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 59)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal skirmisher)
;	(set-goal control-goal 0)
	(disable-self)
)
#end-if
#end-if; END MALAY
#load-if-defined MALIAN-CIV
(defrule
	(up-compare-goal control-goal != militiaman-line)
	(up-compare-goal control-goal != my-unique-unit-line)
(or	(or	(players-unit-type-count focus-player eagle-warrior-line > 10)
		(strategic-number sn-current-age >= ci-transit))
	(and	(and	(food-amount > 500)
			(gold-amount < 100))
		(goal unit-goal knight)))
=>
	(set-goal control-goal militiaman-line)
)
(defrule
	(up-compare-goal unit-goal != militiaman-line)
(or	(goal unit-goal knight)
	(up-compare-goal unit-goal != my-unique-unit-line))
	(up-research-status c: ri-long-swordsman >= research-pending)
=>
	(set-goal unit-goal militiaman-line)
	(set-goal control-goal 0)
)
(defrule
(or	(dropsite-min-distance stone < 6)
	(building-type-count castle > 0))
	(random-number < 29)
	(building-type-count-total town-center >= tc-level-three)
(nor	(goal unit-goal my-unique-unit-line)
(or	(goal unit-goal militiaman-line)
(or	(goal control-goal shot)
	(goal control-goal aggressive-rush))))
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
;	(chat-to-player my-player-number "Preparing in order to train unique units later on.")
	(disable-self)
)
(defrule
	(up-compare-goal unit-goal != my-unique-unit-line)
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age >= ci-transit)
	(up-compare-goal unit-goal != militiaman-line)
	(up-research-status c: ri-long-swordsman < research-pending)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
)
(defrule
(or	(random-number >= 91)
(or	(and	(goal position-goal pocket)
		(random-number >= 75))
(or	(goal nr-map-goal 1)
	(building-type-count castle > 0))))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
;	(set-goal ranged-unit-type-goal 0)
	(chat-to-allies-using-id 22155)
)
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal position-goal == flank); hm
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal flush)
	(set-goal unit-goal militiaman-line)
	(set-goal ranged-unit-type-goal archer)
	(chat-to-allies-using-id 22155)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if ; end mali
#load-if-defined MAYAN-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(goal unit-goal eagle-warrior)
(or	(players-civ focus-player gothic)
	(players-civ focus-player japanese))
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
	(goal nr-map-goal -1)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(disable-self)
)
(defrule
	(random-number >= 47)
	(game-time < 60)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal ffa-game-goal -1)
	(building-type-count-total castle == 0)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(random-number < 59)
	(up-compare-goal position-goal == flank); hm
	(goal nr-map-goal -1)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal nr-map-goal 1)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
(or	(and	(or	(up-research-status c: ri-heresy >= research-pending)
			(strategic-number sn-current-age >= ci-transit))
		(or	(goal strategy-goal boom)
			(goal strategy-goal fast-imp)))
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands))
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(dropsite-min-distance stone < 5)
(or	(building-type-count-total town-center >= tc-level-three)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
(nor	(goal unit-goal my-unique-unit-line)
(or	(goal control-goal my-unique-unit-line)
(or	(goal control-goal shot)
	(goal control-goal aggressive-rush))))
(or	(not	(goal unit-goal eagle-warrior))
	(strategic-number sn-current-age >= ci-transit))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
;	(chat-to-player my-player-number "Preparing in order to train unique units later on.")
)
(defrule
(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
(or	(building-type-count castle >= 2)
	(regicide-game)))
	(building-type-count castle >= 1)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
;	(chat-to-player my-player-number "Switching to unique units.")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
(or	(map-type baltic)
	(map-type rivers))
	(current-age < castle-age)
	(goal unit-goal eagle-warrior)
	(players-unit-type-count any-enemy galley-line > 0)
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-islands)
	(set-goal strategy-goal rush)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(map-type baltic)
	(map-type rivers))
	(goal unit-goal eagle-warrior)
(or	(goal enemy-boats-goal 0)
(or	(up-compare-goal navy-count g:>= max-navy)
	(up-compare-goal navy-count >= 40)))
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed)
	(set-goal strategy-goal rush)
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(current-age < castle-age)
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total castle <= 0)
=>
	(set-goal unit-goal eagle-warrior)
)
(defrule
	(up-compare-goal unit-goal != eagle-warrior)
	(up-compare-goal control-goal != eagle-warrior)
	(gold-amount >= 300)
(or	(up-research-status c: ri-elite-eagle-warrior >= research-pending)
(or	(up-research-status c: my-unique-research >= research-pending)
	(and	(gold-amount >= 800)
		(up-compare-goal trade-units >= 33))))
=>
	(set-goal control-goal eagle-warrior)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if; Mayan
#load-if-defined MONGOL-CIV
(defrule
	(current-age == dark-age)
	(game-time > 30)
	(goal strategy-goal flush)
	(random-number >= 39)
=>
	(set-goal unit-goal default-flush-unit)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(game-time > 30)
	(goal strategy-goal flush)
	(random-number < 35)
=>
	(set-goal unit-goal skirmisher)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal flush)
=>
	(set-goal unit-goal knight)
;	(chat-to-player my-player-number "Switching to knights.")
	(disable-self)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(unit-type-count-total archer-line >= 12)
=>
	(set-goal ranged-unit-type-goal archer)
	(disable-self)
)

(defrule
(nor	(players-civ any-enemy turkish)
	(players-civ any-enemy saracen))
	(goal unit-goal knight)
	(goal control-goal my-unique-unit-line)
(or	(players-unit-type-count focus-player spearman-line > 20)
	(players-unit-type-count focus-player camel-line > 12))
(or	(unit-type-count villager > fourty-percent-pop)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
	(building-type-count castle > 0)
=>
	(set-goal unit-goal militiaman-line)
	(disable-self)
)
(defrule
	(up-compare-goal unit-goal != militiaman-line)
	(goal control-goal my-unique-unit-line)
(or	(up-compare-goal anti-cavalry-threat-goal >= 1)
	(goal enemy-goal eagle-warrior))
(or	(unit-type-count villager > fifty-percent-pop)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
	(building-type-count castle > 0)
=>
	(set-goal unit-goal militiaman-line)
	(disable-self)
)
(defrule
	(building-type-count castle >= 3)
(or	(goal unit-goal militiaman-line)
	(goal control-goal militiaman-line))
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal militiaman-line)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age == dark)
	(unit-type-count villager > 27)
	(goal strategy-goal flush)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(goal nr-map-goal 1)
(or	(and	(goal position-goal pocket)
		(random-number >= 71))
	(random-number >= 93)))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal nr-map-goal 1)
	(random-number < 23)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(up-compare-goal unit-goal != my-unique-unit-line);	(goal unit-goal knight)
	(up-compare-goal control-goal != shot)
	(up-compare-goal control-goal != my-unique-unit-line)
(or	(and	(building-type-count-total archery-range > 0)
		(building-type-count-total town-center >= tc-level-three))
(or	(unit-type-count villager > fourty-percent-pop)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop))))
(or	(dropsite-min-distance stone < 5)
	(building-type-count castle >= 1))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
;	(chat-to-player my-player-number "Switching to unique units.")
)
(defrule
(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
(or	(and	(up-compare-goal unit-goal != militiaman-line)
		(building-type-count castle >= 2))
	(building-type-count castle >= 3)))
	(up-compare-goal unit-goal != my-unique-unit-line)
	(building-type-count castle >= 1)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
;	(chat-to-player my-player-number "Switching to unique units."); test
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal cavalry-archer)
	(set-goal unit-goal cavalry-archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 88)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal 0)
	(disable-self)
)
#end-if
#end-if; mongol
#load-if-defined PERSIAN-CIV
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal flush)
=>
	(set-goal unit-goal knight)
;	(chat-to-player my-player-number "Switching to knights.")
	(disable-self)
)
(defrule
	(random-number >= 50)
	(random-number < 76)
	(game-time < 60)
	(up-compare-goal position-goal == flank); hm
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
=>
	(set-goal unit-goal scout-cavalry)
	(set-goal strategy-goal flush)
	(disable-self)
)
(defrule
	(current-age == dark-age)
(or	(goal nr-map-goal 1)
(or	(and	(random-number > 55)
		(goal position-goal pocket))
	(building-type-count stone-wall-line > 15)))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal boom)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
(or	(goal position-goal pocket)
	(goal nr-map-goal 1))
	(random-number < 52)
	(random-number >= 28)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal scorpion)
	(set-goal strategy-goal boom)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(goal unit-goal scorpion)
(or	(population >= max-civ-pop)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(building-type-count town-center >= tc-level-four)
	(strategic-number sn-current-age >= ci-transit))))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal scorpion)
)
(defrule
(or	(and	(goal unit-goal scorpion)
		(goal control-goal my-unique-unit-line))
	(goal unit-goal skirmisher))
	(building-type-count-total castle >= 2)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal scorpion)
)
(defrule
(or	(random-number > 94)
	(and	(goal position-goal pocket)
		(random-number < 26)))
	(game-time > 13)
	(game-time < 60)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if ; persian
#load-if-defined PORTUGUESE-CIV
(defrule
	(game-time < 60)
	(game-time > 16)
(or	(goal nr-map-goal 1)
	(and	(or	(random-number >= 18)
			(goal position-goal pocket))
		(random-number < 21)))
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(goal nr-map-goal -1)
	(random-number >= 34)
(or	(up-compare-goal position-goal == pocket)
	(random-number < 38))
	(random-number < 62)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
(not	(goal meso-enemy-goal 1)); not scouted yet though
(not	(players-civ any-enemy teutonic))
	(random-number < 5)
	(game-time > 20)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
(or	(building-type-count-total town-center >= tc-level-three)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal unit-goal != gunpowder-class)
	(up-compare-goal control-goal != my-unique-unit-line)
	(up-compare-goal control-goal != gunpowder-class)
(or	(strategic-number sn-infantry-threat >= 2); 3
(or	(players-unit-type-count focus-player huskarl-line >= 8)
(or	(players-unit-type-count focus-player b-husk-line >= 8)
	(players-civ every-enemy gothic))))
(or	(building-type-count castle >= 1)
	(dropsite-min-distance stone < 6))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
(or	(goal control-goal my-unique-unit-line)
	(building-type-count castle >= 2)));	(strategic-number sn-current-age >= ci-transit)))
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal unit-goal != gunpowder-class)
	(building-type-count castle >= 1)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
	(goal nr-map-goal -1)
	(random-number < 18)
	(up-compare-goal position-goal == flank)
	(up-compare-goal control-goal != shot)
	(game-time > 13)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 95)
	(random-number > 25)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
;	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if ; portuguese
#load-if-defined SARACEN-CIV
(defrule
	(current-age == dark-age)
	(random-number < 11)
	(goal position-goal pocket)
(nor	(goal meso-enemy-goal 1); not scouted yet though
	(players-civ any-enemy teutonic))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(random-number <= 40)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(up-compare-goal position-goal == flank); hm
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal scout-cavalry)
	(set-goal strategy-goal flush)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
(defrule
	(current-age == dark-age)
	(random-number > 46)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(up-compare-goal position-goal == flank); hm
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal archer)
	(set-goal strategy-goal flush)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
(defrule
	(goal position-goal pocket)
	(random-number <= 55)
(or	(strategic-number sn-current-age == fc-transit)
	(and	(game-time > 13)
		(game-time < 60)))
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal knight)
	(set-goal ranged-unit-type-goal archer); hmm
)
(defrule
	(goal position-goal pocket)
(or	(and	(goal strategy-goal rush)
		(goal unit-goal archer))
	(goal strategy-goal flush))
	(game-time > 60)
	(game-time < 75)
=>
	(set-goal strategy-goal boom)
	(set-goal ranged-unit-type-goal archer)
)
(defrule
	(current-age == dark-age)
(nor	(goal meso-enemy-goal 1); not scouted yet though
	(players-civ any-enemy teutonic))
(or	(or	(random-number > 72)
		(building-type-count stone-wall-line > 15))
	(and	(goal nr-map-goal 1)
		(random-number < 18)))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal monk)
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
(or	(and	(goal unit-goal knight)
		(or	(strategic-number sn-current-age >= ci-transit)
			(or	(population >= max-civ-pop)
				(up-compare-goal custom-civ-pop >= max-civ))))
	(and	(goal strategy-goal flush)
		(and	(strategic-number sn-current-age == feudal)
			(players-unit-type-count focus-player spearman-line > 6))))
=>
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(set-goal control-goal aggressive-rush); also stop slinging here, without even cavalier upgrade it is pretty pointless
)
(defrule
(or	(and	(strategic-number sn-archer-threat <= 0)
		(and	(gold-amount >= 800)
			(up-compare-goal trade-units >= 33)))
(or	(goal unit-goal knight)
	(goal control-goal shot)))
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total castle >= 1)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1);
	(set-goal ranged-unit-type-goal archer)
)
(defrule
(or	(and	(goal nr-map-goal 1)
		(building-type-count stone-wall-line < 15))
	(and	(and	(random-number >= 55)
			(regicide-game))
		(goal unit-goal monk)))
	(game-time > 15)
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal monk)
	(set-goal control-goal 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal strategy-goal boom)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#end-if
#load-if-defined SLAVIC-CIV
(defrule
(or	(and	(goal unit-goal knight)
		(game-time > 1800))
	(and	(goal unit-goal scorpion)
		(or	(building-type-count-total town-center >= tc-level-four)
			(or	(up-compare-goal custom-civ-pop >= max-civ)
				(population >= max-civ-pop)))))
(or	(building-type-count castle >= 1)
	(dropsite-min-distance stone < 6))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
(or	(goal unit-goal knight)
	(goal unit-goal scorpion))
	(building-type-count castle > 0)
(or	(building-type-count castle > 1)
	(goal unit-goal knight))
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
)
(defrule
	(food-amount > 150)
(or	(gold-amount < 50)
	(food-amount > 300))
(or	(goal unit-goal monk)
	(goal strategy-goal flush))
(or	(players-unit-type-count focus-player eagle-warrior-line > 7)
	(goal enemy-goal eagle-warrior))
=>
	(set-goal unit-goal militiaman-line)
;	(chat-to-player my-player-number "Training long-swordsmen to counter an EW rush.")
	(disable-self)
)
(defrule
	(strategic-number sn-current-age == dark)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number > 70)
(or	(goal nr-map-goal 1)
	(random-number > 93))
	(game-time < 60)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(goal nr-map-goal 1)
	(goal position-goal pocket))
	(random-number < 75)
	(random-number > 55)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal scorpion)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(not	(goal meso-enemy-goal 1)); not scouted yet though
(not	(players-civ any-enemy teutonic))
	(random-number < 12)
	(game-time < 60)
	(game-time > 13)
=>
	(set-goal unit-goal monk)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(set-goal strategy-goal rush)
	(disable-self)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 55)
	(random-number > 15)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal skirmisher)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 70)
	(random-number > 55)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
;	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
(not	(goal meso-enemy-goal 1)); not scouted yet though
(not	(players-civ any-enemy teutonic))
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(set-goal unit-goal monk)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal unit-goal scorpion)
	(chat-to-allies-using-id 22156)
)
#end-if; slavic-civ
#load-if-defined SPANISH-CIV
(defrule
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal control-goal != my-unique-unit-line)
	(up-compare-goal control-goal != knight)
(or	(goal anti-cavalry-threat-goal 1)
	(players-civ focus-player gothic))
(or	(building-type-count-total town-center >= tc-level-three)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
(or	(dropsite-min-distance stone < 5)
	(building-type-count castle >= 1))
;(nand	(strategic-number sn-current-age == castle)
;	(goal strategy-goal boom))
=>
	(set-goal control-goal my-unique-unit-line)
;	(chat-to-player my-player-number "Enable training of unique units.")
)
(defrule
	(goal control-goal my-unique-unit-line)
	(goal anti-cavalry-threat-goal 1)
	(building-type-count castle >= 2)
(nand	(and	(up-research-status c: ri-paladin >= research-pending)
		(goal unit-goal knight))
	(research-available my-unique-unit-upgrade))
=>
	(set-goal unit-goal my-unique-unit-line)
;	(chat-to-player my-player-number "Switching to unique units.")
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-current-age <= feudal)
(or	(players-unit-type-count focus-player spearman-line > 6)
(or	(players-civ focus-player mayan)
(or	(players-civ focus-player vietnamese)
	(players-civ focus-player briton))))
=>
	(set-goal unit-goal skirmisher)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(goal nr-map-goal 1)
	(and	(random-number < 19)
		(goal position-goal pocket)))
	(game-time > 13)
	(game-time < 60)
	(up-compare-goal unit-goal != my-unique-unit-line)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal strategy-goal boom)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
(or	(building-type-count stone-wall-line > 15)
(or	(building-type-count castle >= 1)
(or	(and	(random-number >= 75)
		(or	(random-number >= 95)
			(goal position-goal pocket)))			
	(and	(goal nr-map-goal 1)
		(random-number >= 55)))))
	(game-time > 15)
	(game-time < 60)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
=>
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(nor	(goal meso-enemy-goal 1); not scouted yet though
	(players-civ any-enemy teutonic))
	(goal nr-map-goal -1)
	(random-number >= 25)
	(random-number < 33)
	(game-time > 13)
	(game-time < 60)
	(not (players-civ any-ally aztec))
=>
	(set-goal unit-goal monk)
	(set-goal control-goal 0)
	(set-goal strategy-goal rush)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != boom)
	(taunt-detected any-ally 33)
=>
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22156)
	(acknowledge-taunt this-any-ally 33)
)
#end-if; spanish
#load-if-defined TEUTONIC-CIV
(defrule
	(goal unit-goal knight)
	(goal control-goal 0)
	(building-type-count castle > 0)
	(strategic-number sn-archer-threat < 3)
	(goal anti-cavalry-threat-goal 1)
	(up-research-status c: ri-heavy-scorpion < research-pending)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal unit-goal knight)
	(goal control-goal 0)
	(building-type-count castle > 0)
(or	(players-unit-type-count target-player spearman-line > 35)
	(players-unit-type-count target-player camel-line > 24))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(goal unit-goal knight)
	(goal control-goal my-unique-unit-line)
(or	(goal anti-cavalry-threat-goal 1)
	(strategic-number sn-infantry-threat >= 1))
(nor	(players-civ every-enemy hun); dont switch to TK vs ca civs
	(strategic-number sn-archer-threat > 1))
	(building-type-count castle > 1)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal flush)
=>
	(set-goal unit-goal knight)
	(disable-self)
)
(defrule
(not	(goal meso-enemy-goal 1)); not scouted yet though
(not	(players-civ any-enemy teutonic))
(or	(building-type-count stone-wall-line > 15)
	(random-number < 5))
	(game-time > 13)
	(game-time < 60)
	(random-number <= 18)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(random-number >= 70)
	(goal position-goal pocket)
	(game-time > 13)
	(population-cap >= 175)
=>
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 0)
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal position-goal pocket)
(or	(and	(random-number >= 80)
		(nor	(players-civ focus-player briton)
			(players-civ focus-player mayan)))
	(and	(building-type-count castle >= 2)
		(goal unit-goal monk)))
=>
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal nr-map-goal 1)
	(not (goal ranged-unit-type-goal monk))
	(game-time > 25)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22156)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(up-research-status c: ri-paladin >= research-pending)
	(goal anti-cavalry-threat-goal 1)
(or	(strategic-number sn-archer-threat >= 3)
	(strategic-number sn-cavalry-threat < 3))
	(up-compare-goal ranged-unit-type-goal != scorpion)
	(up-compare-goal ranged-unit-type-goal != monk)
	(up-compare-goal trade-units > 4)
=>
	(set-goal ranged-unit-type-goal scorpion)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 65)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal skirmisher)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number > 90)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
;	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
#end-if;teutonic / teutons
#load-if-defined TURKISH-CIV
(defrule
	(goal nr-map-goal -1)
	(up-compare-goal position-goal == flank); hm
	(random-number < 33)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal scout-cavalry)
	(disable-self)
)
(defrule
	(goal nr-map-goal -1)
	(up-compare-goal position-goal == flank); hm
	(random-number > 35)
	(random-number < 55)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(disable-self)
)
(defrule
(or	(building-type-count stone-wall-line > 15)
(or	(building-type-count castle >= 1)
(or	(and	(random-number >= 75)
		(or	(random-number >= 98)
			(goal position-goal pocket)))			
	(and	(goal nr-map-goal 1)
		(random-number >= 55)))))
	(game-time > 15)
	(game-time < 60)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
=>
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
(or	(and	(or	(goal ffa-game-goal 1)
			(and	(random-number >= 58)
				(goal nr-map-goal 1)))
		(goal strategy-goal flush))
	(regicide-game))
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(set-goal ranged-unit-type-goal 0)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(building-type-count castle >= 1)
(or	(game-time < 60)
(or	(building-type-count castle >= 2)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop))))
	(up-compare-goal unit-goal != my-unique-unit-line)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-current-age == feudal)
	(players-unit-type-count focus-player spearman-line > 6)
=>
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal flush)
	(goal unit-goal default-ranged)
=>
	(set-goal unit-goal knight)
	(set-goal ranged-unit-type-goal archer)
)
(defrule
	(goal unit-goal knight)
	(goal control-goal militiaman-line)
	(players-unit-type-count focus-player spearman-line > 30)
	(strategic-number sn-archer-threat < 2)
	(up-research-status c: ri-champion >= research-pending)
	(building-type-count-total barracks >= 3)
=>
	(set-goal unit-goal militiaman-line)
;	(chat-to-player my-player-number "Switching to militiaman-line.")
)
(defrule
	(current-age == dark-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count stone-wall-line > 15)
	(game-time > 13)
	(game-time < 60)
	(random-number < 55)
=>
	(set-goal strategy-goal fast-imp)
	(set-goal unit-goal gunpowder-class)
	(set-goal ranged-unit-type-goal gunpowder-class)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(up-compare-goal strategy-goal != rush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal unit-goal knight)
	(chat-to-allies-using-id 22156)
)
#end-if
#load-if-defined VIETNAMESE-CIV
(defrule
	(random-number >= 59)
	(random-number < 69)
(or	(goal nr-map-goal 1)
	(and	(goal position-goal pocket)
		(random-number > 64)))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal battle-elephant)
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1);
	(disable-self)
)
(defrule
	(goal nr-map-goal 1)
	(random-number > 56)
	(random-number < 72)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal nr-map-goal -1)
	(building-type-count-total castle <= 0)
	(random-number < 62)
	(up-compare-goal position-goal == pocket)
	(game-time > 13)
	(game-time < 60)
=>
	(set-goal unit-goal knight)
	(set-goal strategy-goal rush)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(goal nr-map-goal -1)
	(building-type-count-total castle == 0)
	(random-number > 71)
(or	(random-number > 96)
	(up-compare-goal position-goal == pocket))
	(game-time < 60)
=>
	(set-goal unit-goal archer)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(disable-self)
)
(defrule
	(building-type-count castle >= 1)
(or	(game-time < 60)
(or	(building-type-count castle >= 2)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop))))
	(up-compare-goal unit-goal != my-unique-unit-line)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(up-compare-goal unit-goal != battle-elephant)
	(up-compare-goal unit-goal != militiaman-line)
	(up-compare-goal control-goal != battle-elephant)
	(up-compare-goal control-goal != militiaman-line)
	(up-compare-goal control-goal != my-unique-unit-line)
(or	(goal unit-goal archer)
(or	(goal unit-goal my-unique-unit-line)
(or	(goal unit-goal scorpion)
(or	(goal control-goal knight)
(or	(goal control-goal skirmisher)
(or	(up-research-status c: ri-chatras >= research-pending)
	(up-research-status c: ri-elite-battle-elephant >= research-pending)))))))
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal control-goal battle-elephant)
)
(defrule
(nor	(goal unit-goal knight)
(or	(goal unit-goal battle-elephant)
	(goal unit-goal my-unique-unit-line)))
(or	(and	(goal strategy-goal flush)
		(strategic-number sn-current-age == fc-transit))
	(and	(goal unit-goal archer)
		(goal forward-threat-goal 1)))
=>
	(set-goal unit-goal knight)
;	(chat-to-player my-player-number "Switching to knights.")
)
(defrule
(or	(building-type-count castle >= 1)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant)))
(or	(up-compare-goal control-goal != shot)
	(strategic-number sn-current-age >= ci-transit))
	(up-compare-goal control-goal != my-unique-unit-line)
(or	(building-type-count-total town-center >= tc-level-three)
(or	(unit-type-count villager > fourty-percent-pop)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop))))
(or	(dropsite-min-distance stone < 5)
	(building-type-count castle >= 1))
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
;	(chat-to-player my-player-number "Switching to unique units.")
)
(defrule
(or	(building-type-count castle >= 2)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant)))
	(goal control-goal my-unique-unit-line)
(or	(goal anti-cavalry-threat-goal 1)
	(building-type-count castle >= 2))
	(building-type-count castle >= 1)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
	(set-goal control-goal 0)
;	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(up-compare-goal strategy-goal != flush)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal 0)
	(set-goal strategy-goal boom)
	(set-goal uu-up-goal 1)
	(set-goal unit-goal my-unique-unit-line)
	(chat-to-allies-using-id 22156)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 89)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(disable-self)
)
#end-if
#end-if ; VIET END
#load-if-defined VIKING-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
(or	(random-number > 35)
	(goal position-goal pocket))
	(random-number > 25)
	(random-number < 40)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal archer)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed); bug fix in maps that were previously falsely detected as water maps
	(goal position-goal pocket)
	(goal strategy-goal flush)
=>
	(set-goal strategy-goal boom)
	(set-goal unit-goal archer)
	(disable-self)
)
(defrule
	(up-compare-goal unit-goal != knight)
	(goal strategy-goal flush)
	(strategic-number sn-current-age == fc-transit)
	(military-population < 15)
=>
	(set-goal unit-goal knight)
	(set-goal control-goal militiaman-line)
;	(chat-to-player my-player-number "Switching to knights.")
)
(defrule
(or	(goal control-goal 0)
	(and	(goal unit-goal militiaman-line)
		(goal control-goal militiaman-line)))
(or	(building-type-count castle >= 2)
(or	(up-research-status c: ri-chieftains >= research-pending)
(or	(goal strategy-goal boom)
	(goal position-goal pocket))))
(or	(up-compare-goal custom-civ-pop >= 90)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
	(strategic-number sn-cavalry-threat >= 2)
=>
	(set-goal control-goal my-unique-unit-line)
	(set-goal uu-up-goal 1)
)
(defrule
;	(up-compare-goal unit-goal != militiaman-line)
	(goal control-goal 0)
(or	(and	(up-compare-goal custom-civ-pop > 90)
		(or	(strategic-number sn-current-age >= ci-transit)
			(and	(food-amount > 400)
				(gold-amount < 200))))
	(or	(goal anti-cavalry-threat-goal 1)
		(goal enemy-goal eagle-warrior)))
	(up-compare-goal strategy-goal != boom)
=>
	(set-goal control-goal militiaman-line)
)
(defrule
;	(up-compare-goal unit-goal != militiaman-line)
	(goal control-goal 0)
(or	(or	(goal enemy-goal eagle-warrior)
		(and	(players-unit-type-count focus-player huskarl-line > 4)
			(up-compare-goal custom-civ-pop > 60)))
	(and	(up-research-status c: ri-arbalest >= research-pending)
		(up-research-status c: ri-ring-archer-armor >= research-pending)))
	(goal strategy-goal boom)
=>
	(set-goal control-goal militiaman-line)
)
(defrule
	(up-compare-goal unit-goal != militiaman-line)
(or	(up-compare-goal custom-civ-pop >= 60)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
	(up-research-status c: ri-long-swordsman >= research-pending)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal militiaman-line)
;	(chat-to-player my-player-number "Switching to militiaman-line.")
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal default-unit)
	(current-age < castle-age)
=>
	(set-goal unit-goal knight)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(goal nr-map-goal 1)
	(and	(random-number < 20)
		(goal position-goal pocket)))
=>
	(set-goal unit-goal archer)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(game-time > 25)
	(game-time < 60)
	(building-type-count castle > 0)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal archer)
	(set-goal strategy-goal boom)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 32)
=>
	(acknowledge-taunt this-any-ally 32)
	(set-goal strategy-goal rush)
	(set-goal control-goal aggressive-rush)
	(set-goal ranged-unit-type-goal archer)
	(set-goal unit-goal archer)
	(chat-to-allies-using-id 22155)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(game-time > 30)
	(game-time < 300)
	(taunt-detected any-ally 33)
=>
	(acknowledge-taunt this-any-ally 33)
	(set-goal strategy-goal boom)
	(set-goal control-goal 0)
	(set-goal unit-goal archer)
	(set-goal ranged-unit-type-goal archer)
	(chat-to-allies-using-id 22156)
)
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == dark)
;	(goal strategy-goal rush)
	(goal nr-map-goal -1)
	(unit-type-count-total villager < 26)
(or	(food-amount >= 369); 420
	(and	(game-time < 180)
		(players-building-count any-enemy >= 1)))
	(random-number < 66)
	(up-compare-goal control-goal != shot)
	(up-compare-goal position-goal == flank)
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal default-flush-unit)
	(set-goal control-goal 0)
	(disable-self)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(current-age < castle-age)
	(random-number >= 22)
	(up-compare-goal position-goal == flank)
	(not (goal strategy-goal flush))
=>
	(set-goal strategy-goal flush)
	(set-goal unit-goal militiaman-line)
)
#end-if
#end-if; viking-civ

#load-if-not-defined UP-POCKET-POSITION
#load-if-not-defined BRITON-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined KOREAN-CIV
(defrule
	(goal unit-goal my-unique-unit-line)
	(goal train-civ-goal 1)
	(strategic-number sn-resource-control == 0)
	(unit-type-count-total my-unique-unit-line < 3)
	(building-type-count castle > 0)
	(building-type-count stone-wall-line < 15)
	(current-age-time < 300)
	(current-age == castle-age)
	(food-amount < unique-unit-food); <-
=>
	(set-goal train-civ-goal -1)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

#end-if ; NOT DM
#load-if-defined DEATH-MATCH
#load-if-defined KOREAN-CIV
(defrule
	(starting-age < imperial-age)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal militiaman-line)
	(set-goal uu-up-goal 1)
	(disable-self)
)
#end-if
(defrule
(or	(civ-selected turkish)
(or	(civ-selected portuguese)
(or	(civ-selected italian)
(or	(civ-selected indian)
	(and	(civ-selected khmer)
		(up-compare-goal anti-cavalry-threat-goal >= 1))))))
	(strategic-number sn-infantry-threat > 1)
	(research-completed ri-chemistry)
=>
	(set-goal ranged-unit-type-goal gunpowder-class)
	(disable-self)
)
#end-if
#load-if-not-defined BERBERS-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined CELTIC-CIV
#load-if-not-defined ETHIOPIAN-CIV
#load-if-not-defined FRANKISH-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined INDIAN-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined MAGYAR-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined PERSIAN-CIV
#load-if-not-defined VIKING-CIV
(defrule
(or	(taunt-detected any-computer 230)
	(taunt-detected any-human 230))
	(current-age <= castle-age); dark
;	(game-time > 30)
	(game-time < 300)
=>
	(set-goal strategy-goal rush)
	(set-goal unit-goal monk)
	(set-goal ranged-unit-type-goal monk)
	(chat-to-player this-any-computer "30Going for a mush.")
	(chat-to-player this-any-human "30Going for a mush.")
	(acknowledge-taunt this-any-computer 230)
	(acknowledge-taunt this-any-human 230))
#load-if-not-defined AZTEC-CIV
(defrule
	(goal strategy-goal flush)
	(goal ranged-unit-type-goal monk)
=>
	(set-goal ranged-unit-type-goal default-ranged))
(defrule
	(goal unit-goal monk)
	(strategic-number sn-archer-threat >= 2)
(or	(and	(building-type-count-total monastery < 3)
		(game-time < 1380))
	(or	(or	(civ-selected japanese)
			(civ-selected chinese))
		(or	(or	(civ-selected slavic)
				(civ-selected teutonic))
			(or	(civ-selected celtic)
				(civ-selected khmer)))))
=>
	(set-goal unit-goal scorpion)
	(set-goal ranged-unit-type-goal monk))
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(goal unit-goal militiaman-line)
(or	(strategic-number sn-archer-threat > 1)
	(and	(players-building-type-count focus-player archery-range > 1)
		(goal enemy-goal skirmisher)))
	(strategic-number sn-infantry-threat == 0)
=>
	(set-goal unit-goal skirmisher)
;	(chat-to-player my-player-number "Switching to skirmishers.")
)
#load-if-not-defined AZTEC-CIV
#load-if-not-defined VIKING-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(goal strategy-goal fast-imp)
	(up-compare-goal unit-goal != gunpowder-class)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal strategy-goal rush))
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(current-age < castle-age)
	(goal unit-goal my-unique-unit-line); change it or it will bug as no extra stone will be gathered during castle age advance
	(building-type-count-total castle == 0)
=>
	(set-goal unit-goal militiaman-line))
#end-if
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined INDIAN-CIV
(defrule
	(goal strategy-goal rush)
(or	(goal unit-goal skirmisher)
	(goal unit-goal mix))
	(not (goal control-goal my-unique-unit-line))
	(research-available imperial-age)
(or	(dropsite-min-distance stone < 6)
	(building-type-count castle >= 1))
=>
	(set-goal unit-goal default-unit)
;	(chat-to-player my-player-number "Switching to my default unit.")
)
#end-if
#end-if
#end-if
#end-if
(defrule
	(goal strategy-goal flush)
	(goal unit-goal scout-cavalry)
	(gold-amount > 250)
	(building-type-count stable > 0); training scouts doesn't depend on the unit-goal, building a stable does
=>
	(set-goal unit-goal skirmisher); use this to decrease gold gatherer percentage
)
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CELTIC-CIV
(defrule
	(goal strategy-goal flush)
(or	(goal unit-goal scout-cavalry)
	(goal unit-goal skirmisher))
	(strategic-number sn-current-age == fc-transit)
=>
	(set-goal unit-goal default-ranged)
	(set-goal ranged-unit-type-goal default-ranged)
;	(chat-to-player my-player-number "Switching to default ranged unit.")
)
#end-if
(defrule
	(goal strategy-goal flush)
	(goal unit-goal default-ranged)
	(strategic-number sn-current-age == fc-transit)
(or	(civ-selected burmese)
(or	(or	(civ-selected frankish)
		(civ-selected persian))
	(or	(civ-selected spanish)
		(civ-selected teutonic))))
=>
	(set-goal unit-goal knight)
;	(chat-to-player my-player-number "Switching to knights.")
)
(defrule
	(goal strategy-goal flush)
	(goal unit-goal default-ranged)
(or	(civ-selected gothic)
	(civ-selected celtic))
=>
	(set-goal unit-goal militiaman-line)
;	(chat-to-player my-player-number "Switching to militiaman-line.")
)
#end-if
#else ; was not PIDM
(defrule
	(not (goal unit-goal cavalry-archer))
	(up-research-status c: ri-bloodlines >= research-pending)
	(up-research-status c: ri-paladin >= research-pending)	
=>
	(set-goal unit-goal knight)
)
(defrule
(nor	(up-research-status c: ri-bloodlines >= research-pending)
	(up-research-status c: ri-paladin >= research-pending))
=>
	(set-goal unit-goal my-unique-unit-line)
)
#end-if ;PIDM
(defrule
	(true) ; provisory but can leave it in
=>
	(set-goal forgotten 1)
	(disable-self)
)
(defrule
(or	(gold-amount < 50)
	(unit-type-count-total fishing-ship >= high-min-number-upgrade))
	(unit-type-count-total fishing-ship >= mid-min-number-upgrade)
	(up-research-status c: ri-hand-cart >= research-pending)
	(can-research ri-gillnets)
=>
	(research ri-gillnets)
)
#load-if-defined AZTEC-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count-total skirmisher-line >= high-min-number-upgrade)
(or	(unit-type-count-total battering-ram-line >= 3)
	(unit-type-count-total trebuchet-set >= 1))
	(can-research-with-escrow ri-atlatl)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-atlatl)
)
(defrule
	(building-type-count castle > 0)
	(research-available my-unique-research)
	(up-research-status c: ri-blast-furnace >= research-pending)
	(up-research-status c: ri-plate-mail >= research-pending)
(nand	(or	(unit-type-count eagle-warrior-line > 10)
		(unit-type-count heavy-eagle-warrior > 10))
	(research-available ri-elite-eagle-warrior))
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(up-research-status c: ri-blast-furnace >= research-pending)
	(up-research-status c: ri-plate-mail >= research-pending)
(nand	(or	(unit-type-count eagle-warrior-line > 10)
		(unit-type-count heavy-eagle-warrior > 10))
	(research-available ri-elite-eagle-warrior))
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow food)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined BERBERS-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= ci-transit)
(or	(goal unit-goal my-unique-unit-line)
(or	(unit-type-count-total my-unique-unit-line > 6)
(or	(players-building-type-count any-ally castle >= 3)
	(players-building-type-count every-ally castle >= 2))))
	(can-research ri-expeditions)
=>
	(research ri-expeditions))
(defrule
	(strategic-number sn-resource-control <= 2); < 1
(or	(up-research-status c: ri-heavy-camel >= research-pending)
	(up-research-status c: my-unique-research >= research-pending))
(or	(unit-type-count-total camel-line >= mid-min-number-upgrade)
	(unit-type-count-total my-unique-unit-line >= mid-min-number-upgrade))
	(can-research ri-camel-corps)
=>
	(research ri-camel-corps))
#end-if
#load-if-defined BRITON-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total trebuchet-set > 3)
	(up-research-status c: my-unique-research >= research-pending)
	(can-research ri-war-wolf)
=>
	(research ri-war-wolf)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(building-type-count castle > 0)
	(research-available my-unique-research)
	(population >= del-civ-pop)
=>
	(set-strategic-number sn-resource-control 2)
)
#end-if
#load-if-defined BURMESE-CIV
(defrule
	(strategic-number sn-resource-control <= 2); < 1
	(unit-type-count-total battle-elephant-line >= mid-min-number-upgrade)
(nand	(unit-type-count-total battle-elephant-line < high-min-number-upgrade)
	(up-research-status c: imperial-age == research-available))
(or	(building-type-count town-center >= tc-level-three)
(or	(population >= max-civ-pop)
(or	(unit-type-count-total battle-elephant-line >= high-min-number-upgrade)
	(up-compare-goal custom-civ-pop >= max-civ))))
	(can-research ri-howdah)
=>
	(research ri-howdah)
)
(defrule
	(strategic-number sn-resource-control <= 2); < 1
(or	(unit-type-count-total cavalry-class >= mid-min-number-upgrade)
	(unit-type-count-total my-unique-unit-line >= mid-min-number-upgrade))
(or	(strategic-number sn-resource-control < 1)
(or	(unit-type-count-total cavalry-class >= high-min-number-upgrade)
	(unit-type-count-total my-unique-unit-line >= high-min-number-upgrade)))
	(can-research ri-manipur-cavalry)
=>
	(research ri-manipur-cavalry))
#end-if
#load-if-defined BYZANTINE-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count-total fire-ship-line >= low-min-number-upgrade)
	(can-research-with-escrow ri-greek-fire)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-greek-fire)
)
(defrule
	(up-compare-goal ranged-unit-type-goal != archer)
	(up-research-status c: ri-halberdier >= research-pending)
	(food-amount < 300)
	(gold-amount > 700)
	(wood-amount > 400)
=>
	(set-goal ranged-unit-type-goal archer)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(building-type-count castle >= 2)
	(building-type-count watch-tower >= 2))
(or	(population > max-civ-pop)
	(building-type-count keep > 4))
	(can-research ri-stronghold)
=>
	(research ri-stronghold)
)
#end-if
#load-if-defined CHINESE-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(building-type-count bombard-tower > 1)
(or	(building-type-count watch-tower > 4)
	(building-type-count stone-wall-line > 20)))
	(can-research ri-great-wall)
=>
	(research ri-great-wall)
)
#end-if
#load-if-defined ETHIOPIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(goal unit-goal my-unique-unit-line)
	(up-research-status c: ri-chain-mail >= research-pending)
	(can-research-with-escrow ri-royal-heirs)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-royal-heirs)
)
(defrule
(or	(up-compare-goal uu-up-goal != 1)
	(up-research-status c: my-unique-unit-upgrade >= research-pending))
(or	(unit-type-count-total mangonel-line >= 5)
(or	(unit-type-count-total scorpion-line >= 5)
(or	(unit-type-count-total battering-ram-line >= 5)
	(unit-type-count-total bombard-cannon >= 5))))
	(can-research-with-escrow ri-torsion)
=>
	(release-escrow wood)(release-escrow gold)
	(research ri-torsion)
)
(defrule
	(up-compare-goal ranged-unit-type-goal != archer)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-goal ranged-unit-type-goal archer)
)
#end-if
#load-if-defined FRANKISH-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(and	(population > del-civ-pop)
		(strategic-number sn-current-age >= ci-transit))
	(death-match-game))
	(can-research ri-chivalry)
=>
	(research ri-chivalry)
)
#end-if
;#load-if-defined GOTHIC-CIV
;#end-if
#load-if-defined HUN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(goal unit-goal my-unique-unit-line)
(or	(goal control-goal my-unique-unit-line)
	(and	(up-research-status c: my-unique-unit-upgrade >= research-pending)
		(unit-type-count-total tarkan-line >= 1))));	(up-pending-objects c: tarkan-line >= 1))))
	(can-research ri-marauders)
=>
	(research ri-marauders)
)
#end-if
#load-if-defined JAPANESE-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(building-type-count watch-tower > 3)
(or	(building-type-count watch-tower-line > 3)
(or	(building-type-count guard-tower > 3)
	(building-type-count keep > 3))))
(or	(up-research-status c: ri-masonry >= research-pending)
(or	(up-research-status c: ri-arrowslits >= research-pending)
	(goal under-attack-goal 1)))
	(can-research ri-yasama)
=>
	(research ri-yasama)
)
(defrule
	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(unit-type-count trebuchet-set >= 4)
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow wood)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined KHMER-CIV
(defrule
	(strategic-number sn-resource-control <= 2); < 1
	(unit-type-count-total battle-elephant-line >= mid-min-number-upgrade)
(nand	(unit-type-count-total battle-elephant-line < high-min-number-upgrade)
	(up-research-status c: imperial-age == research-available))
(or	(building-type-count town-center >= tc-level-three)
(or	(population >= max-civ-pop)
(or	(unit-type-count-total battle-elephant-line >= high-min-number-upgrade)
	(up-compare-goal custom-civ-pop >= max-civ))))
	(can-research ri-tusk-swords)
=>
	(research ri-tusk-swords)
)
(defrule
	(strategic-number sn-resource-control <= 2); < 1
(or	(unit-type-count-total my-unique-unit-line >= mid-min-number-upgrade)
	(unit-type-count-total scorpion-line >= mid-min-number-upgrade))
	(can-research ri-double-crossbow)
=>
	(research ri-double-crossbow))
#end-if
#load-if-defined KOREAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total turtle-ship-line >= low-min-number-upgrade)
	(can-research ri-panokseon)
=>
	(research ri-panokseon)
)
#end-if
#load-if-defined MALAY-CIV
(defrule
	(strategic-number sn-resource-control <= 2); < 1
(or	(goal unit-goal militiaman-line)
(or	(goal control-goal militiaman-line)
(or	(strategic-number sn-resource-control < 1)
(or	(game-time > 2400); 2700
(or	(up-compare-goal trade-units < 30)
(or	(dropsite-min-distance gold <= -1)
	(dropsite-min-distance gold > 5)))))))
	(can-research ri-forced-levy)
=>
	(research ri-forced-levy))
(defrule
	(strategic-number sn-resource-control < 1)
	(up-compare-goal enemy-boats-goal >= 1)
	(building-type-count dock >= 3)
(or	(building-type-count dock >= 5)
	(strategic-number sn-current-age >= ci-transit))
	(can-research ri-thalassocracy)
=>
	(research ri-thalassocracy)
)
#end-if
#load-if-defined MALIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(building-type-count town-center >= tc-level-three)
(or	(building-type-count town-center >= tc-level-five)
	(population >= max-pop))
	(can-research ri-tigui)
=>
	(research ri-tigui)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total cavalry-unit-class >= high-min-number-upgrade)
	(can-research ri-mandekalu)
=>
	(research ri-mandekalu))
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total archer-line >= high-min-number-upgrade)
	(goal team-coordination-goal 1); attacking
	(can-research ri-obsidian-arrows)
=>
	(research ri-obsidian-arrows)
)
#end-if
#load-if-defined MONGOL-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(wood-amount > 600)
	(strategic-number sn-current-age >= ci-transit))
	(can-research ri-nomads)
=>
	(research ri-nomads)
)
(defrule
	(building-type-count house > 0)
	(population-headroom <= 0)
	(research-completed ri-nomads)
=>
	(delete-building house)
)
#end-if
#load-if-defined PERSIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(players-unit-type-count any-enemy battering-ram-line >= 1)
	(up-research-status c: ri-murder-holes >= research-pending)
	(can-research ri-boiling-oil)
=>
	(research ri-boiling-oil)
)
(defrule
	(can-research-with-escrow my-unique-research)
(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(unit-type-count-total my-unique-unit-line >= low-min-number-upgrade))
=>
	(release-escrow food)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined PORTUGUESE-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(up-compare-goal navy-count >= 5)
(or	(unit-type-count-total turtle-ship-line >= 3)
(or	(unit-type-count-total demolition-ship-line >= 5)
(or	(unit-type-count-total fire-ship-line >= 5)
(or	(unit-type-count-total galley-line >= 5)
(or	(unit-type-count-total longboat-line >= 5)
(or	(unit-type-count-total cannon-galleon-line >= 5)
	(unit-type-count-total caravel-line >= 5))))))))
	(can-research ri-carrack)
=>
	(research ri-carrack)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(and	(up-research-status c: my-unique-unit-upgrade >= research-pending)
		(goal unit-goal my-unique-unit-line))
(or	(unit-type-count-total bombard-cannon >= 3)
(or	(unit-type-count-total my-unique-unit-line >= 6)
	(unit-type-count-total hand-cannoneer >= 9))))
	(can-research ri-arquebus)
=>
	(research ri-arquebus)
)
(defrule
	(building-available feitoria)
	(can-afford-building feitoria)
	(goal increase-town-size-goal 0)
	(up-compare-goal feitoria-count g:< feitoria-cap)
(nand	(game-time < 600)
	(and	(gold-amount >= 5000)
		(stone-amount >= 2000)))
	(current-age-time > 15)
(or	(strategic-number sn-resource-control < 1)
	(current-age-time > 300))
(or	(wood-amount < 10000)
(or	(food-amount < 10000)
(or	(gold-amount < 10000)
	(stone-amount < 5000))))
=>
	(set-goal increase-town-size-goal feitoria)
)
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count-total monastery-class >= 11)
(or	(strategic-number sn-current-age >= ci-transit)
	(gold-amount < 500))
	(can-research ri-madrasah)
=>
	(research ri-madrasah)
)
#end-if
#load-if-defined SPANISH-CIV
(defrule
(or	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-resource-control == ri-inquisition))
	(unit-type-count-total monastery-class > 7)
	(strategic-number sn-current-age >= ci-transit)
	(can-research-with-escrow ri-inquisition)
=>	
	(release-escrow food)(release-escrow gold)
	(research ri-inquisition)
)
(defrule	
	(random-number < 90)
	(goal strategy-goal boom)
	(goal unit-goal my-unique-unit-line)
	(current-age == castle-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-focus-player-number g:= closest-enemy-goal)
(or	(or	(players-civ focus-player gothic)
		(players-civ focus-player indian))
	(players-civ focus-player persian))
=>
	(set-goal ranged-unit-type-goal monk)
	(disable-self)
)
#end-if
#load-if-defined TEUTONIC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= ci-transit)
(or	(unit-type-count-total trebuchet-set >= 1)
(or	(unit-type-count-total battering-ram-line >= 1)
(or	(unit-type-count-total scorpion-line >= 1)
(or	(unit-type-count-total mangonel-line >= 1)
	(unit-type-count-total bombard-cannon >= 1)))))
	(can-research ri-ironclad)
=>
	(research ri-ironclad)
)
(defrule
	(goal unit-goal knight)
	(goal control-goal 0)
	(strategic-number sn-archer-threat >= 2)
	(goal anti-cavalry-threat-goal 1)
	(up-research-status c: my-unique-unit-upgrade < research-pending)
=>
	(set-goal control-goal 0)
	(set-goal uu-up-goal 0)
	(set-goal ranged-unit-type-goal scorpion)
	(disable-self)
)
#end-if
#load-if-defined TURKISH-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total cavalry-archer-class >= high-min-number-upgrade)
	(can-research ri-sipahi)
=>
	(research ri-sipahi)
)
#end-if
#load-if-defined VIETNAMESE-CIV
(defrule
	(strategic-number sn-resource-control <= 2); < 1
	(unit-type-count-total battle-elephant-line >= mid-min-number-upgrade)
(nand	(unit-type-count-total battle-elephant-line < high-min-number-upgrade)
	(up-research-status c: imperial-age == research-available))
(or	(building-type-count town-center >= tc-level-three)
(or	(population >= max-civ-pop)
(or	(unit-type-count-total battle-elephant-line >= high-min-number-upgrade)
	(up-compare-goal custom-civ-pop >= max-civ))))
	(can-research ri-chatras)
=>
	(research ri-chatras)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(current-age-time > 330)
(or	(player-in-game any-ally)
(or	(and	(game-time > 3300)
		(commodity-selling-price food < 20))
(or	(dropsite-min-distance gold <= -1)
	(dropsite-min-distance gold > 10))))
	(can-research ri-paper-money)
=>
	(research ri-paper-money))
#end-if
#load-if-defined VIKING-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count-total berserk-line >= mid-min-number-upgrade)
(or	(unit-type-count-total militiaman-line >= mid-min-number-upgrade)
	(unit-type-count-total spearman-line >= mid-min-number-upgrade)))
(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(up-research-status c: ri-champion >= research-pending))
(or	(strategic-number sn-cavalry-threat >= 1)
	(up-compare-goal meso-enemy-goal != 1))
	(can-research ri-chieftains)
=>
	(research ri-chieftains)
)
(defrule
	(can-research-with-escrow my-unique-research)
	(up-research-status c: my-unique-unit-upgrade >= research-pending)
=>
	(release-escrow food)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined MAGYAR-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(goal unit-goal my-unique-unit-line)
(or	(goal control-goal my-unique-unit-line)
(or	(strategic-number sn-current-age >= ci-transit)
(or	(game-time > 2700)
	(dropsite-min-distance gold > 5)))))
	(can-research-with-escrow ri-mercenaries)
=>	
	(release-escrow food)(release-escrow gold)
	(research ri-mercenaries)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total cavalry-archer-class >= mid-min-number-upgrade)
(or	(unit-type-count-total cavalry-archer-class >= high-min-number-upgrade)
	(and	(up-research-status c: ri-parthian-tactics >= research-pending)
		(up-research-status c: ri-thumb-ring >= research-pending)))
	(can-research ri-recurve-bow)
=>
	(research ri-recurve-bow)
)
#end-if
#load-if-defined INCAN-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(strategic-number sn-resource-control < 1)
	(goal team-coordination-goal 1))
(or	(unit-type-count-total skirmisher-line >= high-min-number-upgrade)
(or	(unit-type-count-total genitour-line >= high-min-number-upgrade)
	(unit-type-count-total slinger >= mid-min-number-upgrade)))
	(can-research ri-andean-sling)
=>
	(research ri-andean-sling)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(strategic-number sn-resource-control < 1)
	(goal team-coordination-goal 1))
(or	(up-research-status c: ri-conscription >= research-pending)
(or	(unit-type-count-total eagle-warrior-line >= mid-min-number-upgrade)
(or	(unit-type-count-total my-unique-unit-line >= mid-min-number-upgrade)
	(unit-type-count-total slinger >= mid-min-number-upgrade))))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined SLAVIC-CIV
(defrule
(or	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-resource-control == ri-orthodoxy))
	(unit-type-count-total monastery-class >= 7)
(or	(strategic-number sn-current-age >= ci-transit)
	(goal hostilities-goal 1))
	(can-research-with-escrow ri-orthodoxy)
=>
	(release-escrow gold)
	(research ri-orthodoxy)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(up-research-status c: ri-halberdier >= research-pending)
	(up-research-status c: ri-champion >= research-pending))
	(unit-type-count infantry-class > 16)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-resource-control == 0)
	(unit-type-count-total camel-line >= mid-min-number-upgrade)
	(population > eighty-five-percent-pop)
(or	(research-available ri-heavy-camel)
	(research-available ri-imperial-camel))
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count-total camel-line >= mid-min-number-upgrade)
	(can-research-with-escrow ri-imperial-camel)
=>	
	(release-escrow food)(release-escrow gold)
	(research ri-imperial-camel)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(gold-amount < 100)
	(strategic-number sn-current-age >= ci-transit))
	(can-research ri-sultans)
=>
	(research ri-sultans)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count-total hand-cannoneer >= mid-min-number-upgrade)
	(can-research ri-shatagni)
=>
	(research ri-shatagni)
)
#end-if
#load-if-defined ITALIAN-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(goal hostilities-goal 1)
	(strategic-number sn-resource-control < 1))
(or	(unit-type-count-total genoese-crossbowman-line >= mid-min-number-upgrade)
(or	(unit-type-count-total archer-line >= mid-min-number-upgrade)
	(up-research-status c: my-unique-unit-upgrade >= research-pending)))
	(can-research ri-pavise)
=>
	(research ri-pavise)
)
#end-if
(defrule
	(up-timer-status one-minute-timer != timer-running)
	(housing-headroom <= minNavy)
	(population-headroom <= 0)
	(up-compare-goal feitoria-count g:> feitoria-cap)
=>
	(delete-building feitoria))
#load-if-defined AZTEC-CIV
(defrule
	(goal unit-goal monk)
	(strategic-number sn-current-age == castle)
	(game-time >= 1500)
(or	(gold-amount < 200)
	(game-time >= 1800))
	(wood-amount >= 200); 300
	(food-amount >= 400); 800
	(gold-amount < 300)
=>
	(set-goal unit-goal skirmisher)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
)
#else
(defrule
	(goal unit-goal monk)
	(strategic-number sn-current-age == castle)
	(game-time > 1800)
(or	(gold-amount < 200)
	(game-time >= 1800))
;	(wood-amount >= 200); 300
	(food-amount >= 400); 800
	(gold-amount < 300)
=>
	(set-goal unit-goal my-unique-unit-line)
	(set-goal control-goal 0)
	(set-goal ranged-unit-type-goal monk)
)
#end-if
(defrule
	(game-time > 2700); 3000
	(goal ranged-unit-type-goal monk)
	(up-compare-goal trade-units < 10); 8
(or	(dropsite-min-distance gold >= 10)
	(game-time >= 3600))
	(gold-amount < 3300)
=>
	(set-goal ranged-unit-type-goal 0)
)
(defrule; test
	(game-time > 2700); 3000
	(goal unit-goal monk)
	(up-compare-goal trade-units < 40)
(or	(dropsite-min-distance gold >= 8)
	(game-time >= 3600))
	(gold-amount < 3300)
=>
	(set-goal unit-goal pocket-unit)
)
#load-if-defined BALTIC-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(goal position-goal pocket)
(or	(game-time < 1500); 1800
	(and	(goal enemy-boats-goal 1)
		(and	(up-compare-goal navy-count g:< max-navy); < max-fleet)
			(up-compare-goal navy-count < 33)))); 35
=>
	(set-goal strategy-goal rush)
	(set-strategic-number sn-minimum-water-body-size-for-dock water-islands)
)
(defrule
	(game-time >= 1500); 1800
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
;	(goal position-goal pocket)
(or	(goal enemy-boats-goal 0)
(or	(up-compare-goal navy-count g:>= max-navy); >= max-fleet)
	(up-compare-goal navy-count >= 39))); 45
=>
	(set-strategic-number sn-minimum-water-body-size-for-dock water-mixed); water secured, train land army
)
#end-if

; end strategy section


;************************** BOAR HUNTING ********************************

#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(defrule
	(up-timer-status boar-timer != timer-running)
	(game-time >= 55)
(nand	(death-match-game)
	(game-time < 300))
	(unit-type-count 216 < 1)
	(unit-type-count 122 < 1)
	(unit-type-count-total villager >= 10); 9
	(up-research-status c: ri-loom >= research-complete)
	(dropsite-min-distance live-boar <= 32)
	(dropsite-min-distance live-boar >= 0)
; nn	(dropsite-min-distance boar-hunting >= 5); no slain boar left
=>
	(enable-timer boar-timer 3)
	(set-strategic-number sn-enable-boar-hunting 2)
	(set-strategic-number sn-minimum-boar-hunt-group-size 1)
	(set-strategic-number sn-minimum-number-hunters 1)
	(set-strategic-number sn-maximum-food-drop-distance 15); 16
	(set-strategic-number sn-maximum-hunt-drop-distance 32)
;	(up-retask-gatherers food c: 1)
	(up-request-hunters c: 1)
;	(chat-local-to-self "Trying to start a hunt.")
)

(defrule
	(up-timer-status boar-timer != timer-running)
	(dropsite-min-distance live-boar <= 14)
	(strategic-number sn-enable-boar-hunting >= 2); 1
	(unit-type-count 216 <= 2)
	(unit-type-count 122 <= 2)
(nand	(unit-type-count 216 >= 1)
	(unit-type-count 122 >= 1))
(or	(unit-type-count 216 >= 1)
	(unit-type-count 122 >= 1))
=>
	(enable-timer boar-timer 6)
	(set-strategic-number sn-minimum-number-hunters 2)
	(up-request-hunters c: 1)
;	(chat-local-to-self "Requesting support hunter.")
)
(defrule
	(up-timer-status boar-timer != timer-running)
	(dropsite-min-distance live-boar <= 8)
	(dropsite-min-distance live-boar >= 0)
	(unit-type-count 216 <= 2)
	(unit-type-count 122 <= 2)
	(strategic-number sn-enable-boar-hunting >= 1)
;(or	(unit-type-count 216 >= 1); at least 1 hunter = the boar is not just standing too close to the mill
;	(unit-type-count 122 >= 1))
=>
	(enable-timer boar-timer 18); 12
	(set-strategic-number sn-minimum-boar-hunt-group-size 4)
	(set-strategic-number sn-minimum-number-hunters 4)
;	(up-retask-gatherers food c: 1)
	(up-request-hunters c: 4); 5
;	(chat-local-to-self "Adding more hunters.")
)

(defrule
	(up-timer-status boar-timer != timer-running)
(or	(dropsite-min-distance live-boar s:> sn-maximum-hunt-drop-distance)
	(and	(or	(unit-type-count 216 >= 3); male hunter
			(unit-type-count 122 >= 3)); female hunter
		(and	(dropsite-min-distance live-boar >= 10)
			(dropsite-min-distance boar-hunting <= 9)))); eating a boar right now
	(strategic-number sn-minimum-number-hunters > 1)
=>
	(set-strategic-number sn-minimum-boar-hunt-group-size 1)
	(set-strategic-number sn-minimum-number-hunters 1)
;	(chat-local-to-self "Lowering min-hunters.")
)

(defrule
(or	(strategic-number sn-current-age >= df-transit); test
(or	(unit-type-count villager >= 30); test
(or	(dropsite-min-distance live-boar > 32)
	(dropsite-min-distance live-boar <= -1))))
(or	(building-type-count-total mill >= 2)
	(unit-type-count villager >= 12))
(or	(unit-type-count villager >= 18)
	(game-time > 420)); 390
;(or	(unit-type-count villager >= 18)
;	(and	(cc-players-unit-type-count 0 48 == 0); no boar on the map
;		(cc-players-unit-type-count 0 822 == 0)))
	(strategic-number sn-enable-boar-hunting != 1)
=>
	(set-strategic-number sn-enable-boar-hunting 1); enable hunting of all kinds
	(set-strategic-number sn-minimum-boar-hunt-group-size 1)
	(set-strategic-number sn-minimum-number-hunters 2)
;	(set-strategic-number sn-maximum-hunt-drop-distance 20);	(up-modify-sn sn-maximum-hunt-drop-distance c:max 20)
;	(chat-local-to-self "Disabling hunting restrictions.")
)

#end-if
#end-if


;******************** RESOURCE MANAGEMENT AND AGE UP ********************


#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(up-pending-objects c: dock < 6)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(game-time < 600)
	(building-type-count-total dock < 12)
	(can-build dock)
=>
	(build dock)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(game-time < 600)
	(not (can-build dock))
	(unit-type-count eagle-warrior-line > 0)
	(building-type-count town-center > 0)
	(building-type-count-total barracks == 0)
	(can-build barracks)
=>
	(build barracks)
	(set-strategic-number sn-number-explore-groups 3)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(game-time < 600)
	(not (can-build dock))
	(building-type-count town-center > 0)
	(building-type-count-total stable == 0)
	(can-build stable)
=>
	(build stable)
	(set-strategic-number sn-number-explore-groups 3)
)
(defrule
	(building-type-count town-center > 0)
	(game-time < 600)
	(unit-type-count villager > villager-siege-workshop)
	(building-type-count-total siege-workshop < 1)
	(can-build siege-workshop)
=>
	(build siege-workshop)
)
(defrule
	(building-type-count town-center > 0)
(or	(and	(unit-type-count villager >= villager-monastery)
		(or	(goal position-goal pocket)
			(not (player-in-game any-ally))))
	(or	(unit-type-count villager >= 18)
		(civ-selected aztec)))
	(can-build monastery)
	(building-type-count-total monastery < 1)
=>
	(build monastery)
)
(defrule
	(unit-type-count villager >= 13)
	(building-type-count-total town-center < 6)
	(can-build town-center)
=>
	(build town-center)
)

(defrule
(or	(building-type-count-total market < 1)
	(building-type-count farm > 0))
	(unit-type-count villager >= villager-stable)
	(building-type-count-total stable < number-stables)
	(can-build stable)
=>
	(build stable)
)
(defrule
(or	(unit-type-count villager >= villager-archery-range)
	(and	(building-type-count-total market < 1)
		(civ-selected hun)))
	(building-type-count-total archery-range < number-archery-ranges)
	(can-build archery-range)
=>
	(build archery-range)
)
(defrule
(or	(or	(up-research-status c: ri-champion >= research-pending)
		(civ-selected mayan))
	(strategic-number sn-cavalry-threat >= 1))
	(unit-type-count villager >= villager-barracks)
	(building-type-count-total barracks < number-barracks)
	(can-build barracks)
=>
	(build barracks)
)
(defrule
	(building-type-count-total market < 1)
	(unit-type-count villager >= villager-market)
	(can-build market)
=>
	(build market)
)
(defrule
	(building-type-count town-center > 0)
(or	(up-research-status c: ri-heavy-scorpion >= research-pending)
	(and	(civ-selected hun)
		(building-type-count-total siege-workshop < 2)))
	(unit-type-count villager > villager-siege-workshop)
	(building-type-count-total siege-workshop < 3)
	(can-build siege-workshop)
=>
	(build siege-workshop)
)
#load-if-not-defined DEFEND-WONDER
(defrule
	(up-pending-objects c: mining-camp < 1)
(or	(strategic-number sn-current-age <= ci-transit); PIDM work-around
	(game-time >= 180))
(or	(unit-type-count villager >= villager-mining-camp)
	(and	(unit-type-count villager >= villager-town-center)
		(building-type-count-total mining-camp <= 0)))
	(building-type-count-total mining-camp < 4); 6
(or	(resource-found gold)
	(resource-found stone))
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
)
#end-if
#end-if ;PIDM
(defrule
(or	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(building-type-count-total town-center == 0))
=>
	(up-jump-rule 27)
)
(defrule
	(game-time < 2400)
(or	(goal strategy-goal boom)
	(civ-selected indian)); camel + pikes would be overkill
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
=>
	(up-jump-rule 1)
)
(defrule
	(goal train-civ-goal 1)
	(strategic-number sn-cavalry-threat >= 1)
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-military-level >= 0)
	(military-population > 10)
	(building-type-count barracks > 0)
(nand	(or	(goal unit-goal knight)
		(goal unit-goal battle-elephant))
	(unit-type-count villager < 60))
	(research-available ri-pikeman)
=>
	(set-strategic-number sn-resource-control ri-pikeman)
	(set-goal train-civ-goal ri-pikeman)
;debug;	(chat-to-player my-player-number "Saving resources for ri-pikeman")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(research-available ri-chain-mail)
=>
	(set-goal train-civ-goal ri-chain-mail); stop villager training only EWs
;debug;	(chat-to-player my-player-number "Saving resources for ri-chain-mail")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal ri-chain-mail)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(up-research-status c: ri-pikeman >= research-pending)
	(research-available ri-chain-mail)	
=>
	(set-strategic-number sn-resource-control ri-chain-mail);stop all units; vils remain stopped
;debug;	(chat-to-player my-player-number "Saving resources for ri-chain-mail")
)
(defrule
	(building-type-count town-center > 0)
	(current-age >= castle-age)
	(unit-type-count villager > villager-siege-workshop)
	(building-type-count-total siege-workshop < 1)
	(goal forward-threat-goal 1); don't check wood to block other buildings if enemy forwarded us
(nand	(unit-type-count ranged-unit-class < 5)
	(strategic-number sn-military-level < 0))
	(wood-amount < 260); some buffer
=>
	(set-goal increase-town-size-goal siege-workshop)
	(set-strategic-number sn-resource-control battering-ram)
	(set-goal save-wood-goal 1)
;debug;debug;	(chat-to-player my-player-number "Saving resources for siege-workshop")
)
(defrule
	(building-type-count-total town-center >= tc-level-two)
	(goal unit-goal my-unique-unit-line)
(or	(and	(goal monk-threat-goal 1)
		(map-type arena))
	(or	(players-unit-type-count focus-player mangonel-line > 1)
		(players-unit-type-count focus-player scorpion-line > 4)))
	(wood-amount >= 200)
	(current-age >= castle-age)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(strategic-number sn-archer-threat > 1)
	(goal unit-goal my-unique-unit-line)
	(wood-amount >= 200)
	(current-age == castle-age)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(wood-amount >= 800)
	(current-age == castle-age)
	(building-type-count-total university < 1)
	(building-type-count-total castle < 1)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(wood-amount >= 200)
	(current-age >= castle-age)
	(strategic-number sn-resource-control < 2)
	(building-type-count-total town-center < tc-level-four)
	(goal strategy-goal boom)
(or	(goal unit-goal knight)
(or	(goal unit-goal battle-elephant)
	(civ-selected teutonic)))
	(strategic-number sn-archer-threat < 2)
=>
	(up-jump-rule 1)
)
(defrule
	(wood-amount >= 200)
	(current-age >= castle-age)
	(strategic-number sn-resource-control < 2)
	(building-type-count-total town-center >= tc-level-three)	
(or	(goal unit-goal knight)
	(civ-selected teutonic))
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(current-age == castle-age)
(or	(strategic-number sn-archer-threat > 1)
	(players-building-type-count focus-player siege-workshop > 1))
(or	(goal unit-goal knight)
	(goal ranged-unit-type-goal monk))
	(building-type-count-total siege-workshop < 1)
	(wood-amount < 200)
	(game-time < 1500)
=>
	(set-goal save-wood-goal siege-workshop)
;	(chat-local-to-self "Saving resources for siege-workshop")
)
(defrule
	(can-build siege-workshop)
(or	(strategic-number sn-archer-threat > 1)
	(and	(players-building-type-count focus-player siege-workshop > 1)
		(game-time < 1500)))
(or	(goal unit-goal knight)
	(goal ranged-unit-type-goal monk))
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
	(build siege-workshop)
)
#end-if
#end-if
#end-if
#end-if
(defrule
	(current-age >= castle-age)
	(wood-amount >= 200)
	(goal save-wood-goal 0)
	(goal unit-goal cavalry-archer)
	(building-type-count-total town-center == 1)
	(building-type-count-total stable == 1)
	(building-type-count-total archery-range > 3)
	(building-type-count-total siege-workshop < 1)
(or	(up-compare-goal position-goal == flank)
	(players-building-type-count focus-player watch-tower > 1))
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal strategy-goal flush)
	(goal save-wood-goal 0)
	(building-type-count town-center > 0)
	(building-type-count-total monastery > 0)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(strategic-number sn-military-level > 0)
	(building-type-count-total siege-workshop < 1)
	(can-build siege-workshop)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(building-type-count town-center > 0)
	(or
		(strategic-number sn-military-level > 1)
		(goal team-coordination-goal 1)
	)
	(or
		(and
			(players-building-type-count any-enemy castle > 0)
			(strategic-number sn-military-level > 2)
		)
		(and
			(goal unit-goal default-ranged)
			(up-compare-goal strategy-goal != boom)
		)
	)
	(goal under-attack-goal 0)
	(building-type-count-total siege-workshop < 1)
	(can-build siege-workshop)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal control-goal shot)
	(building-type-count-total town-center < tc-level-three)
	(players-building-type-count focus-player castle > 0)
=>
	(up-jump-rule 2)
)
(defrule
	(current-age >= castle-age)
	(wood-amount >= 200)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(or
		(or
			(strategic-number sn-archer-threat > 1)
			(players-unit-type-count focus-player scorpion-line > 9)
		)
		(or
			(building-type-count-total stone-wall-line > 10)
			(players-building-type-count any-enemy castle > 0)
		)
	)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(building-type-count town-center > 0)
	(current-age >= castle-age)
	(goal increase-town-size-goal 0)
	(or
		(building-type-count monastery > 2); get fast imp with mush
		(or
			(goal strategy-goal fast-imp)
			(goal control-goal shot)
		)
	)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-military-level > 1)
	(current-age == castle-age)
(or	(nor	(goal strategy-goal fast-imp); don't delay fast imp or booms
		(goal strategy-goal boom))
	(goal control-goal shot)); except if meso shot
	(building-type-count siege-workshop > 0)
;	(unit-type-count-total siege-unit-class == 0)
	(unit-type-count-total battering-ram-line < 3)
=>
	(set-strategic-number sn-resource-control battering-ram)
;debug;	(chat-to-player my-player-number "Saving resources for battering-ram")
)
(defrule
	(strategic-number sn-resource-control == 0)
	(current-age == castle-age)
(or	(goal strategy-goal rush)
	(goal strategy-goal flush))
	(strategic-number sn-military-level > 1)
	(goal unit-goal default-ranged)
	(building-type-count siege-workshop > 0)
	(unit-type-count-total battering-ram-line < 2)
;(nand	(unit-type-count spearman-line < 6)
;	(strategic-number sn-cavalry-threat > 0))
=>
	(set-strategic-number sn-resource-control battering-ram)
;debug;	(chat-to-player my-player-number "Saving resources for battering-ram")
)
(defrule
	(goal unit-goal knight)
	(building-type-count siege-workshop > 0)
	(strategic-number sn-archer-threat > 1)
	(strategic-number sn-military-level < 0)
	(unit-type-count-total mangonel-line < 1)
=>
	(up-jump-rule 7)
)
(defrule
	(goal forward-threat-goal 1)
	(unit-available battering-ram-line)
(or	(unit-type-count-total battering-ram-line <= 0)
	(players-building-type-count focus-player watch-tower >= 3)); 4
	(unit-type-count-total battering-ram-line < 3)
	(unit-type-count-total trebuchet-set == 0)
	(unit-type-count-total trebuchet-set <= 0)
	(unit-type-count-total bombard-cannon <= 3)
(nand	(strategic-number sn-military-level < 0)
	(goal under-attack-goal 1))
	(up-compare-goal custom-civ-pop > 22)
=>
	(set-strategic-number sn-resource-control battering-ram)
;debug;	(chat-to-player my-player-number "Saving resources for battering-ram")
)
(defrule
	(goal forward-threat-goal 1)
	(unit-available battering-ram-line)
	(players-building-type-count focus-player watch-tower >= 5); 6
	(unit-type-count-total battering-ram-line < 5)
	(unit-type-count-total trebuchet-set <= 0)
	(unit-type-count-total bombard-cannon <= 3)
(nand	(strategic-number sn-military-level < 0)
	(goal under-attack-goal 1))
=>
	(set-strategic-number sn-resource-control battering-ram)
;debug;	(chat-to-player my-player-number "Saving resources for battering-ram")
)
(defrule
	(unit-available battering-ram-line)
	(unit-type-count battering-ram-line <= 0)
	(unit-type-count-total trebuchet-set <= 0)
	(unit-type-count-total bombard-cannon <= 3)
	(goal team-coordination-goal 1); attacking
	(players-building-type-count target-player stone-wall-line >= 8)
=>
	(set-strategic-number sn-resource-control battering-ram)
;debug;	(chat-to-player my-player-number "Saving resources for battering-ram")
)
(defrule
	(unit-available battering-ram-line)
	(unit-type-count battering-ram-line <= 0)
	(unit-type-count-total trebuchet-set <= 0)
	(unit-type-count-total bombard-cannon <= 3)
(or	(cc-players-unit-type-count any-enemy castle-arrow > 0)
	(cc-players-unit-type-count any-enemy watch-tower-arrow > 0))
(or	(up-compare-goal under-attack-goal == 1)
	(goal forward-threat-goal 1))
	(strategic-number sn-military-level >= 0)
=>
	(set-strategic-number sn-resource-control battering-ram)
;debug;	(chat-to-player my-player-number "Saving resources for battering-ram")
)
(defrule
	(strategic-number sn-resource-control < 3)
	(goal control-goal shot)
	(unit-available battering-ram-line)
(not	(unit-available trebuchet))
(not	(unit-available bombard-cannon))
	(unit-type-count-total battering-ram-line < 1)
	(strategic-number sn-military-level >= 0)
=>
	(set-strategic-number sn-resource-control battering-ram)
;debug;	(chat-to-player my-player-number "Saving resources for battering-ram")
)
(defrule
	(strategic-number sn-resource-control == battering-ram)
	(wood-amount < 175)
=>
	(set-goal save-wood-goal 1)
)
(defrule
(or	(and	(goal forward-threat-goal 1)
		(unit-type-count battering-ram-line < 2)); -total 3
	(strategic-number sn-resource-control == battering-ram))
	(can-train-with-escrow battering-ram-line)
=>
	(release-escrow wood)(release-escrow gold)
	(train battering-ram-line)
	(set-strategic-number sn-resource-control 0); end jump
)
(defrule
	(goal increase-town-size-goal siege-workshop)
(or	(or	(goal unit-goal skirmisher)
		(goal strategy-goal boom))
	(or	(goal unit-goal my-unique-unit-line)
		(goal unit-goal mix)))
	(up-compare-goal forward-threat-goal != 1); don't build an aggressive siege-workshop with these strategies
	(building-type-count-total town-center < tc-level-two)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(current-age >= castle-age)
	(player-in-game any-ally)
	(military-population > 15)
(nand	(or	(goal position-goal pocket)
		(goal strategy-goal boom))
	(players-building-type-count any-ally siege-workshop > 0))
	(players-military-population target-player < 5)
	(building-type-count-total siege-workshop < 1)
	(wood-amount < 200)
=>
	(set-goal save-wood-goal 1)
)
(defrule
	(current-age >= castle-age)
	(player-in-game any-ally)
	(military-population > 12)
	(or
		(nor
			(goal position-goal pocket)
			(goal strategy-goal boom)
		)
		(players-building-type-count target-player watch-tower > 0)
	)
	(players-military-population target-player < 5)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-goal 3)
)
#load-if-not-defined DEATH-MATCH
(defrule
	(building-type-count town-center > 0)
	(current-age >= castle-age)
	(goal increase-town-size-goal 0)
	(goal unit-goal archer)
	(or
		(and
			(goal control-goal aggressive-rush)
			(civ-selected mayan)
		)
		(and
			(players-building-type-count focus-player watch-tower > 0)
			(goal strategy-goal rush)
		)
	)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
	(up-compare-goal position-goal == flank)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
	(current-age >= castle-age)
	(goal increase-town-size-goal 0)
	(goal save-wood-goal 0)
	(building-type-count-total town-center >= tc-level-three)
(or	(goal ranged-unit-type-goal scorpion)
	(up-research-status c: ri-heavy-scorpion >= research-pending))
	(building-type-count-total siege-workshop < 3)
	(wood-amount >= 400)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(strategic-number sn-maximum-town-size >= 60)
	(goal increase-town-size-goal 0)
	(goal save-wood-goal 0)
	(building-type-count-total town-center >= tc-level-three)
	(wood-amount > 1200)
	(up-research-status c: ri-siege-ram >= research-pending)
	(building-type-count-total siege-workshop < 3)
=>
	(set-goal forward-goal siege-workshop)
)
#end-if
#end-if
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(goal save-wood-goal 0)
	(building-type-count-total town-center >= tc-level-four)
(or	(or	(building-type-count-total town-center >= tc-level-five)
		(up-compare-goal custom-civ-pop >= max-civ))
	(and	(up-compare-goal strategy-goal != boom)
		(population-cap < 250)))
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(goal strategy-goal rush)
	(goal unit-goal scorpion)
	(building-type-count-total siege-workshop < 3)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= 1)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total siege-workshop < 4)
(or	(building-type-count-total siege-workshop < 3)
(or	(goal team-coordination-goal 1)
(or	(population >= del-civ-pop)
	(strategic-number sn-military-level >= 2))))
(or	(wood-amount >= 300)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(building-type-count-total town-center >= tc-level-three)))
	(building-available siege-workshop)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4))
#load-if-not-defined UP-POCKET-POSITION
#load-if-not-defined GOTHIC-CIV
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-archer-threat > 0)
	(strategic-number sn-military-level < 0)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#else
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(goal unit-goal scorpion)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total siege-workshop < 1)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(current-age >= castle-age)
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= tc-level-two)
	(goal save-wood-goal 0)
(or	(building-type-count-total town-center >= tc-level-four)
	(and	(or	(goal unit-goal knight)
			(building-type-count-total town-center >= tc-level-three))
		(building-type-count-total siege-workshop == 0)))
	(building-type-count-total siege-workshop < 3)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#load-if-defined SLAVIC-CIV
(defrule
	(goal save-wood-goal 0)
	(current-age >= castle-age)
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= tc-level-two)
(or	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total siege-workshop == 0))
(or	(building-type-count-total town-center >= tc-level-four)
	(building-type-count-total siege-workshop == 1))
	(building-type-count-total siege-workshop < 3)
	(wood-amount >= 200)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-current-age >= ci-transit)
	(unit-type-count-total scorpion-line > 9)
	(up-research-status c: ri-heavy-scorpion < research-pending)
	(goal unit-goal scorpion)
=>
	(set-strategic-number sn-resource-control 2)
	(set-goal save-wood-goal 1)
)
#end-if
#load-if-defined DEATH-MATCH
(defrule
	(game-time > 120)
	(up-compare-goal increase-town-size-goal != siege-workshop)
	(building-type-count-total siege-workshop == 0)
	(wood-amount >= 200)
	(current-age == castle-age)
=>
	(set-goal increase-town-size-goal siege-workshop)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
	(goal increase-town-size-goal siege-workshop)
	(up-pending-objects c: siege-workshop > 0)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(goal increase-town-size-goal siege-workshop)
	(can-build siege-workshop)
=>
	(build siege-workshop)
	(set-goal increase-town-size-goal 2)
)
#end-if ; NOT WONDER RACE
(defrule; saving up for feudal-age
	(strategic-number sn-current-age == dark)
	(unit-type-count-total villager >= 24)
(or	(unit-type-count-total villager >= 25)
	(up-compare-goal unit-goal != militiaman-line))
	(goal strategy-goal flush)
(or	(food-amount >= 450); 460
	(food-amount >= feudal-f2))
=>
	(set-goal train-civ-goal -1)
)
#load-if-not-defined DIFFICULTY-EASIEST; test
(defrule
(or	(food-amount >= 1000)
	(and	(food-amount >= 750)
		(unit-type-count-total villager >= 15)))
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-town-size 12)
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(set-strategic-number sn-maximum-wood-drop-distance 15)
;	(chat-to-allies-using-id 8101); "Advance to Feudal Age"
	(research feudal-age)
)
(defrule
(or	(housing-headroom <= 0)
(or	(unit-type-count-total villager >= 30)
(or	(unit-type-count-total villager >= dark-age-villager)
	(up-compare-goal custom-civ-pop >= max-civ))))
	(up-pending-objects c: villager <= 0)
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-maximum-food-drop-distance 15)
;	(chat-to-allies-using-id 8101); "Advance to Feudal Age"
	(research feudal-age)
)
(defrule
	(unit-type-count-total villager >= villager-feudal)
(or	(unit-type-count-total villager > villager-feudal); test
(or	(unit-type-count-total fishing-ship >= 4)
	(map-type yucatan)))
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-maximum-food-drop-distance 15)
;	(chat-to-allies-using-id 8101); "Advance to Feudal Age"
	(research feudal-age)
)
(defrule
	(goal strategy-goal flush)
(or	(unit-type-count-total villager >= villager-flush)
	(up-compare-goal custom-civ-pop >= villager-flush))
;(or	(unit-type-count-total villager >= 25)
;	(up-compare-goal unit-goal != militiaman-line))
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-maximum-food-drop-distance 15)
;	(chat-to-allies-using-id 8101); "Advance to Feudal Age"
	(research feudal-age)
)
(defrule
	(unit-type-count villager >= dark-age-villager)
(or	(food-amount >= 620)
(or	(unit-type-count-total villager >= 29)
	(goal control-goal shot)))
	(up-compare-goal strategy-goal != fast-imp)
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-maximum-food-drop-distance 15)
;	(chat-to-allies-using-id 8101); "Advance to Feudal Age"
	(research feudal-age)
)
(defrule
(or	(unit-type-count villager >= 32)
	(goal unit-goal wonder))
	(unit-type-count villager >= villager-wonder-dark)
	(goal strategy-goal fast-imp)
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-maximum-food-drop-distance 15)
;	(chat-to-allies-using-id 8101); "Advance to Feudal Age"
	(research feudal-age)
)
(defrule
(or	(or	(game-type == 9); 8
		(difficulty != hardest))
	(or	(population-cap == 25)
		(starting-resources != low-resources)))
	(unit-type-count-total villager >= villager-feudal)
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(set-strategic-number sn-maximum-wood-drop-distance 15)
;	(chat-to-allies-using-id 8101); "Advance to Feudal Age"
	(research feudal-age)
)
#else; test
(defrule
(or	(players-current-age any-enemy >= feudal-age)
(or	(players-current-age any-ally >= feudal-age)
	(not	(player-in-game any-human))))
	(can-research feudal-age)
=>
	(set-strategic-number sn-current-age df-transit)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(set-strategic-number sn-maximum-wood-drop-distance 15)
;	(chat-to-allies-using-id 8101); "Advance to Feudal Age"
	(research feudal-age)
)
#end-if; test
(defrule
	(current-age == feudal-age)
(or	(unit-type-count villager >= 15); pretend dark age if feudal age start
	(up-compare-goal custom-civ-pop >= max-civ))
=>
	(set-strategic-number sn-maximum-town-size 10)
	(set-strategic-number sn-current-age feudal)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-minimum-number-hunters 0)
	(disable-self))
(defrule
	(strategic-number sn-current-age >= fc-transit)
(or	(not	(death-match-game))
	(unit-type-count-total villager >= 20)); 30
=>
	(up-assign-builders c: bombard-tower c: 3)
	(up-assign-builders c: castle c: 5)
	(up-assign-builders c: town-center-foundation c: 4)
	(up-assign-builders c: town-center c: 4)
	(up-assign-builders c: archery-range c: 1)
	(up-assign-builders c: stable c: 1)
	(up-assign-builders c: market c: 1)
	(disable-self); does this help performance?
)
#load-if-not-defined WONDER-RACE
#load-if-defined LOW-RESOURCES-START
(defrule
	(game-time < 1500); don't do this lategame
	(research-available castle-age);	(strategic-number sn-current-age == feudal)
(or	(gold-amount <= 100); 200
(or	(and	(goal unit-goal eagle-warrior)
		(up-compare-goal position-goal == flank))
	(goal unit-goal monk)))
	(gold-amount < 200)
	(food-amount >= 720)
(nor	(goal strategy-goal boom)
	(goal control-goal shot))
	(building-type-count town-center >= 1)
	(can-sell-commodity stone)
=>
	(chat-local-to-self "Selling stone.")
	(sell-commodity stone))
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(game-time < 1500); don't do this late game
(nor	(goal strategy-goal sling)
	(and	(goal unit-goal my-unique-unit-line)
		(building-type-count castle == 0)))
	(commodity-selling-price stone > 95)
(or	(wood-amount < 275); prevent sell/buy for TC loop
	(stone-amount >= 200))
	(building-type-count town-center >= 1)
	(can-sell-commodity stone)
=>
	(chat-local-to-self "Selling stone.")
	(sell-commodity stone))
#end-if
(defrule
	(building-type-count-total castle <= 0)
	(stone-amount < castle-stone)
	(building-available castle)
(or	(goal unit-goal my-unique-unit-line)
(or	(goal control-goal my-unique-unit-line)
	(goal uu-up-goal 1)))
	(gold-amount > 300)
(or	(current-age >= imperial-age)
	(and	(gold-amount > 1100)
		(strategic-number sn-current-age >= ci-transit)))
	(can-buy-commodity stone)
=>
	(chat-local-to-self "Buying stone.")
	(buy-commodity stone)
)
(defrule
	(current-age >= imperial-age)
	(game-time > 1500)
	(current-age-time > 180)
	(gold-amount > 900)
	(stone-amount < castle-stone)
	(goal under-attack-goal 0)
	(building-type-count-total castle < 4)
(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(building-type-count-total castle < 2))
(or	(gold-amount > 1600)
	(building-type-count-total castle == 0))
	(can-buy-commodity stone)
=>
	(chat-local-to-self "Buying stone.")
	(buy-commodity stone)
)
(defrule
	(strategic-number sn-resource-control != ri-heresy)
	(game-time < 1800)
	(goal monk-threat-goal 1)
(or	(and	(research-available ri-light-cavalry)
		(gold-amount >= 200))
	(unit-type-count scout-cavalry-line < 6))
	(goal enemy-goal rush)
	(food-amount < 80)
	(building-type-count stable > 0)
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food)
)
(defrule
	(game-time < 1200)
	(building-type-count-total stable < 2)
	(building-type-count-total archery-range < 2)
	(building-type-count-total barracks < 2)
	(wood-amount < 175)
(or	(wood-amount < 100)
	(gold-amount > 600))
	(gold-amount > 500); 350
(or	(unit-type-count-total 219 >= 1)
	(unit-type-count-total 228 >= 1)); dead lumberjacks
	(commodity-buying-price wood < 120)
	(can-buy-commodity wood)
=>
	(chat-local-to-self "Buying wood.")
	(buy-commodity wood)
)

#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined INCAN-CIV
(defrule
	(strategic-number sn-resource-control < 2)
	(goal monk-threat-goal 1)
	(building-type-count stable > 0)
	(building-type-count market > 0)
(or	(unit-type-count scout-cavalry-line < 6)
	(research-available ri-light-cavalry))
=>
	(set-strategic-number sn-resource-control 2)
)
#end-if
#end-if
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(research-available castle-age);	(strategic-number sn-current-age == feudal)
	(goal strategy-goal rush)
(or	(food-amount < 650)
	(gold-amount > 320))
	(food-amount < 800)
	(commodity-buying-price food < 120)
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food)
)
(defrule
(or	(game-time < 2100)
	(research-available ri-horse-collar))
(or	(food-amount < 120)
	(and	(up-compare-goal unit-goal != monk)
		(and	(food-amount < 200)
			(gold-amount > 275))))
	(gold-amount > 200)
	(commodity-buying-price food < 140)
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food)
)
(defrule
	(game-time < 1200)
	(building-type-count-total stable < 2)
	(building-type-count-total archery-range < 2)
	(building-type-count-total barracks < 2)
	(wood-amount < 175)
(or	(wood-amount < 100)
	(gold-amount > 500))
	(gold-amount > 400); 200
(or	(unit-type-count-total 219 >= 1)
	(unit-type-count-total 228 >= 1)); dead lumberjacks
	(commodity-buying-price wood < 120)
	(can-buy-commodity wood)
=>
	(chat-local-to-self "Buying wood.")
	(buy-commodity wood)
)
#end-if
(defrule
	(goal train-civ-goal 1)
	(building-type-count-total town-center >= tc-level-two)
	(gold-amount > 250)
	(food-amount < 50)
	(up-compare-goal custom-civ-pop < max-civ)
	(up-compare-goal custom-civ-pop < 85)
	(commodity-buying-price food < 150)
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food)
)
(defrule
	(strategic-number sn-resource-control != ri-heresy)
	(gold-amount > 500)
	(food-amount < 200)
	(up-compare-goal trade-units >= 15)
	(commodity-buying-price food < 70)
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food)
)
#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(can-sell-commodity stone)
	(stone-amount >= 875); 750
	(food-amount > 2000)
	(wood-amount > 2000)
	(gold-amount < 1000)
	(commodity-selling-price stone > 40)
	(building-type-count-total castle > 1)
=>
	(chat-local-to-self "Selling stone.")
	(sell-commodity stone)
)
#end-if
#end-if ; NOT WONDER-RACE
#load-if-defined DEATH-MATCH
#load-if-not-defined ITALIAN-CIV
#load-if-not-defined PORTUGUESE-CIV
#load-if-not-defined VIETNAMESE-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined ISLANDS-MAP
#load-if-not-defined TEAM-ISLANDS-MAP
(defrule
	(wood-amount >= 3000)
	(can-sell-commodity wood)
	(commodity-selling-price wood >= 42)
=>
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(sell-commodity wood)
	(chat-local-to-self "Selling wood.")
	(disable-self))
#end-if
#end-if
(defrule
	(food-amount >= 3500)
	(can-sell-commodity food)
	(commodity-selling-price food >= 42)
=>
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(sell-commodity food)
	(chat-local-to-self "Selling food.")
	(disable-self))
(defrule
	(up-compare-goal uu-up-goal != 1)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal control-goal != my-unique-unit-line)
	(stone-amount >= 2650)
	(can-sell-commodity stone)
	(commodity-selling-price stone >= 67)
=>
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(sell-commodity stone)
	(chat-local-to-self "Selling stone.")
	(disable-self))
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if

(defrule
	(research-available castle-age)
	(strategic-number sn-current-age >= fc-transit)
=>
	(set-strategic-number sn-current-age feudal)
;	(chat-to-player my-player-number "castle-age research failed!"); castle research failed, set our age-tracking back
)
#load-if-not-defined DIFFICULTY-EASIEST; test
(defrule
	(can-research castle-age)
=>
	(set-strategic-number sn-current-age fc-transit)
	(set-strategic-number sn-maximum-town-size 10)
	(research castle-age)
;	(chat-to-allies-using-id 8102); "Advance to Castle Age"
)
#else; test
(defrule
(or	(players-current-age any-enemy >= feudal-age)
(or	(players-current-age any-ally >= feudal-age)
	(not	(player-in-game any-human))))
	(can-research castle-age)
=>
	(set-strategic-number sn-current-age fc-transit)
	(set-strategic-number sn-maximum-town-size 10)
	(research castle-age)
;	(chat-to-allies-using-id 8102); "Advance to Castle Age"
)
#end-if; test
(defrule
	(current-age == castle-age)
(or	(unit-type-count villager >= 15)
	(up-compare-goal custom-civ-pop >= max-civ))
=>
	(set-strategic-number sn-camp-max-distance castle-age-camp-distance)
	(set-strategic-number sn-maximum-fish-boat-drop-distance -1)
	(set-strategic-number sn-maximum-town-size 12)
	(set-strategic-number sn-maximum-hunt-drop-distance 20)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-wood-dropsite-distance 3)
	(set-strategic-number sn-current-age castle)
	(disable-self))
(defrule
(or	(strategic-number sn-gold-dropsite-distance >= 40); reset distances after forced camp
	(strategic-number sn-stone-dropsite-distance >= 40))
=>
	(set-strategic-number sn-gold-dropsite-distance 3)
	(set-strategic-number sn-stone-dropsite-distance 3)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
)
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined DEATH-MATCH
(defrule
(or	(and	(goal strategy-goal flush)
		(wood-amount > 420))
	(and	(stone-amount == 0); if there are many players selling stone for castle age advance, not everyone gets enough gold
		(and	(gold-amount < 200)
			(food-amount > 750))))
	(research-available castle-age)
	(strategic-number sn-current-age == feudal)
	(commodity-selling-price wood > 40)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood.")
	(sell-commodity wood)
)
#end-if
(defrule
(or	(research-available imperial-age)
	(current-age >= imperial-age))
	(wood-amount > 430)
	(commodity-selling-price wood > 40)
(or	(building-type-count town-center >= tc-level-four)
	(and		(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
		(stone-amount < 50)))
	(cc-players-unit-type-count 0 tree-class > 150)
	(gold-amount < 800)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood.")
	(sell-commodity wood)
)
#end-if
(defrule
	(current-age >= imperial-age)
	(food-amount > 2000)
	(gold-amount < 1250)
	(population > eighty-five-percent-pop)
	(can-sell-commodity food)
	(commodity-buying-price wood < 120); don't run into a buy wood, farm and sell food cycle, it's not worth
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(food-amount < 2000)
	(wood-amount > 2000)
	(cc-players-unit-type-count 0 tree-class > 150)
	(dropsite-min-distance wood < 7)
	(gold-amount < 1200)
	(population > eighty-five-percent-pop)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood.")
	(sell-commodity wood)
)
(defrule
	(current-age >= imperial-age)
	(food-amount > 600)
(or	(and	(commodity-selling-price food > 40)
		(gold-amount < 150))
	(and	(food-amount > 1650)
		(gold-amount < 800)))
	(commodity-buying-price wood < 135)
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food)
)
(defrule
(or	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); don't sell too much on water maps, we can't gatherer on other islands
	(commodity-selling-price wood > 40))
	(cc-players-unit-type-count 0 tree-class > 100)
	(food-amount < 2000); sell food first
	(wood-amount > 1200)
	(dropsite-min-distance wood < 7)
	(gold-amount < 800)
(or	(starting-age < post-imperial-age)
(or	(commodity-selling-price wood > 40)
	(food-amount < 800)))
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood.")
	(sell-commodity wood)
)
(defrule
	(strategic-number sn-resource-control == ri-heresy)
	(wood-amount > 220)
	(gold-amount < 1100)
	(commodity-selling-price wood > 20)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood.")
	(sell-commodity wood)
)
(defrule
	(strategic-number sn-resource-control == ri-heresy)
	(food-amount > 300)
	(gold-amount < 1100)
	(commodity-selling-price food > 20)
	(up-research-status c: ri-light-cavalry < research-pending)
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food)
)
(defrule
	(research-available imperial-age)
	(up-compare-goal custom-civ-pop >= max-civ)
	(players-civilian-population every-ally >= 90); villagers
	(food-amount < 500)
	(gold-amount >= 800)
=>
	(set-goal tribute-goal 3)
)
(defrule
	(strategic-number sn-resource-control != ri-heresy)
	(goal under-attack-goal 1)
	(up-compare-goal custom-civ-pop < fourty-percent-pop)
	(food-amount < 100)
	(gold-amount > 350)
	(commodity-buying-price food < 170)
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food)
	(set-goal tribute-goal 3)
)
(defrule
	(wood-amount >= 275)
	(stone-amount < 100)
	(building-type-count-total town-center == 0)
	(can-buy-commodity stone)
	(unit-type-count villager > 0)
=>
	(chat-local-to-self "Buying stone.")
	(buy-commodity stone)
)
(defrule
	(wood-amount > 375)
	(stone-amount < 100)
	(gold-amount < 300)
	(unit-type-count villager > 0)
	(building-type-count-total town-center == 0)
	(building-type-count market > 0)
=>
	(chat-local-to-self "Selling wood.")
	(release-escrow wood)
	(sell-commodity wood)
)
(defrule
	(wood-amount >= 275)
	(stone-amount < 100)
	(building-type-count-total town-center == 0)
	(unit-type-count villager > 0)
=>
	(set-goal tribute-goal 6)
)
(defrule
	(wood-amount < 275)
	(stone-amount >= 100)
	(building-type-count-total town-center == 0)
	(unit-type-count villager > 0)
=>
	(set-goal tribute-goal 4)
)
(defrule
	(strategic-number sn-resource-control < 2)
	(wood-amount >= 330)
	(stone-amount < 100)
	(up-compare-goal custom-civ-pop < 80)
(or	(current-age-time > 300)
	(gold-amount > 400))
	(current-age >= castle-age)
	(building-type-count-total town-center < 3)
	(up-compare-goal strategy-goal != fast-imp)
	(up-pending-objects c: town-center == 0)
	(can-buy-commodity stone)
=>
	(chat-local-to-self "Buying stone.")
	(buy-commodity stone)
;	(chat-to-player my-player-number "6")
)
(defrule
	(stone-amount < castle-stone)
	(up-compare-goal custom-civ-pop < 80)
	(current-age >= imperial-age)
	(building-type-count-total castle == 0)
	(gold-amount > 400)
	(up-compare-goal trade-units > 4)
(or	(dropsite-min-distance stone > 20)
	(dropsite-min-distance stone < 0))
	(can-buy-commodity stone)
=>
	(chat-local-to-self "Buying stone.")
	(buy-commodity stone)
;	(chat-to-player my-player-number "6")
)
(defrule
	(research-available imperial-age)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-strategic-number sn-current-age castle)
;	(chat-to-player my-player-number "Imperial-age research failed."); imperial research failed, set our age-tracking back
)
(defrule
	(research-available imperial-age)
	(up-compare-goal custom-civ-pop > 95)
	(game-time >= 2400)
(or	(population > seventy-five-percent-pop)
	(population-cap >= 250))
	(population > sixty-percent-pop)
=>
	(set-escrow-percentage food 10)(set-escrow-percentage gold 20)
)
#load-if-not-defined DIFFICULTY-EASIEST; test
(defrule
	(can-research-with-escrow imperial-age)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(set-strategic-number sn-current-age ci-transit)
	(set-strategic-number sn-percent-building-cancellation 75)
;	(chat-to-allies-using-id 8103); "Advance to Imperial Age"
	(research imperial-age)
)
#else; test
(defrule
(or	(players-current-age any-enemy >= feudal-age)
(or	(players-current-age any-ally >= feudal-age)
	(not	(player-in-game any-human))))
	(can-research-with-escrow imperial-age)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(set-strategic-number sn-current-age ci-transit)
	(set-strategic-number sn-percent-building-cancellation 75)
;	(chat-to-allies-using-id 8103); "Advance to Imperial Age"
	(research imperial-age)
)
#end-if; test
(defrule
(or	(population < sixty-percent-pop)
	(military-population < 20))
	(goal under-attack-goal 1)
	(strategic-number sn-military-level < 0)
=>
	(release-escrow food)(release-escrow gold)
)
(defrule
(or	(and	(wood-amount >= 2000)
		(and	(food-amount >= 2000)
			(gold-amount >= 2000)))
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(unit-type-count villager >= 15)
(or	(death-match-game)
(or	(difficulty == easiest)
(or	(difficulty == easy)
	(and	(starting-resources == high-resources)
		(game-time > 90))))))))
	(current-age >= imperial-age)
=>
	(set-strategic-number sn-current-age imperial)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(disable-self))








;================================================================
; Stone in general
;================================================================
(defrule
	(unit-type-count 124 == 0); stone-miners
	(unit-type-count 220 == 0)
	(building-type-count-total town-center <= 0)
	(wood-amount >= 275)
	(stone-amount < 100)
	(can-buy-commodity stone)
=>
	(chat-local-to-self "Buying stone for a towncenter.")
	(buy-commodity stone))
;================================================================
#load-if-not-defined WONDER-RACE
#load-if-not-defined HUN-CIV
(defrule
	(game-time > 1500)
	(strategic-number sn-military-level >= 0)
	(building-type-count-total castle <= 0)
	(stone-amount < castle-stone)
	(gold-amount > 300)
	(strategic-number sn-current-age >= imperial)
(or	(goal unit-goal my-unique-unit-line)
	(gold-amount > 1100))
;	(building-available castle)
	(can-buy-commodity stone)
=>
	(chat-local-to-self "Buying stone for a castle.")
	(buy-commodity stone))
(defrule
	(game-time > 1500)
	(strategic-number sn-military-level >= 0)
	(building-type-count-total castle < 3)
(or	(building-type-count-total castle < 2)
	(gold-amount > 2000))
	(stone-amount < castle-stone)
	(gold-amount > 800); 300 in the rule above
	(strategic-number sn-current-age >= imperial)
;	(building-available castle)
	(commodity-buying-price stone < 600)
	(can-buy-commodity stone)
=>
	(chat-local-to-self "Buying stone for a castle.")
	(buy-commodity stone))
#end-if
#end-if
;================================================================
(defrule
	(game-time > 1500)
	(building-type-count-total castle < 5)
	(stone-amount < castle-stone)
(or	(gold-amount > 8000)
	(and	(up-compare-goal trade-units >= 15)
		(gold-amount > 5000)))
;	(building-available castle)
	(commodity-buying-price stone < 600)
	(can-buy-commodity stone)
=>
	(chat-local-to-self "Buying stone for a castle.")
	(buy-commodity stone))
;================================================================
(defrule
	(game-time > 1500)
	(building-type-count-total castle < 10)
	(stone-amount < castle-stone)
(or	(gold-amount > 10200)
	(and	(up-compare-goal trade-units >= 20)
		(gold-amount > 5500)))
;	(building-available castle)
	(commodity-buying-price stone < 600)
	(can-buy-commodity stone)
=>
;	(chat-local-to-self "Buying stone for a castle.")
	(buy-commodity stone))
;================================================================
(defrule
	(up-compare-goal custom-civ-pop < max-civ)
	(building-type-count-total town-center < 4)
	(current-age >= castle-age)
(or	(strategic-number sn-military-level >= 2)
	(and	(goal strategy-goal boom)
		(or	(unit-type-count-total monk >= 1)
			(building-type-count-total monastery <= 0))))
	(wood-amount >= 275)
	(stone-amount < 100)
	(can-buy-commodity stone)
=>
	(chat-local-to-self "Buying stone for a towncenter.")
	(buy-commodity stone))
;================================================================
(defrule
	(building-type-count-total castle >= 3)
	(building-type-count-total town-center >= 3)
	(players-military-population focus-player >= 45)
	(military-population < 30)
	(gold-amount < 100)
	(commodity-selling-price stone > 200)
	(can-sell-commodity stone)
=>
	(chat-local-to-self "Selling stone.")
	(sell-commodity stone))
;================================================================
; Food excess
;================================================================
#load-if-defined CAPTURE-THE-RELIC
(defrule
	(food-amount >= 200)
	(gold-amount < 100)
	(unit-type-count-total monk <= 0)
	(unit-type-count-total 134 <= 0); dead monk
	(unit-available monk)
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food for a monk.")
	(sell-commodity food))
#end-if
;================================================================
(defrule
	(food-amount > 700)
	(gold-amount < 100)
	(commodity-selling-price food > 40)
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food))
;================================================================
(defrule
	(food-amount > 1000)
	(gold-amount < 100)
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food))
;================================================================
(defrule
	(food-amount > 10000)
	(gold-amount < 200)
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food))
;================================================================
(defrule
	(food-amount > 1500)
	(gold-amount < 300)
	(commodity-selling-price food > 30)
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food))
;================================================================
(defrule
	(food-amount > 2300)
	(gold-amount < 600)
(or	(cc-players-unit-type-count 0 gold-mine < 1)
	(commodity-selling-price food > 40))
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food))
;================================================================
(defrule
	(food-amount > 400)
	(gold-amount < 200)
	(wood-amount < 100)
	(cc-players-unit-type-count 0 tree-class < 30)
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food))
;================================================================
(defrule
	(food-amount > 100)
	(gold-amount < 200)
	(wood-amount < 60)
(or	(cc-players-unit-type-count 0 tree-class < 20)
	(dropsite-min-distance wood > 25))
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food))
;================================================================
; Buying food
;================================================================
#load-if-not-defined WONDER-RACE
(defrule
	(gold-amount > 1000)
	(food-amount < 100)
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food))
#end-if
;================================================================
(defrule
	(gold-amount > 1800)
	(food-amount < 200)
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food))
;================================================================
(defrule
	(gold-amount > 2500)
	(food-amount < 300)
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food))
;================================================================
(defrule
	(food-amount < 4100)
(or	(gold-amount > 10000)
	(and	(up-compare-goal trade-units >= 15)
		(gold-amount > 5200)))
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food))
;================================================================
; Wood excess
;================================================================
#load-if-defined CAPTURE-THE-RELIC
(defrule
	(wood-amount >= 200)
	(gold-amount < 100)
	(unit-type-count-total monk <= 0)
	(unit-type-count-total 134 <= 0); dead monk
	(unit-available monk)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood for a monk.")
	(sell-commodity wood))
#end-if
;================================================================
(defrule
(or	(cc-players-unit-type-count 0 tree-class > 300)
	(dropsite-min-distance wood < 15))
	(wood-amount > 1100)
	(gold-amount < 200)
	(commodity-selling-price wood > 45)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood.")
	(sell-commodity wood))
;================================================================
(defrule
(or	(cc-players-unit-type-count 0 tree-class > 300)
	(dropsite-min-distance wood < 15))
	(wood-amount > 700)
	(gold-amount < 100)
	(commodity-selling-price wood > 30)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood.")
	(sell-commodity wood))
;================================================================
(defrule
(or	(cc-players-unit-type-count 0 tree-class > 300)
	(dropsite-min-distance wood < 15))
	(wood-amount > 900)
	(gold-amount < 100)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood.")
	(sell-commodity wood))
;================================================================
(defrule
(or	(cc-players-unit-type-count 0 tree-class > 300)
	(dropsite-min-distance wood < 15))
	(wood-amount > 1500)
	(gold-amount < 300)
(or	(cc-players-unit-type-count 0 gold-mine < 1)
	(commodity-selling-price wood > 50))
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood.")
	(sell-commodity wood))
;================================================================
; Buying wood
;================================================================
;(defrule
;	(wood-amount < 300)
;	(gold-amount > 1200)
;	(can-buy-commodity wood)
;=>
;	(chat-local-to-self "Buying wood.")
;	(buy-commodity wood))
;================================================================
;(defrule
;	(wood-amount < 200)
;	(gold-amount > 700)
;	(can-buy-commodity wood)
;=>
;	(chat-local-to-self "Buying wood.")
;	(buy-commodity wood))
;================================================================
(defrule
	(wood-amount < 200)
	(gold-amount > 1500)
(or	(players-building-type-count any-ally market >= 1)
	(players-building-type-count any-ally dock >= 1))
	(up-compare-goal trade-units >= 15)
	(can-buy-commodity wood)
=>
	(chat-local-to-self "Buying wood.")
	(buy-commodity wood))
;================================================================
(defrule
	(wood-amount < 60)
	(gold-amount > 400)
;(or	(cc-players-unit-type-count 0 tree-class < 150)
	(dropsite-min-distance wood > 25);)
(or	(gold-amount >= 1500)
	(nor	(research-available castle-age)
		(and	(research-available imperial-age)
			(food-amount >= imperial-food))))
	(can-buy-commodity wood)
=>
	(chat-local-to-self "Buying wood.")
	(buy-commodity wood))
;================================================================
(defrule
	(wood-amount < 100)
	(gold-amount > 600)
;(or	(cc-players-unit-type-count 0 tree-class < 150)
	(dropsite-min-distance wood > 25);)
(or	(gold-amount >= 1500)
	(nor	(research-available castle-age)
		(and	(research-available imperial-age)
			(food-amount >= imperial-food))))
	(can-buy-commodity wood)
=>
	(chat-local-to-self "Buying wood.")
	(buy-commodity wood))
;================================================================
(defrule
	(wood-amount < 200)
	(gold-amount > 800)
;(or	(cc-players-unit-type-count 0 tree-class < 150)
	(dropsite-min-distance wood > 25);)
(or	(gold-amount >= 1500)
	(nor	(research-available castle-age)
		(and	(research-available imperial-age)
			(food-amount >= imperial-food))))
	(can-buy-commodity wood)
=>
	(chat-local-to-self "Buying wood.")
	(buy-commodity wood))
;================================================================
(defrule
	(wood-amount < 4100)
(or	(gold-amount > 10000)
	(and	(up-compare-goal trade-units >= 15)
		(gold-amount > 5200)))
	(can-buy-commodity wood)
=>
	(chat-local-to-self "Buying wood.")
	(buy-commodity wood))
;================================================================
; Trading to accomplish important goals
;================================================================
(defrule
(or	(population >= max-civ)
	(building-type-count blacksmith >= 1))
	(gold-amount > castle-gs)
	(food-amount < castle-food)
	(can-buy-commodity food)
	(research-available castle-age)
=>
	(chat-local-to-self "Buying food to advance to the next age.")
	(buy-commodity food))
;================================================================
(defrule
(or	(population >= max-civ)
	(building-type-count blacksmith >= 1))
	(gold-amount < castle-gold)
	(food-amount > castle-fs)
	(research-available castle-age)
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food to advance to the next age.")
	(sell-commodity food))
;================================================================
(defrule
(or	(population >= max-civ)
	(building-type-count blacksmith >= 1))
(or	(food-amount >= castle-f2)
	(wood-amount >= 600))
(or	(gold-amount < castle-gold)
	(food-amount < castle-food))
	(wood-amount >= 200); 120
	(research-available castle-age)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood to advance to the next age.")
	(sell-commodity wood))
;================================================================
(defrule
(or	(population >= max-civ)
	(goal strategy-goal fast-imp))
	(food-amount >= imperial-fs)
	(gold-amount < imperial-gold)
	(research-available imperial-age)
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food to advance to the next age.")
	(sell-commodity food))
;================================================================
(defrule
(or	(population >= max-civ)
	(goal strategy-goal fast-imp))
	(food-amount < imperial-food)
	(gold-amount >= imperial-gs)
	(research-available imperial-age)
	(can-buy-commodity food)
;(or
	(up-research-status c: ri-hand-cart >= research-pending)
;	(wood-amount <= 100))
=>
	(chat-local-to-self "Buying food to advance to the next age.")
	(buy-commodity food))
;================================================================
(defrule
(or	(population >= max-civ)
	(goal strategy-goal fast-imp))
	(food-amount >= imperial-f2)
	(gold-amount < imperial-gold)
	(wood-amount >= 300); 130
	(research-available imperial-age)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood to advance to the next age.")
	(sell-commodity wood))

















#load-if-not-defined WONDER-RACE
(defrule
	(building-type-count dock > 0)
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(research-available ri-war-galley)
	(goal enemy-boats-goal 1)
(or	(and	(unit-type-count fire-ship-line > 9)
		(up-research-status c: ri-bow-saw >= research-pending))
	(or	(civ-selected viking)
		(unit-type-count galley-line > 6)))
	(food-amount < 230)
=>
	(set-goal train-civ-goal navy)
	(set-strategic-number sn-resource-control navy)
;	(chat-to-player my-player-number "save-resources for navy upgrades")
)
(defrule
	(gold-amount > 300)
	(food-amount < 200)
	(strategic-number sn-resource-control == navy)
(or	(research-available ri-war-galley)
	(research-available ri-careening))
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food)
)
(defrule
(or	(strategic-number sn-resource-control == ri-long-swordsman)
(or	(goal train-civ-goal ri-chain-mail)
	(goal train-civ-goal ri-pikeman)))
	(gold-amount > 300)
	(food-amount < 150)
	(can-buy-commodity food)
=>
	(chat-local-to-self "Buying food.")
	(buy-commodity food)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count skirmisher-line > 7)
	(research-available ri-elite-skirmisher)
(nor	(and	(wood-amount < 150)
		(and	(food-amount > 250); get eskirms over 2nd TC or monastery
			(gold-amount > 250))); but don't slow down all other researches
		(and
			(wood-amount > 400); better spend the wood on buildings as gold is low.
			(gold-amount < 75)))
	(goal strategy-goal flush)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control ri-elite-skirmisher)
;debug;	(chat-to-player my-player-number "Saving resources for ri-elite-skirmisher")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(research-available ri-elite-skirmisher)	
(or	(building-type-count-total town-center >= tc-level-three)
	(strategic-number sn-archer-threat > 0))
	(current-age-time > 120); don't immediately block everything
	(unit-type-count skirmisher-line > 7)
	(building-type-count archery-range > 0)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control ri-elite-skirmisher)
;debug;	(chat-to-player my-player-number "Saving resources for ri-elite-skirmisher")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-archer-threat >= 1)
	(research-available ri-elite-skirmisher)
(or	(nand	(town-under-attack)
		(strategic-number sn-military-level < 0))
	(building-type-count-total town-center >= tc-level-four))
	(building-type-count-total town-center >= tc-level-three)
	(military-population > 14)
	(building-type-count archery-range > 0)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control ri-elite-skirmisher)
;debug;	(chat-to-player my-player-number "Saving resources for ri-elite-skirmisher")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-archer-threat > 1)
	(research-available ri-elite-skirmisher)
(or	(goal unit-goal archer)
	(goal unit-goal cavalry-archer))
(or	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total siege-workshop > 0))
	(military-population > 19)
	(building-type-count archery-range > 0)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control ri-elite-skirmisher)
;debug;	(chat-to-player my-player-number "Saving resources for ri-elite-skirmisher")
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-archer-threat > 1)
	(research-available ri-elite-skirmisher)
(or	(goal unit-goal eagle-warrior)
	(and	(goal unit-goal knight)
		(goal control-goal aggressive-rush)))
	(building-type-count archery-range > 0)
	(military-population > 14)
	(unit-type-count-total mangonel-line == 0)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control ri-elite-skirmisher)
;debug;	(chat-to-player my-player-number "Saving resources for ri-elite-skirmisher")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
(or	(goal unit-goal archer)
	(and	(and	(goal unit-goal knight)
			(goal ranged-unit-type-goal archer))
		(goal anti-cavalry-threat-goal 1)))
	(research-available ri-crossbow)
	(building-type-count archery-range >= 1)
=>
	(set-goal train-civ-goal ri-crossbow)
	(set-strategic-number sn-resource-control ri-crossbow)
;debug;	(chat-to-player my-player-number "Saving resources for ri-crossbow")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(goal ranged-unit-type-goal archer)
(or	(and	(wood-amount > 150)
		(food-amount < 70))
	(goal enemy-goal eagle-warrior))
	(gold-amount > 250)
	(research-available ri-crossbow)
	(building-type-count archery-range >= 1)
=>
	(set-goal train-civ-goal ri-crossbow)
	(set-strategic-number sn-resource-control ri-crossbow)
;debug;	(chat-to-player my-player-number "Saving resources for ri-crossbow")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-current-age >= fc-transit);	(current-age == castle-age)
	(goal train-civ-goal 1)
(or	(and	(goal unit-goal archer)
		(building-type-count archery-range >= 1))
	(and	(unit-type-count ranged-unit-class > 8)
		(goal unit-goal my-unique-unit-line)))
	(research-available ri-fletching)
=>
	(set-goal train-civ-goal ri-fletching)
)
(defrule
	(strategic-number sn-military-level >= 0)
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(unit-type-count ranged-unit-class >= mid-min-number-upgrade)
	(goal strategy-goal flush)
	(not (research-available ri-long-swordsman))
	(research-available ri-bodkin-arrow)
=>
	(set-goal train-civ-goal ri-bodkin-arrow)
	(set-strategic-number sn-resource-control ri-bodkin-arrow)
;debug;	(chat-to-player my-player-number "Saving resources for ri-bodkin-arrow")
)
#load-if-not-defined BRITON-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(goal unit-goal archer)
	(research-available ri-bodkin-arrow)
	(unit-type-count ranged-unit-class >= mid-min-number-upgrade)
	(nand
		(strategic-number sn-cavalry-threat >= 1)
		(unit-type-count spearman-line < 10)
	)
	(nor 
		(research-available ri-crossbow)
		(or
			(goal strategy-goal boom)
			(goal strategy-goal fast-imp)
		)
	)
=>
	(set-goal train-civ-goal ri-bodkin-arrow)
	(set-strategic-number sn-resource-control ri-bodkin-arrow)
;debug;	(chat-to-player my-player-number "Saving resources for ri-bodkin-arrow")
)
#else
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(goal unit-goal archer)
	(research-available ri-bodkin-arrow)
	(unit-type-count ranged-unit-class >= mid-min-number-upgrade)
	(nand
		(strategic-number sn-cavalry-threat >= 1)
		(unit-type-count spearman-line < 10)
	)
	(up-research-status c: ri-crossbow >= research-pending)
	(or
		(building-type-count-total town-center == 1)
		(unit-type-count villager > 55)
	)
=>
	(set-goal train-civ-goal ri-bodkin-arrow)
	(set-strategic-number sn-resource-control ri-bodkin-arrow)
;debug;	(chat-to-player my-player-number "Saving resources for ri-bodkin-arrow")
)
#end-if
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(or
		(unit-type-count-total war-galley > 0)
		(and
			(building-type-count-total stable < 2)
			(unit-type-count cavalry-archer-class >= high-min-number-upgrade)
		)
	)
	(research-available ri-bodkin-arrow)
=>
	(set-goal train-civ-goal ri-bodkin-arrow)
	(set-strategic-number sn-resource-control ri-bodkin-arrow)
;debug;	(chat-to-player my-player-number "Saving resources for ri-bodkin-arrow")
)
#load-if-defined BRITON-CIV
(defrule
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow wood)(release-escrow gold)
	(research my-unique-research)
)
#end-if
#load-if-defined CHINESE-CIV
(defrule
(or	(unit-type-count-total my-unique-unit-line >= 18)
(or	(and	(unit-type-count-total my-unique-unit-line >= 9)
		(up-research-status c: my-unique-unit-upgrade >= research-pending))
	(unit-type-count-total scorpion-line >= 9)))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined FRANKISH-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count-total my-unique-unit-line >= 18)
	(and	(unit-type-count-total my-unique-unit-line >= 9)
		(up-research-status c: my-unique-unit-upgrade >= research-pending)))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined GOTHIC-CIV
(defrule
	(can-research-with-escrow ri-perfusion)
=>
	(release-escrow wood)(release-escrow gold)
	(research ri-perfusion)
)
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(not (research-available ri-elite-eagle-warrior))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
;	(strategic-number sn-current-age >= ci-transit)
	(strategic-number sn-military-level >= -1); 0
	(research-available ri-eagle-warrior)
	(goal unit-goal eagle-warrior)
=>
	(set-strategic-number sn-resource-control ri-eagle-warrior)
;debug;	(chat-to-player my-player-number "Saving resources for ri-eagle-warrior")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
(or	(and	(and	(strategic-number sn-current-age == ci-transit)
			(strategic-number sn-military-level >= 0))
		(nand	(food-amount > 800)
			(gold-amount > 500)))
		(research-available ri-elite-eagle-warrior))
	(goal unit-goal eagle-warrior)
=>
	(set-strategic-number sn-resource-control ri-elite-eagle-warrior)
;debug;	(chat-to-player my-player-number "Saving resources for ri-elite-eagle-warrior")
)
(defrule
	(strategic-number sn-resource-control == ri-elite-eagle-warrior)
	(food-amount < 800)
	(gold-amount > 600)
	(research-available ri-elite-eagle-warrior)
=>
	(set-goal train-civ-goal ri-elite-eagle-warrior)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(research-available ri-arbalest)
(or	(and	(food-amount > 350)
		(gold-amount < 300))
	(food-amount < 350))
	(goal unit-goal archer)
=>
	(set-strategic-number sn-resource-control ri-arbalest)
;debug;	(chat-to-player my-player-number "Saving resources for ri-arbalest")
)
#load-if-not-defined TURKISH-CIV; they get chemistry for free
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(research-available ri-chemistry)
	(and	(strategic-number sn-current-age == ci-transit)
		(or	(food-amount < 300)
			(gold-amount < 200))))
	(building-type-count university > 0)
	(goal unit-goal gunpowder-class)
=>
	(set-strategic-number sn-resource-control ri-chemistry)
;debug;	(chat-to-player my-player-number "Saving resources for ri-chemistry")
)
#end-if
#load-if-not-defined RIVERS-MAP
#load-if-not-defined BALTIC-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(strategic-number sn-resource-control < 2)
(or	(soldier-count >= 45)
	(game-time < 3600))
	(soldier-count > 15)
(nand	(building-type-count dock == 0); we lost the naval battle so train more soldiers to defend
	(and	(current-age >= castle-age)
		(game-time > 1800)))
	(population-cap <= 250)
=>
	(set-strategic-number sn-resource-control 1); train navy only
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(population >= del-civ-pop)
(or	(up-compare-goal custom-civ-pop > 70)
	(game-time > 5400))
	(players-unit-type-count every-enemy fire-ship-line < 12)
	(players-unit-type-count every-enemy galley-line < 12)
	(up-compare-goal navy-count > 40)
(or	(and	(soldier-count > 19)
		(unit-type-count transport-ship < 2))
	(soldier-count < 21))
	(unit-type-count-total villager >= 15)
	(population-cap <= 250)
=>
	(set-goal train-civ-goal -1)
	(delete-unit villager)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(population >= del-civ-pop)
(or	(and	(up-compare-goal navy-count < 45)
		(up-compare-goal navy-count g:< max-navy))
	(and	(unit-type-count transport-ship > 1)
		(or	(dropsite-min-distance wood > 20)
			(cc-players-unit-type-count 0 tree-class < 20))))
	(building-type-count dock > 0)
	(unit-type-count-total villager >= 15)
=>
	(set-goal train-civ-goal -1)
	(delete-unit villager)
)
#end-if
#end-if
#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
	(goal strategy-goal rush)
	(goal unit-goal knight)
	(research-available ri-chain-barding)
	(gold-amount >= 150)
	(goal control-goal shot)
	(strategic-number sn-military-level >= 0)
=>
	(set-goal train-civ-goal ri-chain-barding)
	(set-strategic-number sn-resource-control ri-chain-barding)
;debug;	(chat-to-player my-player-number "Saving resources for ri-chain-barding")
)
#end-if
#end-if
; Place TC upgrades always before villager training or they won't fire unless you reached max villager
(defrule
	(goal train-civ-goal 1)
	(unit-type-count-total villager >= 45)
	(research-available ri-wheel-barrow)
	(strategic-number sn-military-level >= 0)
=>
	(set-goal train-civ-goal 2)
	(set-strategic-number sn-resource-control 3)
;debug;	(chat-to-player my-player-number "Saving resources for ri-wheel-barrow")	
)
(defrule
	(strategic-number sn-resource-control == 3)
	(research-available ri-wheel-barrow)
	(can-buy-commodity food)
(or	(food-amount >= 75)
	(unit-type-count-total villager >= 45))
	(food-amount < 175)
	(wood-amount >= 50); enough wood for it
=>
	(chat-local-to-self "Buying food for wheel-barrow.")
	(buy-commodity food)
	(disable-self)
)
(defrule
	(goal train-civ-goal 1)
	(unit-type-count-total villager >= 60)
(or	(strategic-number sn-military-level >= 0)
	(unit-type-count-total villager >= 75))
	(research-available ri-hand-cart)
=>
;	(set-goal train-civ-goal 2)
	(set-strategic-number sn-resource-control 3)
;debug;	(chat-to-player my-player-number "Saving resources for ri-hand-cart")	
)
(defrule
	(strategic-number sn-resource-control == 3)
	(players-building-type-count any-ally market > 0)
	(unit-type-count-total villager >= 60)
	(research-available ri-hand-cart)
	(food-amount > 300)
	(wood-amount < 150)
=>
	(set-goal tribute-goal 4)
)
(defrule
(nor	(up-compare-goal under-attack-goal == 1)
	(and	(building-type-count-total town-center == 1)
		(up-research-status c: imperial-age == research-pending)))
	(strategic-number sn-resource-control == 3)
	(research-available ri-hand-cart)
	(unit-type-count villager >= 55)
(or	(gold-amount >= 900)
	(unit-type-count villager >= 75))
	(can-buy-commodity food)
	(food-amount < 300)
	(wood-amount >= 200);
=>
;	(set-escrow-percentage wood 100)
;;	(set-escrow-percentage food 100)
	(chat-local-to-self "Buying food for hand-cart.")
	(set-goal train-civ-goal 2);
	(buy-commodity food)
	(disable-self)
)
(defrule
(nor	(up-compare-goal under-attack-goal == 1)
	(and	(building-type-count-total town-center == 1)
		(up-research-status c: imperial-age == research-pending)))
	(strategic-number sn-resource-control == 3)
	(research-available ri-hand-cart)
	(unit-type-count villager >= 55)
(or	(gold-amount >= 900)
	(unit-type-count villager >= 75))
	(can-buy-commodity wood)
	(food-amount >= 300); enough food for it
	(wood-amount >= 100)
	(wood-amount < 200)
=>
;	(set-escrow-percentage wood 100)
;;	(set-escrow-percentage food 100)
	(chat-local-to-self "Buying wood for hand-cart.")
	(buy-commodity wood)
	(disable-self)
)
(defrule
	(strategic-number sn-resource-control == 3)
	(research-available ri-hand-cart)
	(escrow-amount food >= 300)
=>
	(set-escrow-percentage food 0)
)
(defrule
	(strategic-number sn-resource-control == 3)
	(research-available ri-hand-cart)
	(escrow-amount wood >= 200)
=>
	(set-escrow-percentage wood 0)
)
(defrule
	(strategic-number sn-resource-control < 4)
(or	(or	(goal strategy-goal sling)
		(goal strategy-goal flush))
	(population-cap < 75))
	(unit-type-count villager >= 16)
	(can-research ri-wheel-barrow)
=>
	(research ri-wheel-barrow)
	(set-goal train-civ-goal 1)
	(set-strategic-number sn-resource-control 0)
)
(defrule
	(unit-type-count villager >= 29)
	(strategic-number sn-resource-control < 4)
(or	(current-age >= castle-age)
	(unit-type-count villager >= 44))
;(nand	(goal unit-goal my-unique-unit-line)
;	(research-available ri-stone-mining))
	(can-research ri-wheel-barrow)
=>
	(research ri-wheel-barrow)
	(set-goal train-civ-goal 1)
	(set-strategic-number sn-resource-control 0)
)
(defrule
(or	(unit-type-count-total villager >= 55)
	(up-compare-goal custom-civ-pop >= max-civ))
	(can-research-with-escrow ri-hand-cart)
=>
	(release-escrow wood)(set-escrow-percentage wood 0)
	(release-escrow food)(set-escrow-percentage food 0);
	(research ri-hand-cart)
	(set-goal train-civ-goal 1)
	(set-strategic-number sn-resource-control 0)
)
(defrule
	(strategic-number sn-resource-control == 3)
(or	(not (research-available ri-hand-cart))
	(and	(unit-type-count-total villager < 55)
		(up-compare-goal custom-civ-pop < max-civ)))
(or	(research-completed ri-wheel-barrow)
	(and	(research-available ri-wheel-barrow)
		(unit-type-count-total villager < 5)))
=>
	(release-escrow wood)(set-escrow-percentage wood 0)
	(release-escrow food)(set-escrow-percentage food 0);
	(set-strategic-number sn-resource-control 0)
	(set-goal train-civ-goal 1)
)
#end-if ; not WONDER-RACE
(defrule
(or	(or	(research-available ri-wheel-barrow)
		(civ-selected viking))
	(and	(gold-amount > 220)
		(food-amount < 730)))
	(current-age >= feudal-age)
	(can-research ri-loom)
=>
	(research ri-loom)
)
#load-if-not-defined ALL-TECHS-ENABLED
(defrule
	(can-research ri-loom)
(or	(civ-selected mayan)
	(civ-selected chinese))
=>
	(research ri-loom)
)
#end-if
(defrule
(or	(unit-type-count-total villager < 2)
	(and	(strategic-number sn-current-age <= dark)
		(and	(up-research-status c: feudal-age <= research-unavailable)
			(unit-type-count-total villager < 10))))
	(can-train villager)
=>
	(train villager))
#load-if-not-defined WONDER-RACE
(defrule
	(current-age == dark-age)
	(up-compare-goal custom-civ-pop < max-civ); difficulty
	(population < del-civ-pop)
	(building-type-count town-center >= 2)
	(unit-type-count-total villager < 40)
	(food-amount < 420)
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager)
	(set-strategic-number sn-total-number-explorers 2)
	(set-strategic-number sn-number-explore-groups 2))
#end-if
#load-if-defined DARK-AGE-END
(defrule
	(goal train-civ-goal 1)
	(up-compare-goal custom-civ-pop < max-civ)
	(population < del-civ-pop)
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager))
(defrule
	(up-compare-goal unit-goal != militiaman-line)
=>
	(set-goal unit-goal militiaman-line))
#end-if
#load-if-defined FEUDAL-AGE-END
(defrule
	(goal train-civ-goal 1)
	(up-research-status c: ri-wheel-barrow >= research-pending)
	(up-compare-goal custom-civ-pop < max-civ)
	(population < del-civ-pop)
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager))
(defrule
(or	(goal unit-goal scorpion)
(or	(goal unit-goal knight)
(or	(goal unit-goal battle-elephant)
(or	(goal unit-goal gunpowder-class)
	(goal unit-goal my-unique-unit-line)))))
=>
	(set-goal unit-goal militiaman-line))
#end-if
#load-if-defined CASTLE-AGE-END
(defrule
	(goal train-civ-goal 1)
	(up-research-status c: ri-hand-cart >= research-pending)
	(up-compare-goal custom-civ-pop < max-civ)
	(population < del-civ-pop)
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager))
#end-if
#load-if-defined LOW-RESOURCES-START
#load-if-defined DIFFICULTY-HARDEST
#load-if-defined FORTRESS-MAP
(defrule
	(goal train-civ-goal 1)
	(up-compare-goal custom-civ-pop < max-civ)
	(population < del-civ-pop)
(or	(and	(current-age == feudal-age)
		(gold-amount < 170)); 180
	(and	(and	(unit-type-count-total villager < 30); 31
			(food-amount < 900)); 1000
		(current-age == dark-age)))
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager)
)
#end-if
#end-if
#end-if
#load-if-not-defined WONDER-RACE
(defrule
	(goal train-civ-goal 1)
	(current-age == feudal-age)
	(up-compare-goal custom-civ-pop < max-civ); difficulty
	(population < del-civ-pop)
(or	(goal strategy-goal rush)
	(goal strategy-goal boom))
(or	(food-amount < 760)
	(current-age-time < 30))
(or	(current-age-time < 55)
	(starting-age == feudal-age))
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager)
)
#end-if
#load-if-not-defined FEUDAL-AGE-END
; try to push to castle age
(defrule
	(goal strategy-goal flush)
(or	(or	(goal enemy-goal flush)
		(goal enemy-goal eagle-warrior))
	(current-age-time >= 600)); 720
	(research-available castle-age)
	(strategic-number sn-resource-control == 0)
(or	(strategic-number sn-military-level >= 0)
	(and	(strategic-number sn-military-level >= -1)
		(military-population >= 20)))
	(goal under-attack-goal 0)
	(game-time >= 1200); 1300
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for castle-age")
)
(defrule
	(goal strategy-goal flush)
(or	(strategic-number sn-military-level >= 0)
	(and	(strategic-number sn-military-level >= -1)
		(or	(food-amount >= 800)
			(gold-amount >= 200))))
	(research-available castle-age)
	(food-amount >= castle-f2)
(or	(unit-type-count villager >= 30)
	(food-amount >= castle-food))
(or	(gold-amount >= castle-gold)
(or	(unit-type-count female-gold-miner > 0)
(or	(unit-type-count male-gold-miner > 0)
	(up-compare-goal trade-units >= 5))))
	(goal under-attack-goal 0)
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for castle-age")
)
(defrule
	(goal strategy-goal flush)
	(research-available castle-age)
	(up-compare-goal custom-civ-pop >= 55)
(or	(gold-amount >= castle-gold)
(or	(unit-type-count female-gold-miner > 0)
(or	(unit-type-count male-gold-miner > 0)
	(up-compare-goal trade-units >= 5))))
	(goal under-attack-goal 0)
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for castle-age")
)
(defrule
	(goal strategy-goal flush)
	(research-available castle-age)
	(strategic-number sn-resource-control == 2)
	(military-population < 15)
	(goal under-attack-goal 1)
=>
	(set-strategic-number sn-resource-control 0)
)
(defrule
	(goal strategy-goal flush)
	(research-available castle-age)
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(wood-amount < 200)
	(food-amount >= castle-f2)
	(building-type-count-total blacksmith == 0)
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for castle-age")
)
(defrule
	(players-military-population every-enemy < 5)
	(goal strategy-goal flush)
	(goal forward-threat-goal 1)
	(research-available castle-age)
	(strategic-number sn-resource-control == 0)
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for castle-age")
)
(defrule
	(goal strategy-goal flush)
	(research-available castle-age)
	(strategic-number sn-resource-control == 0)
	(goal under-attack-goal 0)
	(game-time >= 1260)
(or	(players-building-type-count target-player watch-tower >= 2)
(or	(players-building-type-count target-player gate >= 2)
	(players-building-type-count target-player stone-wall-line >= 6)))
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for castle-age")
)
#end-if
#load-if-not-defined CASTLE-AGE-END
; try to push to imperial age
(defrule
	(research-available imperial-age)
	(current-age-time > 480); 600
; test	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
(or	(up-compare-goal custom-civ-pop >= 90)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(goal strategy-goal fast-imp)))
(or	(and	(food-amount >= 500)
		(gold-amount >= 400))
	(and	(food-amount >= imperial-f2)
		(gold-amount >= imperial-g2)))
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for imperial-age")
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal rush)
	(building-type-count-total town-center >= tc-level-three)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(players-building-type-count focus-player castle >= 1)
(or	(players-building-type-count focus-player castle >= 2)
(or	(players-building-type-count focus-player gate >= 2)
	(players-building-type-count focus-player stone-wall-line >= 12)))
=>
	(set-goal strategy-goal boom)
	(disable-self))
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal rush)
	(building-type-count-total town-center >= tc-level-three)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(players-current-age target-player >= imperial-age)
	(players-building-type-count focus-player castle >= 1)
(or	(players-building-type-count focus-player castle >= 2)
(or	(players-building-type-count focus-player gate >= 2)
	(players-building-type-count focus-player stone-wall-line >= 12)))
=>
	(set-goal strategy-goal fast-imp)
	(disable-self))
(defrule
	(research-available imperial-age)
	(strategic-number sn-resource-control == 0)
(or	(building-type-count town-center >= tc-level-two)
	(strategic-number sn-military-level >= 3))
	(strategic-number sn-military-level >= 0)
(or	(up-compare-goal custom-civ-pop >= 120)
(or	(and	(up-compare-goal custom-civ-pop >= 110)
		(strategic-number sn-military-level >= 1))
	(and	(up-compare-goal custom-civ-pop >= 100)
		(strategic-number sn-military-level >= 2))))
(nor	(up-compare-goal under-attack-goal != 0)
	(enemy-buildings-in-town))
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for imperial-age")
)
(defrule
	(research-available imperial-age)
	(strategic-number sn-resource-control == 0)
	(building-type-count town-center >= tc-level-two)
	(population > 140)
(or	(population >= 160)
(or	(population >= max-civ-pop)
	(up-compare-goal custom-civ-pop >= max-civ)))
(or	(strategic-number sn-military-level >= 0)
	(and	(food-amount >= imperial-f2)
		(gold-amount >= imperial-g2)))
(nor 	(up-compare-goal under-attack-goal != 0)
	(and	(players-current-age focus-player == imperial-age)
		(strategic-number sn-military-level >= 2)))
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for imperial-age")
)
(defrule
	(research-available imperial-age)
	(strategic-number sn-resource-control == 0)
(or	(population >= 135); 140
	(unit-type-count-total eagle-warrior-line >= 38))
(or	(strategic-number sn-military-level >= -1)
	(unit-type-count cavalry-unit-class >= 16)); 20
	(goal under-attack-goal 0)
(or	(goal strategy-goal fast-imp)
	(and	(goal strategy-goal boom)
		(or	(goal unit-goal knight)
			(goal unit-goal battle-elephant))))
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for imperial-age")
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(research-available imperial-age)
	(strategic-number sn-resource-control == 0)
	(research-available imperial-age)
	(goal under-attack-goal 0)
	(up-allied-goal every-ally under-attack-goal != 1)
(or	(up-compare-goal custom-civ-pop >= 90)
	(up-compare-goal custom-civ-pop >= max-civ))
(or	(goal strategy-goal fast-imp)
	(goal strategy-goal boom))
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(unit-type-count cavalry-class >= 5)
(or	(goal unit-goal battle-elephant)
	(unit-type-count cavalry-class >= 11))
=>
	(set-strategic-number sn-resource-control 2)
;	(chat-to-player my-player-number "save-resources = imperial-age")
)
#end-if
(defrule
	(research-available imperial-age)
	(strategic-number sn-resource-control == 0)
	(goal unit-goal monk)
	(unit-type-count-total monastery-class >= 20)
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for imperial-age")
)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(defrule
	(strategic-number sn-resource-control == 0)
(or	(and	(research-available ri-cavalier)
		(or	(goal unit-goal knight-line)
			(unit-type-count knight-line > 19)))
	(and	(research-available ri-hussar)
		(nor	(goal unit-goal militiaman-line)
			(civ-selected magyar))))
	(up-research-status c: ri-champion < research-pending)
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(strategic-number sn-resource-control == 0)
(or	(and	(or	(research-available ri-two-handed-swordsman)
			(research-available ri-champion))
		(or	(goal unit-goal militiaman-line)
			(goal control-goal militiaman-line)))
	(and	(goal ranged-unit-type-goal archer)
		(research-available ri-arbalest)))
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-current-age >= ci-transit)
(or	(or	(research-available ri-blast-furnace)
		(research-available ri-plate-mail))
	(research-available ri-chain-mail))
	(unit-type-count infantry-class > 12)
(or	(food-amount < 350)
	(gold-amount < 225))
=>
	(set-strategic-number sn-resource-control 2)
)
#load-if-not-defined AZTEC-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-current-age >= ci-transit)
(or	(or	(research-available ri-blast-furnace)
		(research-available ri-plate-barding))
	(research-available ri-chain-barding))
	(unit-type-count cavalry-unit-class > 12)
(or	(food-amount < 350)
	(gold-amount < 225))
=>
	(set-strategic-number sn-resource-control 2)
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-resource-control == 0)
	(current-age == castle-age)
	(building-type-count stone-wall-line > 5)
	(goal unit-goal knight)
(or	(strategic-number sn-military-level >= 0)
	(and	(unit-type-count cavalry-unit-class > 5)
		(goal under-attack-goal 0)))
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-current-age >= fc-transit)
	(game-time < 1800)
	(building-type-count stone-wall-line > 5)
	(goal unit-goal skirmisher)
	(building-type-count town-center < 3)
=>
	(set-strategic-number sn-resource-control 2)
)
#end-if
(defrule
	(strategic-number sn-resource-control == 0)
	(current-age == castle-age)
	(up-compare-goal custom-civ-pop > 90)
	(goal unit-goal knight)
(or	(and	(strategic-number sn-military-level >= 0)
		(unit-type-count cavalry-unit-class > 19))
	(population >= eighty-five-percent-pop))
=>
	(set-strategic-number sn-resource-control 2)
)
#load-if-defined PERSIAN-CIV
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-current-age >= ci-transit)
	(goal unit-goal my-unique-unit-line)
	(building-type-count castle > 0)
(or	(and	(up-research-status c: my-unique-unit-upgrade < research-pending); ri-elite-war-elephant
		(or	(food-amount < 1600)
			(gold-amount < 1200)))
	(research-available my-unique-unit-upgrade))
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for ewe.")
)
#end-if
#load-if-not-defined INDIAN-CIV
#load-if-not-defined AZTEC-CIV
#load-if-not-defined BERBERS-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BURMESE-CIV
;#load-if-not-defined BYZANTINE-CIV
;#load-if-not-defined CELTIC-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined ETHIOPIAN-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined ITALIAN-CIV
#load-if-not-defined KHMER-CIV
;#load-if-not-defined MAGYAR-CIV
#load-if-not-defined MALAY-CIV
#load-if-not-defined MALIAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined PORTUGUESE-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined VIETNAMESE-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(strategic-number sn-resource-control == 0)
	(strategic-number sn-current-age >= imperial); ci-transit
	(goal unit-goal knight)
	(unit-type-count knight-line > 16)
(or	(and	(up-research-status c: ri-cavalier == research-pending)
		(or	(food-amount < 1300)
			(gold-amount < 750)))
	(research-available ri-paladin))
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for ri-paladin")
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control == 0)
(or	(research-available ri-bracer)
	(research-available ri-ring-archer-armor))
(or	(food-amount < 300)
	(gold-amount < 250))
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(goal train-civ-goal ri-crossbow)
	(strategic-number sn-resource-control == ri-crossbow)
	(up-research-status c: ri-elite-skirmisher == research-pending)
	(building-type-count archery-range == 1)
=>
	(set-goal train-civ-goal 1)
	(set-strategic-number sn-resource-control 0)
)
(defrule
	(strategic-number sn-resource-control == 0)
	(population > seventy-five-percent-pop)
	(unit-type-count-total scorpion-line > 9)
(or	(research-available ri-heavy-scorpion)
	(and	(civ-selected celtic)
		(and	(building-type-count castle > 0)
			(research-available my-unique-research))))
=>
	(set-strategic-number sn-resource-control 2)
	(set-goal save-wood-goal 1)
)
#load-if-not-defined MAYAN-CIV
#load-if-not-defined KOREAN-CIV
(defrule
	(goal uu-up-goal 1)
	(research-available my-unique-unit-upgrade)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
(or	(population >= eighty-five-percent-pop)
(or	(unit-type-count-total my-unique-unit-line >= 22)
(or	(unit-type-count-total huskarl-set >= 22)
(or	(unit-type-count-total my-unique-unit-line >= twenty-five-percent-pop)
(or	(unit-type-count-total huskarl-set >= twenty-five-percent-pop)
	(goal uu-up-goal 1))))))))
	(building-type-count castle > 0)
(or	(gold-amount >= max-gold-escrow)
(or	(or	(unit-type-count female-gold-miner > 0); don't start escrowing when gold income is low
		(unit-type-count male-gold-miner > 0))
	(up-compare-goal trade-units > 5)))
=>
	(set-escrow-percentage food 30)(set-escrow-percentage gold 30)
	(set-goal escrow-purpose-goal my-unique-unit-line))
#else
(defrule
	(goal uu-up-goal 1)
	(research-available my-unique-unit-upgrade)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
(or	(population >= eighty-five-percent-pop)
(or	(unit-type-count-total my-unique-unit-line >= 22)
(or	(unit-type-count-total huskarl-set >= 22)
(or	(unit-type-count-total my-unique-unit-line >= twenty-five-percent-pop)
(or	(unit-type-count-total huskarl-set >= twenty-five-percent-pop)
	(goal uu-up-goal 1))))))))
	(building-type-count castle > 0)
(or	(gold-amount >= max-gold-escrow)
(or	(or	(unit-type-count female-gold-miner > 0); don't start escrowing when gold income is low
		(unit-type-count male-gold-miner > 0))
	(up-compare-goal trade-units > 5)))
=>
	(set-escrow-percentage wood 30)(set-escrow-percentage gold 30)
	(set-goal escrow-purpose-goal my-unique-unit-line))
#end-if
#else
(defrule
	(goal uu-up-goal 1)
	(research-available my-unique-unit-upgrade)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
(or	(population >= eighty-five-percent-pop)
(or	(unit-type-count-total my-unique-unit-line >= 22)
(or	(unit-type-count-total huskarl-set >= 22)
(or	(unit-type-count-total my-unique-unit-line >= twenty-five-percent-pop)
(or	(unit-type-count-total huskarl-set >= twenty-five-percent-pop)
	(goal uu-up-goal 1))))))))
	(building-type-count castle > 0)
=>
	(set-escrow-percentage wood 30)(set-escrow-percentage food 30)
	(set-goal escrow-purpose-goal my-unique-unit-line))
#end-if
#load-if-not-defined AZTEC-CIV ; Jaguars aren't that useful in trash wars
#load-if-not-defined BRITON-CIV ; Same as most ranged uu
#load-if-not-defined CHINESE-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined KOREAN-CIV
(defrule
	(goal escrow-purpose-goal my-unique-unit-line)
	(gold-amount < max-gold-escrow)
	(unit-type-count female-gold-miner == 0)
	(unit-type-count male-gold-miner == 0)
	(up-compare-goal trade-units == 0)
=>
	(release-escrow food)
	(set-escrow-percentage food 0); pile up relic/market gold first, as this will take long
)
(defrule
	(goal escrow-purpose-goal my-unique-unit-line)
	(escrow-amount wood >= max-wood-escrow)
=>
	(set-escrow-percentage wood 0))
(defrule
(or	(and	(goal escrow-purpose-goal my-unique-unit-line)
		(or	(escrow-amount food >= max-food-escrow)
			(population < max-civ-pop)))
		(and	(research-available imperial-age)
			(escrow-amount food >= imperial-food)))
=>
	(set-escrow-percentage food 0))
(defrule
(or	(and	(goal escrow-purpose-goal my-unique-unit-line)
		(escrow-amount gold >= max-gold-escrow))
	(and	(research-available imperial-age)
		(escrow-amount gold >= imperial-gold)))
=>
;	(set-escrow-percentage food 30)
	(set-escrow-percentage gold 0))
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(goal escrow-purpose-goal my-unique-unit-line)
(or	(or	(not (research-available my-unique-unit-upgrade))
		(building-type-count castle == 0)); not included in check above
	(and	(population < eighty-five-percent-pop)
		(goal under-attack-goal 1)))
=>
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(release-escrow food)(release-escrow gold)
	(set-goal escrow-purpose-goal 0)
)
#load-if-defined SPANISH-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count monastery-class > 12)
	(up-research-status c: ri-theocracy >= research-pending)
	(research-available ri-inquisition)
	(building-type-count castle > 0)
=>
	(set-strategic-number sn-resource-control ri-inquisition)
;debug;	(chat-to-player my-player-number "Saving resources for ri-inquisition")
)
#end-if
#load-if-defined SLAVIC-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count monastery-class > 12)
(or	(strategic-number sn-current-age >= ci-transit)
	(goal hostilities-goal 1))
	(building-type-count castle > 0)
	(research-available ri-orthodoxy)
=>
	(set-strategic-number sn-resource-control ri-orthodoxy)
;debug;	(chat-to-player my-player-number "Saving resources for ri-orthodoxy")
)
#end-if
(defrule
	(strategic-number sn-resource-control == 0)
(or	(or	(goal unit-goal monk)
		(goal ranged-unit-type-goal monk))
	(players-unit-type-count focus-player war-elephant-line > 12))
	(unit-type-count-total monastery-class > 5)
(or	(or	(research-available ri-theocracy)
		(research-available ri-illumination))
	(research-available ri-block-printing))
=>
	(set-strategic-number sn-resource-control 2))
(defrule
	(current-age >= imperial-age)
	(unit-type-count monastery-class > 20)
	(strategic-number sn-resource-control == 0)
	(goal unit-goal monk)
	(gold-amount < 300)
	(unit-type-count-total trebuchet-set == 0)
	(unit-available trebuchet)
	(building-type-count castle > 0)
=>
	(set-strategic-number sn-resource-control 2))
(defrule
	(current-age >= imperial-age)
	(unit-type-count-total monastery-class > 20)
	(goal unit-goal monk)
	(wood-amount < 200)
	(unit-type-count-total trebuchet-set == 0)
	(unit-available trebuchet)
	(building-type-count castle > 0)
=>
	(set-goal save-wood-goal 1))
(defrule
	(food-amount >= 175)
(or	(goal train-civ-goal ri-crossbow)
	(and	(food-amount >= 265)
		(goal train-civ-goal ri-pikeman)))
=>
	(set-goal train-civ-goal 1))
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-resource-control < 2)
	(up-compare-goal custom-civ-pop < fourty-percent-pop)
	(population >= eighty-five-percent-pop)
	(game-time < 1200)
=>
	(set-strategic-number sn-resource-control 2))
#load-if-defined DARK-AGE-START
(defrule
	(strategic-number sn-resource-control > 2)
	(food-amount > 2000)
	(gold-amount > 2000)
	(wood-amount > 2000)
=>
	(set-strategic-number sn-resource-control 0); resource control not needed in DM
	(set-goal save-wood-goal 0))
#end-if
#end-if
#end-if; easy
#end-if; easiest
#end-if; was not castle-age-end
#load-if-not-defined WONDER-RACE
(defrule
	(research-completed ri-coinage)
	(food-amount > 150)
	(taunt-detected any-human-ally 38)
=>
	(tribute-to-player this-any-ally food 100)
	(chat-local-to-self "Tribute 100 food to an ally."))
(defrule
(or	(building-type-count town-center > 0)
	(wood-amount >= 375))
	(research-completed ri-coinage)
	(wood-amount > 200)
	(taunt-detected any-human-ally 38)
=>
	(tribute-to-player this-any-ally wood 100)
	(chat-local-to-self "Tribute 100 wood to an ally."))
(defrule
	(research-completed ri-coinage)
	(gold-amount > 150)
	(taunt-detected any-human-ally 38)
=>
	(tribute-to-player this-any-ally gold 100)
	(chat-local-to-self "Tribute 100 gold to an ally."))
(defrule
	(research-completed ri-coinage)
	(stone-amount > 220)
	(taunt-detected any-human-ally 38)
=>
	(tribute-to-player this-any-ally stone 100)
	(chat-local-to-self "Tribute 100 stone to an ally."))
(defrule
	(game-time > 1200)
	(building-type-count town-center > 0)
(or	(unit-type-count villager < 15)
	(and	(players-civilian-population any-ally > fourty-percent-pop)
		(or	(unit-type-count villager < twenty-five-percent-pop)
			(players-population any-ally > eighty-five-percent-pop))))
	(unit-type-count villager < fourty-percent-pop)
	(food-amount < 250)
	(goal under-attack-goal 0)
=>
	(set-goal tribute-goal 3)
)
(defrule
	(building-type-count town-center >= tc-level-two)
	(players-building-type-count any-ally market > 0)
	(game-time > 1800)
(or	(unit-type-count villager < 90)
	(strategic-number sn-resource-control == 2))
	(food-amount < 100)
	(gold-amount > 200)
=>
	(set-goal tribute-goal 3)
)
(defrule
	(building-type-count town-center >= tc-level-two)
	(players-building-type-count any-ally market > 0)
	(strategic-number sn-resource-control == 2)
	(food-amount > 500)
	(gold-amount < 200)
=>
	(set-goal tribute-goal 5)
)
(defrule
	(players-building-type-count any-ally market > 0)
	(strategic-number sn-resource-control < 4)
	(food-amount > 500)
	(gold-amount > 400)
	(wood-amount < 150)
=>
	(set-goal tribute-goal 4)
)
(defrule
	(taunt-detected any-ally 3)
	(food-amount > 1800)
	(strategic-number sn-resource-control < 1)
	(research-completed ri-banking)
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 3)
	(tribute-to-player this-any-ally food 500)
	(chat-to-player-using-id this-any-ally 22077); "39 Here is some food!"
	(chat-local-to-self "Tribute 500 food to an ally."))
(defrule
	(taunt-detected any-ally 3)
	(food-amount > 300)
(or	(research-completed ri-banking)
	(food-amount > 500))
	(strategic-number sn-resource-control < 1)
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 3)
	(tribute-to-player this-any-ally food 100)
	(chat-to-player-using-id this-any-ally 22077); "39 Here is some food!"
	(chat-local-to-self "Tribute 100 food to an ally."))
(defrule
	(taunt-detected any-ally 4)
	(wood-amount > 1100)
	(goal save-wood-goal 0)
	(research-completed ri-banking)
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 4)
	(tribute-to-player this-any-ally wood 500)
	(chat-to-player-using-id this-any-ally 22076); "39 Here is some wood!"
	(chat-local-to-self "Tribute 500 wood to an ally."))
(defrule
	(taunt-detected any-ally 4)
	(wood-amount > 300)
(or	(goal save-wood-goal 0)
	(wood-amount > 1300)); just to be safe
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 4)
	(tribute-to-player this-any-ally wood 100)
	(chat-to-player-using-id this-any-ally 22076); "39 Here is some wood!"
	(chat-local-to-self "Tribute 100 wood to an ally."))
(defrule
	(taunt-detected any-ally 5)
	(gold-amount > 1500)
	(research-completed ri-banking)
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 5)
	(tribute-to-player this-any-ally gold 500)
	(chat-to-player-using-id this-any-ally 22078); "39 Here is some gold!"
	(chat-local-to-self "Tribute 500 gold to an ally."))
(defrule
	(taunt-detected any-ally 5)
	(strategic-number sn-resource-control < 1)
	(gold-amount > 300)
(or	(research-completed ri-banking)
	(gold-amount > 800))
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 5)
	(tribute-to-player this-any-ally gold 100)
	(chat-to-player-using-id this-any-ally 22078); "39 Here is some gold!"
	(chat-local-to-self "Tribute 100 gold to an ally."))
(defrule
	(taunt-detected any-ally 6)
	(building-type-count-total town-center > 0)
(or	(stone-amount > 750)
(or	(building-type-count-total castle >= 4)
	(and	(players-building-type-count any-ally town-center == 0)
		(stone-amount >= 130))))
	(building-type-count market > 0)
=>
	(acknowledge-taunt this-any-ally 6)
	(tribute-to-player this-any-ally stone 100)
	(chat-to-player-using-id this-any-ally 22079); "39 Here is some stone!"
	(chat-local-to-self "Tribute 100 stone to an ally."))
(defrule
(or	(taunt-detected any-ally 3)
(or	(taunt-detected any-ally 4)
(or	(taunt-detected any-ally 5)
	(taunt-detected any-ally 6))))
	(building-type-count market <= 0)
=>
	(chat-to-player-using-id this-any-ally 22164); "39 But sire! I have no market!"
	(acknowledge-taunt every-ally 3)
	(acknowledge-taunt every-ally 4)
	(acknowledge-taunt every-ally 5)
	(acknowledge-taunt every-ally 6)
)
(defrule
(or	(taunt-detected any-ally 3)
(or	(taunt-detected any-ally 4)
(or	(taunt-detected any-ally 5)
	(taunt-detected any-ally 6))))
=>
	(chat-to-allies-using-id 22163); "39 I regret, sire, that I have nothing to spare."
;	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
;hm	(chat-to-player-using-id this-any-ally 22118); "Alas, I cannot help that at this time."
	(acknowledge-taunt every-ally 3)
	(acknowledge-taunt every-ally 4)
	(acknowledge-taunt every-ally 5)
	(acknowledge-taunt every-ally 6)
)


(defrule; auto-tribute - what a time to be alive
(or	(building-type-count market < 1)
(or	(not	(player-in-game any-ally))
;(or	(strategic-number sn-current-age < imperial)
(or	(and	(food-amount < 2400)
		(and	(wood-amount < 2400)
			(gold-amount < 2400)))
(or	(up-compare-goal under-attack-goal >= 1)
	(up-research-status c: ri-banking < research-complete)))));)
=>
	(up-jump-rule 6)); 7
(defrule
	(true)
=>
	(up-modify-goal math-goal s:= sn-focus-player-number)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal math-goal2 0))

(defrule
	(building-type-count market >= 1)
	(food-amount >= 2400)
	(players-population focus-player > 30)
(or	(players-unit-type-count focus-player villager >= 20)
	(players-building-type-count focus-player town-center >= 1))
	(stance-toward focus-player ally)
	(player-in-game focus-player)
	(strategic-number sn-focus-player-number != my-player-number)
	(up-allied-resource-amount focus-player food < 1000)
=>
	(tribute-to-player focus-player food 1000)
	(chat-to-player-using-id focus-player 22077); "Here is some food!"
	(chat-local-to-self "Tributing 1000 food to an ally.")
	(set-goal math-goal2 1))
(defrule
	(building-type-count market >= 1)
	(wood-amount >= 2400)
	(players-population focus-player > 30)
(or	(players-unit-type-count focus-player villager >= 20)
	(players-building-type-count focus-player town-center >= 1))
	(stance-toward focus-player ally)
	(player-in-game focus-player)
	(strategic-number sn-focus-player-number != my-player-number)
	(up-allied-resource-amount focus-player wood < 1000)
=>
	(tribute-to-player focus-player wood 1000)
	(chat-to-player-using-id focus-player 22076); "Here is some wood!"
	(chat-local-to-self "Tributing 1000 wood to an ally.")
	(set-goal math-goal2 1))
(defrule
	(building-type-count market >= 1)
	(gold-amount >= 2400)
	(players-population focus-player > 30)
(or	(players-unit-type-count focus-player villager >= 20)
	(players-building-type-count focus-player town-center >= 1))
	(stance-toward focus-player ally)
	(player-in-game focus-player)
	(strategic-number sn-focus-player-number != my-player-number)
	(up-allied-resource-amount focus-player gold < 1000)
=>
	(tribute-to-player focus-player gold 1000)
	(chat-to-player-using-id focus-player 22078); "Here is some gold!"
	(chat-local-to-self "Tributing 1000 gold to an ally.")
	(set-goal math-goal2 1))
;(defrule
;	(building-type-count market >= 1)
;	(stone-amount >= 260)
;	(building-type-count-total castle >= 5)
;	(players-population focus-player > 30)
;(or	(players-unit-type-count focus-player villager >= 20)
;	(players-building-type-count focus-player town-center >= 1))
;	(stance-toward focus-player ally)
;	(player-in-game focus-player)
;	(strategic-number sn-focus-player-number != my-player-number)
;	(up-allied-resource-amount focus-player stone < 100)
;=>
;	(tribute-to-player focus-player stone 100)
;	(chat-to-player-using-id focus-player 22079); "Here is some stone!"
;	(chat-local-to-self "Tributing 100 stone to an ally.")
;	(set-goal math-goal2 1))
(defrule
	(up-compare-goal math-goal2 != 1)
	(strategic-number sn-focus-player-number < 8)
=>
	(up-modify-sn sn-focus-player-number c:+ 1)
	(up-jump-rule -4)); 5
(defrule
	(true)
=>
	(up-modify-sn sn-focus-player-number g:= math-goal)); end jump



(defrule
	(up-compare-goal strategy-goal != sling)
	(taunt-detected any-ally 130)
	(wood-amount < 400)
	(gold-amount > 800)
	(food-amount > 1000)
=>
	(chat-to-allies-using-id 22123)
	(acknowledge-taunt this-any-ally 130))
(defrule
	(up-compare-goal strategy-goal != sling)
(nand	(goal under-attack-goal 1)
	(population < 45))
	(taunt-detected any-ally 130)
(or	(food-amount < 1000)
(or	(wood-amount < 800)
	(gold-amount < 700)))
	(building-type-count-total town-center > 0)
=>
	(chat-to-allies "1")
	(acknowledge-taunt this-any-ally 130)
	(acknowledge-taunt my-player-number 1))
(defrule
	(taunt-detected any-ally 130); if we need them, the other rules above would've triggered
=>
	(chat-to-allies "2")
	(acknowledge-taunt this-any-ally 130)
	(acknowledge-taunt my-player-number 2))
(defrule
	(up-timer-status tribute-timer != timer-running)
	(goal tribute-goal 3)
	(players-building-type-count any-ally market > 0)
	(up-allied-resource-amount any-ally food > 400)
=>
	(enable-timer tribute-timer 120); 30
	(chat-to-allies-using-id 22122))
(defrule
	(up-timer-status tribute-timer != timer-running)
	(goal tribute-goal 4)
	(players-building-type-count any-ally market > 0)
(or	(up-allied-resource-amount any-ally wood > 400)
	(building-type-count-total town-center < 1))
=>
	(enable-timer tribute-timer 120); 30
	(chat-to-allies-using-id 22123))
(defrule
	(up-timer-status tribute-timer != timer-running)
	(goal tribute-goal 5)
	(players-building-type-count any-ally market > 0)
	(up-allied-resource-amount any-ally gold > 400)
=>
	(enable-timer tribute-timer 120); 30
	(chat-to-allies-using-id 22124))
(defrule
	(up-timer-status tribute-timer != timer-running)
	(goal tribute-goal 6)
	(players-building-type-count any-ally market > 0)
;(or	(up-allied-resource-amount any-ally stone > 100)
;	(building-type-count-total town-center < 1))
=>
	(enable-timer tribute-timer 120); 30
	(chat-to-allies-using-id 22125))
#end-if ; NOT WONDER-RACE

;********************BASICS ********************

(defrule
	(resource-found food)
;	(goal buildmill yes)
	(building-type-count town-center >= 1)
	(game-time >= 120)
(or	(unit-type-count-total villager >= 18)
(or	(wood-amount >= 200)
	(building-type-count-total lumber-camp >= 1)))
	(building-type-count-total mill < 1)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mill)
;	(chat-local-to-self "Building emergency mill. 1")
	(disable-self))
(defrule
;	(goal buildmill yes)
	(building-type-count town-center >= 1)
	(game-time >= 125)
	(military-population >= 1); scout
(or	(unit-type-count-total villager >= 18)
(or	(wood-amount >= 200)
	(building-type-count-total lumber-camp >= 1)))
	(building-type-count-total mill < 1)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-mill-max-distance 20)
	(build mill)
;	(chat-local-to-self "Building emergency mill. 2")
	(disable-self))
(defrule
;	(goal buildmill yes)
	(building-type-count town-center >= 1)
	(game-time >= 130)
	(military-population <= 0); no scout
(or	(unit-type-count-total villager >= 18)
(or	(wood-amount >= 200)
	(building-type-count-total lumber-camp >= 1)))
	(building-type-count-total mill < 1)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-mill-max-distance 10)
	(build mill)
;	(chat-local-to-self "Building emergency mill. 3")
	(disable-self))
(defrule
;	(goal buildmill yes)
	(building-type-count town-center >= 1)
	(game-time >= 150)
(or	(unit-type-count-total villager >= 18)
(or	(wood-amount >= 200)
	(building-type-count-total lumber-camp >= 1)))
	(building-type-count-total mill < 1)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-mill-max-distance 8)
	(build mill)
;	(chat-local-to-self "Building emergency mill. 4")
	(disable-self))
(defrule
	(strategic-number sn-current-age == dark)
	(building-type-count town-center > 0)
	(building-type-count-total mill == 0)
	(resource-found food)
(or	(wood-amount >= 300)
(or	(or	(unit-type-count male-forager > 0)
		(unit-type-count female-forager > 0))
	(and	(death-match-game)
		(current-age == dark-age))))
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mill)
)
(defrule
	(current-age == dark-age)
	(building-type-count town-center > 0)
	(building-type-count-total mill == 0); emergency mill for no berries
	(game-time > 180)
(or	(unit-type-count-total villager >= 20); some other foood sources available
	(and	(strategic-number sn-mill-max-distance > 28)
		(building-type-count lumber-camp > 0)))
(or	(wood-amount > 200)
	(building-type-count lumber-camp > 0))
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mill)
)
#load-if-defined SCANDANAVIA-MAP
(defrule
	(building-type-count town-center > 0)
	(strategic-number sn-current-age == dark)
	(dropsite-min-distance deer-hunting >= 9)
	(dropsite-min-distance deer-hunting < 38)
	(can-build mill)
	(building-type-count-total mill < 1)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1); test
	(set-strategic-number sn-preferred-mill-placement 1); mill deer
	(build mill)
)
#end-if
#load-if-not-defined DEATH-MATCH
(defrule
	(building-type-count town-center >= 1); this idea from ER rarely fails
	(game-time >= 15); increase lumber camp distance when we still found no wood after 15s
(or ; so the scout has some time to find a forest
	(not (resource-found wood))
	(building-type-count-total stone-wall-line > 15)); also increase in walled maps, as we may find the forest with the wall
	(strategic-number sn-mill-max-distance < 28)
=>
	(set-strategic-number sn-camp-max-distance 18)
	(disable-self)
)
(defrule
	(building-type-count town-center >= 1)
	(game-time >= 18); and even further when still no wood after 18s
	(not (resource-found wood))
	(strategic-number sn-mill-max-distance < 28)
=>
	(set-strategic-number sn-camp-max-distance 21)
	(disable-self)
)
(defrule
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total stone-wall-line < 15)
(or	(dropsite-min-distance gold > 12)
	(building-type-count-total mining-camp > 0))
=>
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(set-strategic-number sn-camp-max-distance 30)
	(set-strategic-number sn-wood-dropsite-distance 3); move wood gatherers from far stragglers to the camp
	(disable-self)
)
(defrule
	(building-type-count-total lumber-camp > 1)
	(building-type-count-total mining-camp == 0)
	(dropsite-min-distance gold > 3)
	(dropsite-min-distance gold < 12); close gold like in gold rush maps
=>
	(set-strategic-number sn-camp-max-distance 12); so only a small camp max distance is required, else the gold will be skipped.
	(set-strategic-number sn-wood-dropsite-distance 3)
	(disable-self)
)
(defrule
	(current-age == dark-age); don't trigger this later when initial gold is gone.
	(building-type-count town-center >= 1); mainly a fix for nomad map where gold may be farther away
	(building-type-count-total lumber-camp > 0); as the computer doesn't care about resources when placing the initial TC.
(or	(unit-type-count villager >= 25)
	(and	(game-time > 480)
		(strategic-number sn-current-age >= df-transit)))
	(dropsite-min-distance gold > 24)
	(dropsite-min-distance gold < 54); 64
=>
	(set-strategic-number sn-camp-max-distance 50); 60
	(disable-self)
)
(defrule
; nn	(up-pending-objects c: lumber-camp < 1)
	(game-time > 30);	(game-time > lumber-delay)
(or	(resource-found wood)
	(and	(not	(resource-found wood)); int
			(wood-amount >= 300)))
(or	(dropsite-min-distance wood >= 7)
(or	(and	(wood-amount >= 300)
		(strategic-number sn-wood-gatherer-percentage >= 7))
(or	(building-type-count-total mill > 0)
	(and	(wood-amount > 200)
		(strategic-number sn-mill-max-distance > 28)))))
	(building-type-count-total lumber-camp <= 0)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0); testing adjalumb	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build lumber-camp)
)
#end-if ; no DM
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(defrule
	(resource-found wood)
	(unit-type-count villager >= 20)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(dropsite-min-distance wood < 4)
	(wood-amount < 160)
	(strategic-number sn-current-age == dark)
=>
	(up-jump-rule 1)
)
(defrule ;build additional lumber camps
	(up-pending-objects c: lumber-camp < 1)
	(game-time > 30)
	(resource-found wood)
	(unit-type-count villager >= 20)
(or	(building-type-count-total lumber-camp < 2)
	(unit-type-count villager >= 42))
(or	(building-type-count-total lumber-camp < 3)
	(unit-type-count villager >= 64))
(or	(dropsite-min-distance wood >= 3)
	(building-type-count-total lumber-camp < 4))
	(building-type-count-total lumber-camp < 5)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build lumber-camp)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(set-strategic-number sn-maximum-wood-drop-distance 30)
)
#end-if
#end-if
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
;	(up-pending-objects c: lumber-camp == 0)
	(game-time > 30)
(or	(strategic-number sn-current-age <= ci-transit); PIDM work-around
	(game-time >= 120))
(or	(goal increase-town-size-goal 0)
	(current-age <= feudal-age))
	(building-type-count town-center > 0)
(or	(and	(building-type-count lumber-camp > 0)
		(dropsite-min-distance wood > 3))
	(and	(unit-type-count-total villager >= villager-feudal)
		(building-type-count-total lumber-camp == 0))); debug for no placement
	(strategic-number sn-camp-max-distance < 35)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-camp-max-distance 35)
	(set-strategic-number sn-dropsite-separation-distance 3)
;	(chat-to-player my-player-number "bad lumber camp placement!: camp-max-distance 35")
)
(defrule
;	(up-pending-objects c: mining-camp == 0)
(or	(strategic-number sn-current-age <= ci-transit); PIDM work-around
	(game-time >= 180))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(strategic-number sn-gold-gatherer-percentage >= 5)
(or	(up-compare-goal strategy-goal != flush)
	(building-type-count-total dock > 0)))
	(resource-found gold)
	(strategic-number sn-current-age >= df-transit)
	(can-build mining-camp)
	(building-type-count-total mining-camp < 1)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
)
#end-if ; NOT PIDM
#load-if-defined DARK-AGE-END
(defrule
	(resource-found gold)
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mill > 0)
	(building-type-count-total mining-camp < 1)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
)
#end-if
(defrule
;	(up-pending-objects c: mining-camp == 0)
(or	(strategic-number sn-current-age <= ci-transit); PIDM work-around
	(game-time >= 180))
	(strategic-number sn-current-age >= df-transit)
	(resource-found gold)
	(goal strategy-goal flush)
(or
;	(and
	(or	(building-type-count-total stable > 0)
			(building-type-count-total archery-range > 1))
;		(wood-amount > 135))
	(and	(or	(goal unit-goal militiaman-line)
			(goal unit-goal archer))
		(building-type-count-total barracks > 0)))
	(can-build mining-camp)
	(building-type-count-total mining-camp == 0)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
)
(defrule
;	(up-pending-objects c: mining-camp == 0)
	(strategic-number sn-current-age >= feudal)
	(resource-found gold)
	(strategic-number sn-minimum-water-body-size-for-dock > water-mixed)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total market > 0)
	(can-build mining-camp)
	(building-type-count-total mining-camp == 0)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
)
(defrule
	(up-pending-objects c: mining-camp == 0)
	(resource-found gold)
(or	(or	(unit-type-count-total 229 >= 1); dead miners detected
		(unit-type-count-total 221 >= 1))
	(strategic-number sn-gold-gatherer-percentage > 30))
	(unit-type-count-total villager > 33)
	(can-build mining-camp)
	(building-type-count-total mining-camp < 2)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
	(set-strategic-number sn-maximum-stone-drop-distance 40)
	(set-strategic-number sn-stone-dropsite-distance 40)
	(set-strategic-number sn-maximum-gold-drop-distance 4); 3
	(set-strategic-number sn-gold-dropsite-distance 3)
)
(defrule
	(up-pending-objects c: lumber-camp < 1)
	(game-time > 30)
(or	(strategic-number sn-current-age <= ci-transit); PIDM work-around
	(game-time >= 120))
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(resource-found wood)
(or	(unit-type-count 123 > 0)
	(unit-type-count 218 > 0)); lumberjack
	(building-type-count-total lumber-camp < 1)
(or	(unit-type-count villager > 14)
	(strategic-number sn-current-age > dark))
(or	(game-time > 180)
	(dropsite-min-distance wood > 3))
	(wood-amount > 200)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0); testing adjalumb	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build lumber-camp)
)
(defrule
	(up-pending-objects c: mining-camp < 1)
(or	(strategic-number sn-current-age <= ci-transit); PIDM work-around
	(game-time >= 180))
	(resource-found gold)
	(dropsite-min-distance gold > 5); rebuild bad camps
	(dropsite-min-distance gold < 480)
	(building-type-count mining-camp > 0)
	(can-build mining-camp)
(or	(building-type-count mining-camp < 5)
	(and	(strategic-number sn-camp-max-distance > 45)
		(dropsite-min-distance gold > 13))); don't spam camps if it's in an unreachable spot
	(building-type-count-total mining-camp < 15)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 6)
)
(defrule
	(up-pending-objects c: mining-camp < 1)
(or	(strategic-number sn-current-age <= ci-transit); PIDM work-around
	(game-time >= 180))
	(resource-found stone)
	(dropsite-min-distance stone > 5)
	(dropsite-min-distance stone < 480)
	(building-type-count mining-camp > 1)
(or	(building-type-count mining-camp < 4)
	(and	(strategic-number sn-camp-max-distance > 45)
		(dropsite-min-distance stone > 13)))
	(can-build mining-camp)
	(strategic-number sn-stone-gatherer-percentage > 0)
	(building-type-count-total mining-camp < 15)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
	(set-strategic-number sn-dropsite-separation-distance 6)
)
(defrule
	(up-pending-objects c: mining-camp < 1)
	(wood-amount > 200)
	(resource-found gold)
	(dropsite-min-distance gold > 3); 1
	(dropsite-min-distance gold < 480); check for gold still on the map
	(up-compare-goal custom-civ-pop > 80)
	(game-time < 2400)
	(can-build mining-camp)
	(building-type-count-total mining-camp < 4); 5
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-camp-max-distance 45)
	(set-strategic-number sn-dropsite-separation-distance 9); 12
	(build mining-camp)
)
#load-if-not-defined WONDER-RACE
(defrule
	(up-pending-objects c: mining-camp < 1)
	(strategic-number sn-resource-control != battering-ram)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
(or	(or	(up-research-status c: ri-bow-saw >= research-pending)
		(building-type-count town-center >= tc-level-three))
	(or	(strategic-number sn-stone-gatherer-percentage > 0)
		(wood-amount > 210)))
	(stone-amount < 100)
	(current-age-time > 90)
	(resource-found stone)
	(building-type-count-total mining-camp < 4)
	(dropsite-min-distance stone > 5)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
)
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(up-pending-objects c: mining-camp < 1)
	(strategic-number sn-resource-control <= 2)
	(building-type-count-total market > 0)
	(building-type-count-total blacksmith > 0)
	(commodity-selling-price stone > 100)
	(building-type-count-total mining-camp < 4)
(or	(and	(building-type-count-total mining-camp < 2)
		(dropsite-min-distance stone > 5))
	(and	(current-age == castle-age)
		(building-type-count stable > 1)))
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
)
#end-if
(defrule
	(up-pending-objects c: mining-camp < 1)
(or	(goal unit-goal my-unique-unit-line)
	(goal unit-goal wonder))
(or	(up-research-status c: castle-age >= research-available)
(or	(building-type-count-total blacksmith >= 1)
	(and	(strategic-number sn-current-age == df-transit)
		(wood-amount >= 485))))
	(building-type-count-total mining-camp == 1)
	(dropsite-min-distance stone > 5)
	(can-build mining-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(build mining-camp)
)
#load-if-not-defined DEATH-MATCH
(defrule
	(building-type-count lumber-camp >= 1); test
	(building-type-count town-center >= 1)
(or	(game-time > 2100)
	(dropsite-min-distance wood > 15))
	(strategic-number sn-camp-max-distance < 60)
=>
	(set-strategic-number sn-camp-max-distance 60)
)
(defrule
	(game-time > 2700)
	(goal ffa-game-goal -1)
	(goal increase-town-size-goal 0)
	(strategic-number sn-camp-max-distance < 90)
=>
	(set-strategic-number sn-camp-max-distance 90)
)
#end-if
(defrule
	(cc-players-unit-type-count 0 tree-class < heavy-wood)	
(or	(game-time > 3600); 60min
	(death-match-game))
(or	(goal ffa-game-goal -1)
	(game-time > 5400)); 90 min
	(game-time > 900)
	(goal increase-town-size-goal 0)
	(strategic-number sn-camp-max-distance < 144)
=>
	(set-strategic-number sn-camp-max-distance 144)
)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(defrule
	(up-pending-objects c: lumber-camp < 1)
	(game-time > 30)
	(resource-found wood)
(or	(unit-type-count-total villager >= 7)
	(population >= max-civ))
	(building-type-count-total mill >= 1)
	(building-type-count-total lumber-camp >= 1)
	(building-type-count-total town-center >= 1)
	(dropsite-min-distance wood < 480)
	(dropsite-min-distance wood > 5)
	(strategic-number sn-camp-max-distance < 40);
	(strategic-number sn-camp-max-distance <= 476)
; bug	(cc-players-unit-type-count 0 tree-class > 25)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
;	(set-strategic-number sn-camp-max-distance 30)
	(up-modify-sn sn-camp-max-distance c:+ 4)
;	(chat-to-player my-player-number "Wood far away: New camp.")
	(build lumber-camp))
(defrule
	(up-pending-objects c: lumber-camp < 1)
(or	(resource-found wood)
	(game-time > 60))
	(game-time > 30)
(or	(unit-type-count-total villager >= 7)
	(population >= max-civ))
(or	(strategic-number sn-current-age <= ci-transit); PIDM work-around
	(game-time >= 120))
	(building-type-count-total mill >= 1)
	(building-type-count-total lumber-camp >= 1);
	(building-type-count-total town-center >= 1)
	(dropsite-min-distance wood < 480)
	(dropsite-min-distance wood > 3)
(or	(strategic-number sn-current-age >= fc-transit)
	(dropsite-min-distance wood > 4)); test
; bug	(cc-players-unit-type-count 0 tree-class > 25)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build lumber-camp)
	(set-strategic-number sn-dropsite-separation-distance 6)
)
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(timer-triggered lumber-timer)
	(game-time > 30)
	(up-pending-objects c: lumber-camp < 1)
	(unit-type-count villager >= 4); disabled for now
(or	(unit-type-count-total 219 >= 1)
	(unit-type-count-total 228 >= 1)) ; ded
	(can-build lumber-camp)
(or	(dropsite-min-distance wood > 1)
(or	(building-type-count-total blacksmith > 0)
	(strategic-number sn-current-age >= fc-transit)))
	(dropsite-min-distance wood < 480)
	(game-time < 1800); 1800
	(building-type-count-total lumber-camp < timer-lcs)
; bug	(cc-players-unit-type-count 0 tree-class > 25)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build lumber-camp)
	(enable-timer lumber-timer 180); 120
	(set-strategic-number sn-dropsite-separation-distance 9); 12
)
(defrule
	(timer-triggered lumber-timer)
	(game-time > 30)
	(up-pending-objects c: lumber-camp < 1)
	(unit-type-count villager >= 67)
	(can-build lumber-camp)
	(dropsite-min-distance wood >= 0)
	(dropsite-min-distance wood < 480)
	(building-type-count-total lumber-camp < timer-lcs)
; bug	(cc-players-unit-type-count 0 tree-class > 25)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build lumber-camp)
	(enable-timer lumber-timer 210); 180
	(set-strategic-number sn-dropsite-separation-distance 4)
)
#end-if
(defrule
	(building-type-count-total town-center == 1)
(or	(goal strategy-goal flush)
	(building-type-count farm > 18))
	(building-type-count farm > 15)
	(building-type-count-total mill < 2)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-mill-max-distance 20)
	(set-strategic-number sn-dropsite-separation-distance 9)
	(build mill)
)
(defrule
	(building-type-count farm > 24)
(or	(building-type-count farm > 27)
	(building-type-count-total town-center == 1))
	(building-type-count-total mill < 3)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-mill-max-distance 20)
	(set-strategic-number sn-dropsite-separation-distance 9)
	(set-strategic-number sn-preferred-mill-placement 0)
	(build mill)
)
(defrule
	(building-type-count farm > 33)
(or	(building-type-count-total mill < 4)
	(building-type-count farm > 45))
	(building-type-count-total mill < 5)
	(can-build mill)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0)
	(set-strategic-number sn-mill-max-distance 22)
	(set-strategic-number sn-dropsite-separation-distance 9)
	(build mill)
)
#end-if
#end-if
;#load-if-not-defined DIFFICULTY-MODERATE
;#load-if-not-defined DIFFICULTY-HARD
;#load-if-not-defined DIFFICULTY-HARDEST
(defrule ;build additional lumber camps
	(up-pending-objects c: lumber-camp < 1)
	(game-time > 30)
	(resource-found wood)
	(unit-type-count villager >= 15)
	(dropsite-min-distance wood < 480)
	(dropsite-min-distance wood >= 0)
	(building-type-count-total lumber-camp < 2)
	(building-type-count-total mill > 0)
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build lumber-camp)
	(set-strategic-number sn-dropsite-separation-distance 3)
	(set-strategic-number sn-maximum-wood-drop-distance 30)
)
(defrule
;	(timer-triggered lumber-timer)
	(up-pending-objects c: lumber-camp < 1)
	(game-time > 30)
	(dropsite-min-distance wood < 480)
	(dropsite-min-distance wood > wood-distance-farm);	(dropsite-min-distance wood > 7); on low difficulty levels only rebuild really bad camps
	(can-build lumber-camp)
; bug	(cc-players-unit-type-count 0 tree-class > 25)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1)
	(build lumber-camp)
	(disable-self);	(enable-timer lumber-timer 190)
)
;#end-if
;#end-if
;#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
(or	(strategic-number sn-current-age == dark)
	(civ-selected japanese))
(or	(unit-type-count male-hunter >= 1)
	(unit-type-count female-hunter >= 1))
	(dropsite-min-distance deer-hunting <= 32)
	(dropsite-min-distance deer-hunting >= 16)
	(can-build mill)
	(building-type-count-total mill >= 1)
	(building-type-count-total lumber-camp >= 1)
(or	(strategic-number sn-current-age <= ci-transit); PIDM work-around
	(game-time >= 120))
=>
	(set-strategic-number sn-allow-adjacent-dropsites 1); test
	(set-strategic-number sn-mill-max-distance 28)
	(set-strategic-number sn-preferred-mill-placement 1); mill deer
	(build mill)
	(disable-self)
)
#load-if-not-defined DEATH-MATCH
(defrule
	(strategic-number sn-current-age == dark)
	(building-type-count-total lumber-camp >= 1)
(or	(unit-type-count villager >= 12); 14
	(wood-amount >= 110))
(or	(unit-type-count villager < 20)
(or	(building-type-count-total lumber-camp >= 2)
	(wood-amount >= 110)))
(or	(unit-type-count villager < 30)
(or	(building-type-count-total mining-camp >= 1)
	(wood-amount >= 110)))
(or	(and	(or	(wood-amount >= 235)
			(building-type-count-total barracks >= 1))
		(and	(idle-farm-count < 2); 2
			(building-type-count-total farm < 11)))
(or	(idle-farm-count < 1)
	(building-type-count-total farm < 2))); test; 3
	(idle-farm-count < 4)
=>
	(set-goal farm-goal 1)
)
(defrule
	(strategic-number sn-current-age <= df-transit); ==
	(wood-amount >= 385);stblBsFarm
	(idle-farm-count < 2)
(or	(idle-farm-count < 1)
	(building-type-count-total farm < 2))
	(building-type-count-total lumber-camp > 0)
=>
	(set-goal farm-goal 1)
)
(defrule
	(strategic-number sn-current-age == feudal)
(or	(wood-amount >= 410)
	(current-age-time >= 125))
(or	(wood-amount >= 235)
	(and	(nand	(goal strategy-goal flush)
			(and	(building-type-count-total archery-range < 2)
				(and	(building-type-count-total stable < 1)
					(building-type-count-total blacksmith < 1))))
		(or	(food-amount < 300)
			(building-type-count-total farm < 7))))
	(wood-amount >= 113)
	(food-amount < castle-food)
	(idle-farm-count < 1)
	(building-type-count-total lumber-camp > 0)
=>
	(set-goal farm-goal 1)
)
(defrule
	(strategic-number sn-current-age == feudal)
(or	(and	(research-available castle-age)
		(up-research-status c: ri-horse-collar >= research-complete))
	(building-type-count-total market >= 1))
(or	(and	(research-available castle-age)
		(up-research-status c: ri-horse-collar >= research-complete))
(or	(building-type-count-total blacksmith >= 1)
	(wood-amount >= 210))); test
	(wood-amount >= 113)
	(idle-farm-count < 1)
	(building-type-count-total lumber-camp > 0)
=>
	(set-goal farm-goal 1)
)
#end-if ; NOT DM
#load-if-not-defined WONDER-RACE
(defrule
	(goal strategy-goal sling)
	(strategic-number sn-current-age >= feudal)
(or	(wood-amount >= 235)
	(building-type-count-total market >= 1))
	(up-research-status c: ri-horse-collar >= research-complete)
	(idle-farm-count < 2)
=>
	(set-goal farm-goal 1)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-current-age == feudal)
(or	(or	(and	(building-type-count-total archery-range > 1)
			(building-type-count-total blacksmith > 0))
		(goal unit-goal militiaman-line))
	(building-type-count-total stable > 0))
	(building-type-count-total archery-range > 0)
	(idle-farm-count < 3)
=>
	(set-goal farm-goal 1)
)
(defrule
(or	(goal strategy-goal flush)
	(food-amount < 400))
	(strategic-number sn-current-age == feudal)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(up-compare-goal position-goal == flank); hm
	(idle-farm-count < 1)
	(wood-amount > 150)
=>
	(set-goal strategy-goal flush)
	(set-goal farm-goal 1)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(up-research-status c: ri-horse-collar >= research-complete)
(or	(or	(building-type-count-total archery-range > 2)
		(building-type-count-total stable > 1))
	(and	(goal unit-goal eagle-warrior)
		(building-type-count-total barracks > 0)))
	(idle-farm-count < 2)
=>
	(set-goal farm-goal 1)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(up-research-status c: ri-horse-collar >= research-complete)
	(building-type-count-total farm < farm-count)
(nor	(or	(goal unit-goal my-unique-unit-line); delay farms until castle age to have more workers for the castle with uu startegy
		(goal control-goal shot)); get food from ally
	(or	(goal unit-goal knight); use rule above
	(or	(goal unit-goal battle-elephant)
		(goal unit-goal default-ranged))))
	(idle-farm-count < 2)
=>
	(set-goal farm-goal 1)
)
#load-if-not-defined SARACEN-CIV ;buy food with them instead of farming
(defrule
	(strategic-number sn-current-age == feudal)
(or	(and	(goal strategy-goal rush)
		(building-type-count-total blacksmith > 0))
	(game-time > 1200))
	(not (goal unit-goal my-unique-unit-line))
	(idle-farm-count < 2)
=>
	(set-goal farm-goal 1)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(building-type-count-total blacksmith > 0)
(or	(or	(goal unit-goal mix)
		(goal unit-goal skirmisher))
	(and	(goal strategy-goal boom)
		(up-research-status c: ri-horse-collar >= research-complete)))
	(building-type-count-total farm < 14)
=>
	(set-goal farm-goal 1)
)
(defrule
	(building-type-count town-center >= 1)
	(strategic-number sn-current-age >= castle)
(or	(idle-farm-count < 2)
(or	(building-type-count-total town-center >= tc-level-three)
	(and	(building-type-count-total town-center >= tc-level-two)
		(or	(wood-amount > 335); 275 for 3rd TC + 60
			(goal strategy-goal boom))))); build as many farms as possible after 2nd TC
=>
	(set-goal farm-goal 1)
)
#else
(defrule
	(building-type-count town-center >= 1)
	(strategic-number sn-current-age >= castle)
(or	(idle-farm-count < 2)
	(building-type-count-total town-center >= tc-level-three))
(or	(or	(commodity-buying-price food > 130)
		(commodity-selling-price stone < 100))
	(or	(or	(goal strategy-goal boom)
			(building-type-count farm < 8))
		(game-time > 1800)))
=>
	(set-goal farm-goal 1)
)
#end-if ;SARACEN-CIV

(defrule
(or	(and	(strategic-number sn-current-age > feudal)
		(building-type-count-total farm < 8))
	(and	(building-type-count-total lumber-camp > 1)
		(building-type-count-total farm < 4))); test
	(food-amount < 50)
	(idle-farm-count <= 0)
	(building-type-count-total lumber-camp > 0)
=>
	(set-goal farm-goal 1))
#end-if ;no WONDER-RACE

(defrule
	(strategic-number current-age == castle)
(or	(goal strategy-goal fast-imp)
	(and	(goal strategy-goal boom)
		(up-compare-goal custom-civ-pop >= 60)))
(not	(research-available imperial-age))
	(wood-amount < 200)
	(food-amount > 400)
	(gold-amount > 400)
=>
	(set-goal farm-goal 0)
)
#load-if-not-defined TURKISH-CIV
(defrule
	(strategic-number current-age >= ci-transit)
	(goal unit-goal gunpowder-class)
	(building-type-count-total university <= 0)
	(up-research-status c: ri-chemistry <= research-unavailable)
	(wood-amount < 200)
=>
	(set-goal farm-goal 0)
)
#end-if
(defrule
(or	(unit-type-count female-forager > 0)
	(unit-type-count male-forager > 0))
	(building-type-count mill == 1)
	(sheep-and-forage-too-far); save for 2nd mill on maps with more berries, eg. yucatan
	(wood-amount < 110); 100
=>
	(set-goal farm-goal 0)
)
(defrule
	(building-type-count-total town-center == 1)
	(goal strategy-goal flush)
	(wood-amount < 113)
	(building-type-count-total farm > 18)
	(building-type-count-total mill < 2)
	(goal farm-goal 1)
=>
	(set-goal farm-goal 0)
)
(defrule
	(up-timer-status one-minute-timer == timer-running)
	(wood-amount < 120)
	(dropsite-min-distance wood < 480)
	(dropsite-min-distance wood >= wood-distance-farm);	(dropsite-min-distance wood >= 5)
	(goal farm-goal 1)
=>
	(set-goal farm-goal 0)
)
(defrule
	(goal farm-goal 1)
	(current-age == dark-age)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(wood-amount < 210); place farms only if still enough wood left for dock
	(and	(building-type-count-total dock > 0)
		(wood-amount < 135)))
=>
	(set-goal farm-goal 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(and	(strategic-number sn-current-age == df-transit)
		(or	(unit-type-count male-hunter > 0)
			(unit-type-count female-hunter > 0)))
	(or	(and	(current-age == feudal-age)
			(up-compare-goal strategy-goal != flush))
		(and	(current-age >= castle-age)
			(idle-farm-count > 2))))
	(idle-farm-count > 0)
=>
	(set-goal farm-goal 0)
)
(defrule
	(strategic-number sn-current-age == df-transit)
	(wood-amount < 385); feudal buildings + farm
(not	(civ-selected khmer))
(or	(building-type-count farm >= 4)
	(idle-farm-count >= 1)); probably not necessary, but meh
	(up-compare-goal farm-goal != 0)
=>
	(set-goal farm-goal 0)
)
(defrule; esp for 'easiest' difficulty with barely any woodcutters
	(strategic-number sn-current-age == feudal)
	(building-type-count-total blacksmith < 1)
	(food-amount >= 369);
(not	(research-available castle-age))
	(wood-amount < 185); 150/160
(or	(building-type-count-total farm >= 4)
	(idle-farm-count >= 1)); probably not necessary, but meh
	(up-compare-goal farm-goal != 0)
=>
	(set-goal farm-goal 0)
)
(defrule
	(current-age >= castle-age); deathmatch etc
	(food-amount >= 1200)
	(game-time < 390)
	(unit-type-count-total villager < 30)
	(up-compare-goal farm-goal != 0)
=>
	(set-goal farm-goal 0))
(defrule
	(strategic-number sn-current-age == dark)
(or	(or	(map-type yucatan)
		(and	(building-type-count-total farm >= 7); 6
			(idle-farm-count > 0)))
	(and	(and	(dropsite-min-distance deer-hunting >= 16); deer found but not very close => save for hunting mill
			(dropsite-min-distance deer-hunting < 32))
		(unit-type-count-total villager >= 22)))
	(wood-amount < 110); sometimes there was still no hunting
=>
	(set-goal farm-goal 0)
)
(defrule
(or	(and	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
		(and	(current-age == dark-age)
			(and	(wood-amount < 210)
				(building-type-count-total dock <= 0)))); place farms only if still enough wood left for dock
	(wood-amount < farm-wood))
	(goal farm-goal 1)
=>
	(set-goal farm-goal 0)
)
(defrule
	(strategic-number sn-current-age == df-transit)
	(unit-type-count villager >= 30)
	(unit-type-count villager > dark-age-villager)
	(building-type-count-total farm < 12)
(or	(building-type-count-total barracks > 0)
	(civ-selected saracen))
(or	(wood-amount >= 385); feudal buildings + farm
(or	(civ-selected khmer)
	(food-amount < 400)))
(or	(goal strategy-goal rush)
	(goal strategy-goal boom))
	(idle-farm-count < 1)
	(food-amount < 600)
=>
	(set-goal farm-goal 1)
)
(defrule
	(up-compare-goal farm-goal != 0)
	(building-type-count town-center <= 0); total
=>
	(set-goal farm-goal 0)
)
(defrule
	(up-compare-goal farm-goal != 0)
=>
	(up-get-fact unit-type-count villager math-goal)
	(up-modify-goal math-goal s:%* sn-food-gatherer-percentage)
	(up-get-fact building-type-count farm math-goal2))
(defrule; maxfarms
	(up-compare-goal farm-goal != 0)
(or	(idle-farm-count >= 12);
	(up-compare-goal math-goal2 g:> math-goal)); >=
(or	(idle-farm-count >= 6); test; 10
	(nand	(and	(unit-type-count male-gold-miner <= 0)
			(unit-type-count female-gold-miner <= 0))
		(idle-farm-count < 3)))
=>
	(set-goal farm-goal 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(strategic-number sn-current-age == dark)
	(wood-amount >= 250); high wood because dock was delayed for long
	(goal farm-goal 1)
=>
	(set-goal farm-goal 2); allow placing many farms, probably failed dock placement
)
(defrule
	(goal farm-goal 1)
(or	(and	(building-type-count-total monastery > 0)
		(building-type-count-total town-center >= tc-level-three))
	(and	(wood-amount >= 120)
		(and	(building-type-count-total stable > 1)
			(or	(goal control-goal aggressive-rush)
				(building-type-count town-center >= tc-level-two)))))
=>
	(set-goal farm-goal 2)
)
(defrule
(or	(strategic-number sn-current-age == dark)
	(and	(and	(strategic-number sn-current-age == df-transit)
			(or	(wood-amount >= 435); feudal buildings + (wheelbarrow) + farm
				(civ-selected khmer)))
		(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)))
	(wood-amount >= 120)
(or	(and	(unit-type-count villager > 20)
		(building-type-count-total lumber-camp > 1))
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)); fix if no docks could be placed
	(goal farm-goal 1)
=>
	(set-goal farm-goal 2)
)
(defrule
	(wood-amount >= 120)
	(building-type-count-total blacksmith > 0)
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(current-age-time > 120); don't spend all wood into farms at the start of the age
	(goal farm-goal 1)
=>
	(set-goal farm-goal 2)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(research-completed ri-heavy-plow)
	(strategic-number sn-current-age >= castle)
(or	(building-type-count-total town-center >= tc-level-five)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(strategic-number sn-current-age >= ci-transit))))
	(goal farm-goal 1)
=>
	(set-goal farm-goal 2)
)
#load-if-not-defined WONDER-RACE
#load-if-not-defined POPULATION-CAP-25
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(goal enemy-boats-goal 0)
	(building-type-count-total dock >= 1); !
=>
	(up-jump-rule 5)
)
(defrule
	(goal position-goal flank)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count barracks < 3)
	(building-type-count archery-range < 1)
	(building-type-count stable < 1)
	(building-type-count castle < 1)
	(building-type-count siege-workshop < 2)
	(building-type-count monastery < 2)
	(wood-amount < 250)
	(players-building-type-count target-player dock < 1)
	(strategic-number sn-current-age < ci-transit)
	(building-type-count-total dock >= 1); !
=>
	(up-jump-rule 4))
(defrule
	(goal save-wood-goal 0)
(or	(goal enemy-boats-goal 1);
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed))
	(building-type-count-total blacksmith > 0)
	(building-type-count-total dock < 5)
(or	(stone-amount < 200)
	(building-type-count-total dock < 1))
(or	(building-type-count-total dock < 2)
	(up-compare-goal custom-civ-pop > 60))
(or	(building-type-count-total dock < 4)
	(up-compare-goal custom-civ-pop > 80))
	(can-build dock)
=>
	(build dock)
)
(defrule
	(goal save-wood-goal 0)
	(strategic-number sn-current-age == dark)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(building-type-count-total lumber-camp > 0)
(or	(building-type-count-total mill > 0)
	(and	(unit-type-count fishing-ship >= 1)
		(or	(cc-players-unit-type-count 0 shore-fish >= shorefishreq2); a bit
			(cc-players-unit-type-count 0 sea-fish >= deepfishreq2))))
	(building-type-count-total dock < 2)
(or	(building-type-count-total dock < 1)
	(and	(unit-type-count-total villager >= 28)
		(food-amount < 400))); bugged fishing near mill?
	(can-build dock)
=>
	(build dock)
)
(defrule
	(strategic-number sn-current-age < fc-transit)
	(strategic-number sn-current-age >= df-transit)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(goal save-wood-goal 0)
	(goal enemy-boats-goal 1)
	(wood-amount > 400)
	(food-amount < 550); bugged fishing near mill?
	(can-build dock)
	(building-type-count-total dock < 2)
=>
	(build dock)
)
(defrule
	(strategic-number sn-current-age >= df-transit)
(or	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(goal enemy-boats-goal 1))
	(goal save-wood-goal 0)
	(building-type-count-total dock < 3)
(or	(goal strategy-goal flush)
	(building-type-count-total blacksmith > 0))
	(can-build dock)
=>
	(build dock)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(building-type-count-total blacksmith > 0)
	(starting-age == post-imperial-age))
	(building-type-count-total dock < 9)
(or	(building-type-count-total dock < 3)
	(building-type-count-total town-center >= tc-level-two))
(or	(building-type-count-total dock < 4)
(or	(up-compare-goal custom-civ-pop > 80)
	(death-match-game)))
(or	(wood-amount >= 250)
	(building-type-count-total lumber-camp >= 1))
	(can-build dock)
=>
	(build dock)
)
(defrule	
(or	(and	(goal control-goal aggressive-rush)
		(goal unit-goal knight))
	(goal unit-goal skirmisher))
=>
	(up-jump-rule 1)
)
(defrule
	(current-age-time < 300)
	(current-age == castle-age)
	(building-type-count monastery == 1)
	(strategic-number sn-resource-control <= 2)
	(unit-type-count-total monk == 0)
	(unit-type-count-total 134 == 0); dead monk
	(unit-type-count-total 286 == 0); monk with relic
	(building-type-count-total market == 0)
	(cc-players-unit-type-count 0 relic > 0)
	(gold-amount < 100)
=>
	(set-strategic-number sn-resource-control monk)
;debug;	(chat-to-player my-player-number "Saving resources for monk")
)
(defrule
	(current-age-time < 300)
	(building-type-count monastery == 1)
	(strategic-number sn-resource-control <= 2)
	(unit-type-count-total monk == 0)
	(unit-type-count-total 134 == 0); dead monk
	(goal control-goal aggressive-rush)
	(up-research-status c: ri-cavalier == research-pending)
(or	(strategic-number sn-cavalry-threat > 0); still get a monk if enemy is krushing, as they're good vs cavalry
	(goal enemy-goal skirmisher)); enemy spam trash so it's not likely we're going to attack quick
	(cc-players-unit-type-count 0 relic > 0)
	(gold-amount < 100)
=>
	(set-strategic-number sn-resource-control monk)
;debug;	(chat-to-player my-player-number "Saving resources for monk")
)
#load-if-defined CAPTURE-THE-RELIC
(defrule
	(gold-amount < 100)
	(unit-available monk)
	(unit-type-count-total monk <= 0)
	(unit-type-count-total 134 <= 0); dead monk
=>
	(set-strategic-number sn-resource-control monk))
(defrule
	(unit-type-count-total monk < 1)
	(can-train monk)
=>
	(train monk))
(defrule
	(strategic-number sn-resource-control == monk)
(or	(unit-type-count-total monk >= 1)
	(not	(unit-available monk)))
=>
	(set-strategic-number sn-resource-control 0))
#end-if
(defrule
	(strategic-number sn-resource-control == monk)
(or	(and	(unit-type-count female-gold-miner <= 0)
		(and	(unit-type-count male-gold-miner <= 0)
			(and	(up-compare-goal relic-count <= 0)
				(up-compare-goal trade-units <= 0))))
	(and	(or	(town-under-attack)
			(strategic-number sn-military-level < 0))
		(strategic-number sn-military-level < 1)))
=>
	(set-strategic-number sn-resource-control 0)
)



(defrule
	(current-age >= feudal-age); test
	(strategic-number sn-camp-max-distance < 30)
=>
	(set-strategic-number sn-camp-max-distance 30))
(defrule
(or	(game-time > 1640)
	(building-type-count-total town-center >= 3))
(or	(game-time > 1200)
	(and	(goal under-attack-goal 0)
		(strategic-number sn-military-level >= 1)))
	(strategic-number sn-camp-max-distance < 40)
=>
	(set-strategic-number sn-camp-max-distance 40))
(defrule
(or	(game-time > 3000)
	(and	(game-time > 2100)
		(strategic-number sn-military-level >= 2)))
	(strategic-number sn-military-level >= 0)
	(strategic-number sn-camp-max-distance < 70)
=>
	(set-strategic-number sn-camp-max-distance 70))
(defrule
	(game-time > 3150)
(or	(game-time > 7800)
(or	(strategic-number sn-military-level >= 2)
	(up-compare-goal attack-goal >= 1)))
(or	(population >= del-civ-pop)
	(strategic-number sn-current-age >= imperial))
	(strategic-number sn-camp-max-distance < 100)
=>
	(set-strategic-number sn-camp-max-distance 100))
(defrule
	(game-time > 3600)
(or	(game-time > 12600)
(or	(strategic-number sn-military-level >= 3)
	(up-compare-goal attack-goal >= 1)))
	(population >= del-civ-pop)
	(strategic-number sn-camp-max-distance < 255)
=>
	(set-strategic-number sn-camp-max-distance 255))
(defrule
	(game-time > 7200)
(or	(game-time > 18000)
(or	(strategic-number sn-military-level >= 3)
	(up-compare-goal attack-goal >= 1)))
	(population >= del-civ-pop)
	(strategic-number sn-camp-max-distance < 480)
=>
	(set-strategic-number sn-camp-max-distance 480))
(defrule
(or	(building-type-count town-center >= 1)
	(building-type-count mill >= 1))
	(strategic-number sn-enable-boar-hunting >= 1)
	(not (enemy-buildings-in-town))
	(up-compare-goal forward-threat-goal != 1)
	(strategic-number sn-maximum-hunt-drop-distance <= 15)
=>
;	(chat-local-to-self "sn-maximum-hunt-drop-distance: ->16.")
	(set-strategic-number sn-maximum-hunt-drop-distance 16))
(defrule
(nor	(game-time > 1320)
	(and	(game-time > 1050)
		(strategic-number sn-military-level >= 1)))
(or	(dropsite-min-distance live-boar > 32)
	(dropsite-min-distance live-boar <= -1))
	(strategic-number sn-maximum-hunt-drop-distance > 20)
=>
;	(chat-local-to-self "sn-maximum-hunt-drop-distance: 20<-.")
	(set-strategic-number sn-maximum-hunt-drop-distance 20))
(defrule
(or	(game-time > 1320)
	(and	(game-time > 1050)
		(strategic-number sn-military-level >= 1)))
(or	(strategic-number sn-maximum-wood-drop-distance < 22)
	(strategic-number sn-maximum-food-drop-distance < 22))
=>
	;extend walking distances
	(set-strategic-number sn-maximum-wood-drop-distance 22)
	(set-strategic-number sn-maximum-food-drop-distance 22)
	(set-strategic-number sn-maximum-hunt-drop-distance 22)
	(set-strategic-number sn-maximum-gold-drop-distance 10)
	(set-strategic-number sn-maximum-stone-drop-distance 14))
(defrule
(or	(game-time > 3000)
	(and	(game-time > 2400)
		(strategic-number sn-military-level >= 1)))
(or	(strategic-number sn-maximum-wood-drop-distance < 25)
	(strategic-number sn-maximum-food-drop-distance < 25))
=>
	(set-strategic-number sn-maximum-wood-drop-distance 25)
	(set-strategic-number sn-maximum-food-drop-distance 25)
	(set-strategic-number sn-maximum-hunt-drop-distance 25)
	(set-strategic-number sn-maximum-gold-drop-distance 11)
	(set-strategic-number sn-maximum-stone-drop-distance 15))
(defrule
(or	(game-time > 3900)
	(and	(game-time > 3300)
		(strategic-number sn-military-level >= 1)))
(or	(strategic-number sn-maximum-wood-drop-distance < 30)
	(strategic-number sn-maximum-food-drop-distance < 30))
=>
	(set-strategic-number sn-maximum-wood-drop-distance 30)
	(set-strategic-number sn-maximum-food-drop-distance 30)
	(set-strategic-number sn-maximum-hunt-drop-distance 26)
	(set-strategic-number sn-maximum-gold-drop-distance 13)
	(set-strategic-number sn-maximum-stone-drop-distance 16))
(defrule
(or	(game-time > 5100)
	(and	(game-time > 4500)
		(strategic-number sn-military-level >= 2)))
(or	(strategic-number sn-maximum-wood-drop-distance < 35)
	(strategic-number sn-maximum-food-drop-distance < 35))
=>
	(set-strategic-number sn-maximum-wood-drop-distance  35)
	(set-strategic-number sn-maximum-food-drop-distance  35)
	(set-strategic-number sn-maximum-hunt-drop-distance  27)
	(set-strategic-number sn-maximum-gold-drop-distance  16)
	(set-strategic-number sn-maximum-stone-drop-distance 18))
(defrule
(or	(game-time > 7800)
	(and	(game-time > 7200)
		(strategic-number sn-military-level >= 2)))
(or	(strategic-number sn-maximum-wood-drop-distance < 40)
	(strategic-number sn-maximum-food-drop-distance < 40))
=>
	(set-strategic-number sn-maximum-wood-drop-distance  40)
	(set-strategic-number sn-maximum-food-drop-distance  40)
	(set-strategic-number sn-maximum-hunt-drop-distance  28)
	(set-strategic-number sn-maximum-gold-drop-distance  18)
	(set-strategic-number sn-maximum-stone-drop-distance 19))
(defrule
(or	(game-time > 10200)
	(and	(game-time > 9600)
		(strategic-number sn-military-level >= 2)))
(or	(strategic-number sn-maximum-wood-drop-distance < 60)
	(strategic-number sn-maximum-food-drop-distance < 50))
=>
	(set-strategic-number sn-maximum-wood-drop-distance  60)
	(set-strategic-number sn-maximum-food-drop-distance  50)
	(set-strategic-number sn-maximum-hunt-drop-distance  30)
	(set-strategic-number sn-maximum-gold-drop-distance  22)
	(set-strategic-number sn-maximum-stone-drop-distance 22))
(defrule
(or	(game-time > 12600)
	(and	(game-time > 12000)
		(strategic-number sn-military-level >= 2)))
(or	(strategic-number sn-maximum-wood-drop-distance < 255)
	(strategic-number sn-maximum-food-drop-distance < 60))
=>
	(set-strategic-number sn-maximum-wood-drop-distance  255)
	(set-strategic-number sn-maximum-food-drop-distance  60)
	(set-strategic-number sn-maximum-hunt-drop-distance  60)
	(set-strategic-number sn-maximum-gold-drop-distance  25)
	(set-strategic-number sn-maximum-stone-drop-distance 25))
(defrule
(or	(game-time > 18000)
	(and	(game-time > 14400)
		(strategic-number sn-military-level >= 3)))
(or	(strategic-number sn-maximum-wood-drop-distance < 480)
	(strategic-number sn-maximum-food-drop-distance < 75))
=>
	(set-strategic-number sn-maximum-wood-drop-distance  480)
	(set-strategic-number sn-maximum-food-drop-distance  75)
	(set-strategic-number sn-maximum-hunt-drop-distance  75)
	(set-strategic-number sn-maximum-gold-drop-distance  40)
	(set-strategic-number sn-maximum-stone-drop-distance 40))
(defrule
	(game-time < 3300)
(or	(building-type-count-total town-center >= 1)
	(building-type-count-total lumber-camp >= 1))
(or	(strategic-number sn-maximum-wood-drop-distance >= 480)
	(strategic-number sn-maximum-wood-drop-distance < 0))
=>
;	(chat-local-to-self "Debugging wood-drop-distance -> 30.")
	(set-strategic-number sn-maximum-wood-drop-distance  30))

; ********** RESEARCH **********

(defrule
(or	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal ri-chain-barding))
(or	(unit-type-count cavalry-unit-class >= mid-min-number-upgrade)
	(and	(or	(civ-selected saracen)
			(goal control-goal shot))
		(or	(goal unit-goal knight)
			(goal unit-goal battle-elephant))))
	(can-research-with-escrow ri-chain-barding)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-chain-barding)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(can-research ri-bow-saw)
	(goal train-civ-goal 1)
(or	(and	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
		(building-type-count dock >= 1))
(or	(goal strategy-goal boom)
(or	(building-type-count-total town-center >= tc-level-three)
(or	(goal position-goal pocket)
(or	(current-age-time > 15)
(or	(goal unit-goal my-unique-unit-line)
(or	(strategic-number sn-current-age >= ci-transit)
(or	(goal unit-goal skirmisher)
	(unit-type-count-total villager >= 39)))))))))
(or	(up-compare-goal strategy-goal != fast-imp)
	(strategic-number sn-current-age >= ci-transit))
; test	(building-type-count-total monastery > 0)
=>
	(research ri-bow-saw)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal train-civ-goal 1)
(or	(building-type-count-total town-center >= tc-level-three)
(or	(unit-type-count-total villager >= 48)
(or	(strategic-number sn-current-age >= ci-transit)
(or	;(or	(goal position-goal pocket)
		(goal strategy-goal boom);)
	(or	(current-age-time > 120)
		(goal unit-goal my-unique-unit-line))))))
(nand	(goal unit-goal default-ranged)
	(and	(research-available ri-bodkin-arrow)
		(food-amount < 325)))
(or	(up-compare-goal strategy-goal != fast-imp)
	(strategic-number sn-current-age >= ci-transit))
	(can-research ri-heavy-plow)
=>
	(research ri-heavy-plow)
)
(defrule
(or	(up-research-status c: ri-bow-saw >= research-pending)
(or	(civ-selected viking)
(or	(up-compare-goal navy-count >= 10)
(or	(unit-type-count-total 1103 >= 4); fire galley
(or	(unit-type-count-total 1104 >= 4); demo raft
(or	(unit-type-count-total fire-ship-line >= 4)
(or	(unit-type-count-total demolition-ship-line >= 4); demo raft
	(unit-type-count-total galley-line >= 4))))))))
	(can-research-with-escrow ri-war-galley)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-war-galley)
)
(defrule
	(can-research-with-escrow ri-fast-fire-ship)
=>
	(release-escrow wood)(release-escrow gold)
	(set-escrow-percentage wood 0)(set-escrow-percentage gold 0)
	(research ri-fast-fire-ship)
)
(defrule
	(can-research-with-escrow ri-galleon)
=>
	(release-escrow wood)(release-escrow food)
	(set-escrow-percentage wood 0)(set-escrow-percentage food 0)
	(research ri-galleon)
)
(defrule
	(unit-type-count-total demolition-ship-line >= 3)
	(can-research-with-escrow ri-heavy-demolition-ship)
=>
	(release-escrow wood)(release-escrow gold)
	(set-escrow-percentage wood 0)(set-escrow-percentage gold 0)
	(research ri-heavy-demolition-ship)
)
(defrule
(nand	(research-available ri-war-galley)
	(civ-selected viking))
	(up-compare-goal navy-count >= 10)
	(goal enemy-boats-goal 1)
(or	(strategic-number sn-resource-control < 2)
	(up-compare-goal biggest-enemy-navy >= 10))
	(can-research ri-careening)
=>
	(research ri-careening)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(research-available ri-galleon)
	(building-type-count dock > 0)
=>
	(set-escrow-percentage wood 20)(set-escrow-percentage food 20)
	(set-goal escrow-purpose-goal navy)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(research-available ri-fast-fire-ship)
	(building-type-count dock > 0)
=>
	(set-escrow-percentage wood 20)(set-escrow-percentage gold 20)
	(set-goal escrow-purpose-goal navy)
)
(defrule
	(strategic-number sn-resource-control < 2)
(nor	(research-available ri-fast-fire-ship)
	(research-available ri-galleon))
	(research-available ri-cannon-galleon)
(or	(up-compare-goal navy-count g:>= max-navy); >= max-fleet)
	(up-compare-goal navy-count >= 30))
	(strategic-number sn-military-level >= 0)
	(players-unit-type-count every-enemy galley-line < 20)
	(players-unit-type-count every-enemy fire-ship-line < 20)
	(players-building-type-count any-enemy castle > 0)
	(building-type-count dock > 0)
=>
	(set-escrow-percentage wood 20)(set-escrow-percentage food 20)
	(set-goal escrow-purpose-goal navy)
	(set-strategic-number sn-resource-control navy)
	(up-jump-rule 1)
)
(defrule
	(goal escrow-purpose-goal navy)
(or	(nor	(research-available ri-fast-fire-ship)
		(research-available ri-galleon))
	(building-type-count dock == 0))
=>
	(set-goal escrow-purpose-goal 0)
	(release-escrow wood)(release-escrow food)(release-escrow gold)
	(set-escrow-percentage wood 0)(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
)
(defrule
(or	(can-research ri-cannon-galleon); test
	(nor 	(research-available ri-galleon)
		(research-available ri-fast-fire-ship)))
	(can-research-with-escrow ri-cannon-galleon)
=>
	(release-escrow food)(release-escrow wood)
	(research ri-cannon-galleon)
)
(defrule
(nor 	(research-available ri-galleon)
	(research-available ri-fast-fire-ship))
(or	(can-research-with-escrow ri-shipwright)
(or	(can-research-with-escrow ri-dry-dock)
	(can-research-with-escrow ri-deck-guns)))
=>
	(release-escrow food)(release-escrow gold)
	(research ri-shipwright)
	(research ri-dry-dock)
	(research ri-deck-guns)
)
(defrule
	(strategic-number sn-resource-control <= 1)
	(building-type-count-total town-center > 0)
(or	(unit-type-count-total villager >= 36)
(or	(up-compare-goal custom-civ-pop >= 42)
(or	(goal strategy-goal sling)
(or 	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal flush)))))
;(or	(and	(food-amount >= 200)
;		(wood-amount >= 125))
;	(nand	(goal unit-goal my-unique-unit-line)
;		(research-available ri-stone-mining)))
	(can-research ri-double-bit-axe)
=>
	(research ri-double-bit-axe)
)
#load-if-not-defined SARACEN-CIV
(defrule
	(strategic-number sn-resource-control <= 1)
	(building-type-count-total town-center > 0)
	(strategic-number sn-current-age >= fc-transit)
(nand	(goal unit-goal my-unique-unit-line)
	(research-available ri-stone-mining))
(or	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(up-research-status c: ri-bow-saw >= research-pending))
	(can-research ri-horse-collar)
=>
	(research ri-horse-collar)
)
#else
(defrule
	(strategic-number sn-resource-control <= 1)
	(strategic-number sn-current-age >= fc-transit)
(or	(or	(commodity-selling-price stone < 100)
		(commodity-buying-price food > 130))
	(or	(dropsite-min-distance stone > 5)
		(or	(strategic-number sn-stone-gatherer-percentage == 0)
			(goal strategy-goal boom))))
(or	(building-type-count-total barracks > 0)
	(goal unit-goal my-unique-unit-line))
	(can-research ri-horse-collar)
=>
	(research ri-horse-collar)
)
#end-if
(defrule
	(strategic-number sn-resource-control <= 1)
	(building-type-count-total town-center > 0)
(or	(and	(or	(unit-type-count-total villager >= 36)
			(or	(up-compare-goal custom-civ-pop >= 42)
				(strategic-number sn-current-age >= fc-transit)))
		(up-research-status c: ri-double-bit-axe >= research-pending))
(or	(and	(building-type-count-total town-center >= tc-level-three)
		(strategic-number sn-current-age >= fc-transit))
(or	(and	(goal strategy-goal flush)
		(or	(not (research-available ri-man-at-arms))
			(or	(building-type-count-total archery-range > 1)
				(building-type-count-total stable > 0))))
	(goal strategy-goal sling))))
	(can-research ri-horse-collar)
=>
	(research ri-horse-collar)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(up-compare-goal custom-civ-pop >= 42)
(or	(and	(goal strategy-goal flush)
		(or	(and	(food-amount >= 550)
				(gold-amount < 75))
			(goal unit-goal archer)))
	(goal strategy-goal sling))
	(can-research ri-gold-mining)
=>
	(research ri-gold-mining)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(or	(strategic-number sn-gold-gatherer-percentage >= 20)
		(or	(and	(goal unit-goal knight)
				(up-compare-goal position-goal == flank))
			(goal unit-goal monk)))
	(up-compare-goal custom-civ-pop >= 48))
	(strategic-number sn-current-age >= fc-transit)
	(can-research ri-gold-mining)
=>
	(research ri-gold-mining)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(strategic-number sn-current-age >= ci-transit)
(or	(unit-type-count cavalry-unit-class > low-min-number-upgrade)
(or	(unit-type-count cavalry-archer-class > low-min-number-upgrade)
(or	(unit-type-count scout-cavalry >= mid-min-number-upgrade);scouts aren't included in cavalry-unit-class
(or	(unit-type-count genitour-line >= mid-min-number-upgrade); to be sure
(or	(unit-type-count camel-archer-line >= mid-min-number-upgrade); to be sure
	(unit-type-count conquistador-line >= mid-min-number-upgrade)))))))
	(can-research ri-bloodlines)
=>
	(research ri-bloodlines)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-current-age >= fc-transit)
(or	(goal unit-goal knight)
	(goal unit-goal cavalry-archer))
	(up-compare-goal strategy-goal != boom)
	(can-research ri-bloodlines)
=>
	(research ri-bloodlines)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count infantry-class >= mid-min-number-upgrade)
	(and	(goal unit-goal eagle-warrior)
		(building-type-count-total barracks > 0))); don't research too early on islands
(or	(and	(strategic-number sn-current-age >= fc-transit)
		(up-research-status c: ri-gold-mining >= research-pending))
(or	(goal hostilities-goal 1)
	(death-match-game)))
	(can-research ri-scale-mail)
=>
	(research ri-scale-mail)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(or	(unit-type-count cavalry-unit-class > low-min-number-upgrade)
		(unit-type-count scout-cavalry >= mid-min-number-upgrade))
	(and	(building-type-count-total stable > 1)
		(food-amount > 300)))
	(strategic-number sn-current-age >= fc-transit)
	(can-research ri-scale-barding)
=>
	(research ri-scale-barding)
)
(defrule
(or	(and	(strategic-number sn-resource-control <= 2)
		(or	(or	(and	(building-type-count-total siege-workshop > 0)
					(nand	(goal enemy-goal eagle-warrior)
						(strategic-number sn-archer-threat == 0)))
				(strategic-number sn-archer-threat >= 1))
			(unit-type-count-total skirmisher-line >= mid-min-number-upgrade)))
	(strategic-number sn-resource-control == ri-elite-skirmisher))
	(can-research ri-elite-skirmisher)
=>
	(research ri-elite-skirmisher)
)
(defrule
(or	(and	(strategic-number sn-resource-control <= 2)
		(or	(or	(and	(building-type-count-total siege-workshop > 0)
					(nand	(goal enemy-goal eagle-warrior)
						(strategic-number sn-archer-threat == 0)))
				(strategic-number sn-archer-threat >= 1))
			(unit-type-count-total skirmisher-line >= mid-min-number-upgrade)))
	(strategic-number sn-resource-control == ri-imperial-skirmisher))
	(can-research ri-imperial-skirmisher)
=>
	(research ri-imperial-skirmisher)
)
(defrule
(or	(unit-type-count eagle-warrior >= 8)
(or	(goal unit-goal eagle-warrior)
	(strategic-number sn-resource-control == ri-elite-eagle-warrior)))
	(can-research-with-escrow ri-eagle-warrior)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-eagle-warrior)
)
(defrule
(or	(or	(unit-type-count eagle-warrior-line >= 11)
		(and	(not (civ-selected aztec))
			(current-age-time >= 300)))
	(goal unit-goal eagle-warrior))
	(can-research-with-escrow ri-elite-eagle-warrior)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(research ri-elite-eagle-warrior)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count-total monastery-class > 4)
	(and	(goal enemy-goal flush)
		(goal ranged-unit-type-goal monk)))
=>
	(research ri-sanctity)
	(research ri-theocracy)
	(research ri-illumination)
	(research ri-block-printing)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(up-research-status c: ri-sanctity >= research-pending)
	(unit-type-count-total monastery-class > 4)
(or	(civ-selected aztec)
	(goal forgotten 1))
	(can-research ri-fervor)
=>
	(research ri-fervor)
)
#load-if-defined AZTEC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(building-type-count-total monastery > 2)
	(unit-type-count-total monastery-class > 19)
	(current-age >= imperial-age)
	(population >= max-pop)
	(can-research ri-herbal-medicine)
=>
	(research ri-herbal-medicine)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(goal ranged-unit-type-goal monk); redemption will lure monks into death so avoid it unless enemy tries to counter monks with siege
(or	(research-completed ri-herbal-medicine); teeest
(or	(players-unit-type-count any-enemy scorpion-line > 1); 2
(or	(players-unit-type-count any-enemy bombard-cannon > 0)
	(players-unit-type-count any-enemy mangonel-line > 0))))
	(can-research ri-redemption)
=>
	(research ri-redemption)
)
(defrule
(or	(strategic-number sn-resource-control < 1)
	(strategic-number sn-resource-control == ri-heresy))
(or	(and	(and	(unit-type-count-total monastery-class > 12)
			(strategic-number sn-current-age >= ci-transit))
		(unit-type-count-total monastery-class > 5))
	(and	(players-unit-type-count any-enemy monk > 3)
		(goal ranged-unit-type-goal monk)))
	(can-research ri-atonement)
=>
	(research ri-atonement)
)
#load-if-defined CELTIC-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(can-research-with-escrow ri-heavy-scorpion)
	(can-research-with-escrow my-unique-research))
=>
	(release-escrow wood)(release-escrow food)(release-escrow gold)
	(research ri-heavy-scorpion)
	(research my-unique-research)
)
#else
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count-total scorpion-line > low-min-number-upgrade)
	(goal ranged-unit-type-goal scorpion))
	(can-research ri-heavy-scorpion)
=>
	(research ri-heavy-scorpion)
)
(defrule
(or	(civ-selected japanese)
	(civ-selected viking))
	(strategic-number sn-resource-control < 1)
	(players-unit-type-count focus-player skirmisher-line > 20)
	(up-compare-goal trade-units > 5)
	(can-research ri-heavy-scorpion)
=>
	(research ri-heavy-scorpion)
)
#end-if
(defrule; test
(or	(unit-type-count-total my-unique-unit-line >= high-min-number-upgrade)
(or	(unit-type-count-total my-unique-unit-line >= 10)
	(goal unit-goal my-unique-unit-line)))
	(up-research-status c: my-unique-unit-upgrade < research-pending)
	(up-compare-goal uu-up-goal != 1)
(or	(strategic-number sn-military-level >= 0)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
=>
	(set-goal uu-up-goal 1)
;	(disable-self)
)
(defrule
(or	(goal unit-goal my-unique-unit-line)
(or	(goal control-goal my-unique-unit-line)
(or	(unit-type-count-total my-unique-unit-line >= 9)
(or	(unit-type-count-total huskarl-set >= 9)
(or	(unit-type-count-total my-unique-unit-line >= high-min-number-upgrade)
(or	(unit-type-count-total huskarl-set >= high-min-number-upgrade)
	(goal uu-up-goal 1)))))))
	(can-research-with-escrow my-unique-unit-upgrade)
=>
	(release-escrow wood)(release-escrow food)(release-escrow gold);(release-escrow stone)
	(research my-unique-unit-upgrade)
	(set-goal uu-up-goal 0)
)
(defrule
	(current-age-time > 180)
	(game-time > 1800); not in DM
(or	(gold-amount > 1800)
	(up-compare-goal trade-units > 18))
	(or (or (civ-selected saracen)(civ-selected turkish))(civ-selected japanese))
	(can-research-with-escrow my-unique-unit-upgrade)
=>
	(release-escrow wood)(release-escrow food)(release-escrow gold);(release-escrow stone)
	(research my-unique-unit-upgrade)
	(set-goal uu-up-goal 0)
)
(defrule
	(population >= del-civ-pop)
	(current-age-time > 180)
(or	(gold-amount > 1800)
(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(and	(civ-selected saracen)
		(or	(unit-type-count-total camel-line >= 9)
			(unit-type-count-total my-unique-unit-line >= 9)))))
(or	(civ-selected saracen)
	(civ-selected byzantine))
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow wood)(release-escrow food)(release-escrow gold);(release-escrow stone)
	(research my-unique-research)
)
#load-if-defined TURKISH-CIV
(defrule
	(population >= max-civ-pop)
(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
(or	(unit-type-count-total bombard-cannon >= 4)
(or	(unit-type-count-total cannon-galleon-line >= 4)
	(building-type-count-total bombard-tower >= 4))))
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow gold)(release-escrow stone)
	(research my-unique-research)
)
#end-if
#load-if-defined GOTHIC-CIV
(defrule
	(strategic-number sn-resource-control != ri-long-swordsman)
	(goal unit-goal knight)
	(building-type-count town-center < tc-level-three)
	(unit-type-count-total militiaman-line < 6); test
	(goal control-goal militiaman-line)
=>
	(up-jump-rule 4)
)
#end-if
(defrule
(or	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-resource-control == ri-long-swordsman))
(or	(unit-type-count-total militiaman-line >= 6)
(or	(goal unit-goal militiaman-line)
	(goal control-goal militiaman-line)))
(or	(unit-type-count-total militiaman-line >= 6)
(or	(goal strategy-goal flush)
	(strategic-number sn-current-age >= fc-transit)))
	(can-research ri-man-at-arms)
=>
	(research ri-man-at-arms)
)
(defrule
(or	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-resource-control == ri-long-swordsman))
(or	(unit-type-count-total militiaman-line >= 6)
(or	(goal unit-goal militiaman-line)
	(goal control-goal militiaman-line)))
	(can-research ri-long-swordsman)
=>
	(research ri-long-swordsman)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count-total militiaman-line >= 6)
(or	(goal unit-goal militiaman-line)
	(goal control-goal militiaman-line)))
	(can-research ri-two-handed-swordsman)
=>
	(research ri-two-handed-swordsman)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count-total militiaman-line >= 6)
(or	(goal unit-goal militiaman-line)
	(goal control-goal militiaman-line)))
	(can-research ri-champion)
=>
	(research ri-champion); end jump
)
(defrule
(or	(and	(strategic-number sn-resource-control <= 2)
		(or	(goal strategy-goal flush)
			(current-age-time > 240)))
	(strategic-number sn-resource-control == ri-crossbow))
(or	(unit-type-count-total archer-line >= high-min-number-upgrade)
(or	(goal ranged-unit-type-goal archer)
(or	(strategic-number sn-resource-control == ri-crossbow)
	(and	(unit-type-count-total archer >= 7)
		(goal hostilities-goal 1)))))
	(can-research ri-crossbow)
=>
	(research ri-crossbow)
)
(defrule
(or	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-resource-control == ri-arbalest))
(or	(unit-type-count-total archer-line >= high-min-number-upgrade)
(or	(goal ranged-unit-type-goal archer)
	(and	(unit-type-count-total archer-line >= 9)
		(goal hostilities-goal 1))))
	(can-research ri-arbalest)
=>
	(research ri-arbalest)
)
(defrule
	(strategic-number sn-resource-control <= 2)
; test	(unit-type-count-total battle-elephant-line >= 4)
(or	(unit-type-count-total battle-elephant-line >= high-min-number-upgrade)
(or	(unit-type-count-total battle-elephant-line >= 8)
(or	(goal unit-goal battle-elephant)
	(goal control-goal battle-elephant))));
	(can-research ri-elite-battle-elephant)
=>
	(research ri-elite-battle-elephant)
)
(defrule
	(unit-type-count-total knight-line < 20)
(or	(civ-selected malay)
(or	(civ-selected magyar)
(or	(civ-selected slavic); get more uu instead
(or	(civ-selected mongol)
	(civ-selected persian)))))
	(up-compare-goal unit-goal != knight)
	(up-compare-goal control-goal != knight)
=>
	(up-jump-rule 2)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count-total knight-line > 6)
(or	(unit-type-count-total knight-line > 12)
(or	(goal unit-goal knight)
	(goal control-goal knight)));
	(can-research ri-cavalier)
=>
	(research ri-cavalier)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(and	(goal anti-cavalry-threat-goal 0)
		(and	(up-compare-goal unit-goal != battle-elephant)
			(up-compare-goal control-goal != battle-elephant)))
	(goal unit-goal knight))
(or 	(up-research-status c: ri-bloodlines >= research-pending)
	(civ-selected frankish))
	(can-research ri-cavalier)
=>
	(research ri-cavalier)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or 	(up-research-status c: ri-bloodlines >= research-pending)
	(civ-selected frankish))
	(can-research-with-escrow ri-paladin)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-paladin)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count ranged-unit-class >= mid-min-number-upgrade)
	(unit-type-count cavalry-archer-class >= mid-min-number-upgrade))
(or	(or	(gold-amount < 200)
		(strategic-number sn-current-age >= ci-transit))
	(goal hostilities-goal 1))
	(can-research-with-escrow ri-thumb-ring)
=>
	(release-escrow wood)(release-escrow food)
	(research ri-thumb-ring)
)
#load-if-not-defined GOTHIC-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
	(up-research-status c: ri-bloodlines >= research-available); pending
(or	(unit-type-count villager >= 40); dont research this at castle age start when rushing
	(population >= del-civ-pop))
(or	(and	(food-amount > 350)
		(or	(gold-amount < 200)
			(strategic-number sn-current-age >= ci-transit)))
	(unit-type-count-total scout-cavalry > 6))
	(can-research ri-light-cavalry)
=>
	(research ri-light-cavalry)
)
(defrule
(or	(goal monk-threat-goal 1)
	(and	(strategic-number sn-resource-control <= 2)
		(and	(and	(food-amount > 400)
				(gold-amount < 100))
				(or	(civ-selected frankish)
					(civ-selected briton)))))
	(can-research ri-light-cavalry)
=>
	(research ri-light-cavalry)
)
(defrule
	(game-time < 1500)
(or	(players-building-type-count every-enemy monastery > 1)
	(and	(players-building-type-count every-enemy castle > 0)
		(players-unit-type-count every-enemy monk > 3)))
	(can-research ri-light-cavalry)
=>
	(research ri-light-cavalry)
)
#end-if
(defrule
(nand	(civ-selected magyar)
	(goal monk-threat-goal 0)); get UU instead
	(strategic-number sn-resource-control <= 2)
	(can-research ri-hussar)
=>
	(research ri-hussar)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count cavalry-archer-line >= high-min-number-upgrade)
(or	(goal unit-goal cavalry-archer)
	(and	(civ-selected hun)
		(up-compare-goal trade-units > 5))))
	(unit-type-count cavalry-archer-line >= mid-min-number-upgrade)
	(can-research ri-heavy-cavalry-archer)
=>
	(research ri-heavy-cavalry-archer)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count ranged-unit-class >= high-min-number-upgrade)
(or	(unit-type-count cavalry-archer-class >= high-min-number-upgrade)
(or	(or	(up-research-status c: ri-crossbow >= research-pending)
		(unit-type-count cavalry-archer-class >= low-min-number-upgrade)); mid
(or	(or	(unit-type-count ranged-unit-class >= low-min-number-upgrade); mid
		(goal strategy-goal flush))
	(up-research-status c: ri-chemistry >= research-pending)))))
	(can-research ri-fletching)
=>
	(research ri-fletching)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-resource-control == ri-fletching))
	(strategic-number sn-current-age >= fc-transit)
(or	(or	(goal unit-goal cavalry-archer)
		(goal unit-goal archer))
	(goal unit-goal skirmisher))
	(can-research ri-fletching)
=>
	(research ri-fletching)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-resource-control == ri-fletching))
	(strategic-number sn-current-age >= fc-transit);(current-age >= castle-age)
	(building-type-count castle > 0)
(or	(unit-type-count ranged-unit-class > 0)
	(unit-type-count cavalry-archer-class > 0))
	(can-research ri-fletching)
=>
	(research ri-fletching)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(or	(unit-type-count ranged-unit-class >= mid-min-number-upgrade)
		(unit-type-count cavalry-archer-class >= mid-min-number-upgrade))
	(and	(goal unit-goal skirmisher)
		(current-age-time > 45))); 60
	(can-research ri-bodkin-arrow)
=>
	(research ri-bodkin-arrow)
)
(defrule
(or	(and	(goal strategy-goal rush)
		(or	(goal unit-goal cavalry-archer)
			(goal unit-goal archer)))
	(or	(and	(building-type-count castle > 1)
			(population >= max-civ-pop))
		(strategic-number sn-resource-control == ri-bodkin-arrow)))
	(can-research ri-bodkin-arrow)
=>
	(research ri-bodkin-arrow)
)
(defrule
(or	(and	(unit-type-count infantry-class >= mid-min-number-upgrade)
		(strategic-number sn-resource-control <= 2))
	(goal train-civ-goal ri-chain-mail))
	(can-research-with-escrow ri-chain-mail)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-chain-mail)
)

#load-if-not-defined DIFFICULTY-EASIEST; test
(defrule
(or	(unit-type-count galley-line >= low-min-number-upgrade)
(or	(unit-type-count caravel-line >= low-min-number-upgrade)
	(unit-type-count longboat-line >= low-min-number-upgrade)))
(or	(can-research ri-fletching)
(or	(can-research ri-bodkin-arrow)
	(can-research ri-bracer)))
=>
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(population > sixty-percent-pop)
	(unit-type-count cavalry-unit-class >= high-min-number-upgrade)
	(research-available ri-plate-barding)
=>
	(set-escrow-percentage food 20)(set-escrow-percentage gold 20)
	(set-goal escrow-purpose-goal blacksmith)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count cavalry-unit-class >= mid-min-number-upgrade)
	(can-research-with-escrow ri-plate-barding)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(set-goal escrow-purpose-goal 0)
	(research ri-plate-barding)
)
#load-if-not-defined DIFFICULTY-EASY
(defrule
	(strategic-number sn-resource-control <= 2)
	(population > sixty-percent-pop)
	(not (can-research-with-escrow ri-bracer))
	(research-available ri-bracer)
=>
	(set-escrow-percentage food 20)(set-escrow-percentage gold 20)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(can-research-with-escrow ri-bracer)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(research ri-bracer)
)
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(strategic-number sn-resource-control <= 2)
	(current-age-time > 60)
	(can-research ri-conscription)
=>
	(research ri-conscription)
)
#end-if
#end-if; test
#end-if
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count infantry-class < low-min-number-upgrade)
	(up-research-status c: ri-scale-mail >= research-pending))
	(up-research-status c: ri-scale-barding >= research-pending)
	(unit-type-count cavalry-unit-class > low-min-number-upgrade)
(or	(unit-type-count infantry-class >= low-min-number-upgrade)
	(unit-type-count ballista-elephant-line <= low-min-number-upgrade))
	(strategic-number sn-current-age >= fc-transit)
	(can-research ri-forging)
=>
	(research ri-forging)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(nand	(goal unit-goal eagle-warrior)
	(research-available ri-chain-mail))
(or	(unit-type-count cavalry-unit-class < low-min-number-upgrade)
	(up-research-status c: ri-scale-barding >= research-pending))
	(unit-type-count infantry-class > low-min-number-upgrade)
	(up-research-status c: ri-scale-mail >= research-pending)
(nand	(goal strategy-goal boom)
	(goal hostilities-goal 0))
	(strategic-number sn-current-age >= fc-transit)
	(can-research ri-forging)
=>
	(research ri-forging)
)
#load-if-not-defined DIFFICULTY-EASIEST; test
(defrule
	(strategic-number sn-resource-control <= 0)
(or	(up-research-status c: ri-chain-barding >= research-pending)
	(up-research-status c: ri-chain-mail >= research-pending))
(or	(or	(strategic-number sn-current-age >= ci-transit)
		(goal hostilities-goal 1))
	(and	(goal unit-goal eagle-warrior)
		(up-compare-goal strategy-goal != fast-imp)))
	(can-research-with-escrow ri-iron-casting)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-iron-casting)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(population > sixty-percent-pop)
(or 	(unit-type-count infantry-class >= high-min-number-upgrade)
	(unit-type-count cavalry-unit-class >= high-min-number-upgrade))
	(not (can-research-with-escrow ri-blast-furnace))
	(research-available ri-blast-furnace)
=>
	(set-escrow-percentage food 20)(set-escrow-percentage gold 20)
	(set-goal escrow-purpose-goal blacksmith)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(nand	(research-available ri-plate-mail)
	(unit-type-count infantry-class >= high-min-number-upgrade))
(nand	(research-available ri-plate-barding)
	(unit-type-count cavalry-unit-class >= high-min-number-upgrade))
	(can-research-with-escrow ri-blast-furnace)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(research ri-blast-furnace)
	(set-goal escrow-purpose-goal 0)
)
#end-if; test
(defrule
	(goal unit-goal knight)
	(unit-type-count knight-line > 12)
(or	(up-compare-goal anti-cavalry-threat-goal <= 0)
	(up-research-status c: ri-arbalest >= research-available))
	(game-time < 2700)
(or	(research-available ri-cavalier)
;(or	(up-research-status c: ri-cavalier == research-pending)
	(research-available ri-paladin));)
=>
	(up-jump-rule 2)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(population > sixty-percent-pop)
	(building-type-count university > 0)
(or	(current-age-time > 120)
(or	(goal unit-goal gunpowder-class)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)))
	(not (can-research-with-escrow ri-chemistry))
	(research-available ri-chemistry)
=>
	(set-escrow-percentage food 20)(set-escrow-percentage gold 20)
)
(defrule
(or	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-resource-control == ri-chemistry))
(or	(current-age-time > 120)
(or	(goal unit-goal gunpowder-class)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)))
	(can-research-with-escrow ri-chemistry)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(research ri-chemistry)
)
;#load-if-not-defined PERSIAN-CIV
;#load-if-not-defined SPANISH-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count cavalry-archer-line >= high-min-number-upgrade)
(or	(goal unit-goal cavalry-archer)
(or	(goal control-goal cavalry-archer)
	(and	(civ-selected hun)
		(unit-type-count cavalry-archer-line >= mid-min-number-upgrade)))))
	(unit-type-count cavalry-archer-line >= low-min-number-upgrade)
	(can-research ri-parthian-tactics)
=>
	(research ri-parthian-tactics)
)
;#end-if
;#end-if
#load-if-not-defined DIFFICULTY-EASIEST; test
(defrule
	(strategic-number sn-resource-control <= 2)
	(population > sixty-percent-pop)
	(unit-type-count infantry-class >= high-min-number-upgrade)
	(research-available ri-plate-mail)
=>
	(set-escrow-percentage food 20)(set-escrow-percentage gold 20)
	(set-goal escrow-purpose-goal blacksmith)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(unit-type-count infantry-class >= mid-min-number-upgrade)
	(can-research-with-escrow ri-plate-mail)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(set-goal escrow-purpose-goal 0)
	(research ri-plate-mail)
)
#end-if; test
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(or	(unit-type-count gunpowder-class > low-min-number-upgrade)
		(unit-type-count conquistador-line > low-min-number-upgrade))
	(and	(up-research-status c: ri-fletching >= research-pending)
		(or	(or	(unit-type-count ranged-unit-class >= mid-min-number-upgrade)
				(unit-type-count cavalry-archer-class >= mid-min-number-upgrade))
			(and	(goal hostilities-goal 1)
				(goal strategy-goal flush)))))
	(can-research ri-padded-archer-armor)
=>
	(research ri-padded-archer-armor)
)
#load-if-not-defined DIFFICULTY-EASIEST; test
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count ranged-unit-class > low-min-number-upgrade)
	(unit-type-count cavalry-archer-class > low-min-number-upgrade))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
(or	(strategic-number sn-current-age >= ci-transit)
	(goal hostilities-goal 1))
	(can-research-with-escrow ri-leather-archer-armor)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-leather-archer-armor)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count gunpowder-class > low-min-number-upgrade)
	(unit-type-count conquistador-line > low-min-number-upgrade))
(or	(strategic-number sn-current-age >= ci-transit)
	(goal hostilities-goal 1))
	(can-research-with-escrow ri-leather-archer-armor)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-leather-archer-armor)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(not (research-available ri-bracer))
(or	(or 	(unit-type-count ranged-unit-class > low-min-number-upgrade)
		(unit-type-count cavalry-archer-class > low-min-number-upgrade))
	(or	(unit-type-count gunpowder-class > low-min-number-upgrade)
		(unit-type-count conquistador-line > low-min-number-upgrade)))
	(can-research-with-escrow ri-ring-archer-armor)
=>
	(release-escrow food)(release-escrow gold)	
	(research ri-ring-archer-armor)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(strategic-number sn-current-age >= ci-transit)
	(and	(gold-amount < 200)
		(or	(food-amount > 500)
			(goal hostilities-goal 1))))
	(unit-type-count infantry-class >= mid-min-number-upgrade)
	(can-research ri-squires)
=>
	(research ri-squires)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(or	(gold-amount < 200)
		(strategic-number sn-current-age >= ci-transit))
	(goal hostilities-goal 1))
(or	(unit-type-count cavalry-unit-class >= mid-min-number-upgrade)
(or	(unit-type-count cavalry-archer-class >= mid-min-number-upgrade)
	(unit-type-count conquistador-line >= mid-min-number-upgrade)))
	(can-research ri-husbandry)
=>
	(research ri-husbandry)
)
#end-if; test
(defrule
(or	(unit-type-count-total spearman-line >= 6)
(or	(unit-type-count-total spearman-line >= mid-min-number-upgrade)
	(strategic-number sn-cavalry-threat >= 1)))
(nand	(and	(or	(goal unit-goal knight)
			(goal unit-goal battle-elephant))
		(and	(game-time < 2400)
			(and	(strategic-number sn-current-age <= ci-transit)
				(strategic-number sn-cavalry-threat <= 2)))); 3
	(or	(civ-selected indian)
		(goal strategy-goal boom)))
	(can-research ri-pikeman)
=>
	(research ri-pikeman)
)
(defrule
	(unit-type-count spearman-line >= high-min-number-upgrade)
	(research-available ri-halberdier)
	(not (goal escrow-purpose-goal blacksmith))
=>
	(set-escrow-percentage gold 67)
	(set-goal escrow-purpose-goal ri-halberdier)
)
(defrule
(or	(and	(escrow-amount gold >= 225)
		(not (goal escrow-purpose-goal ri-halberdier)))
	(escrow-amount gold >= 600))
	(not (goal escrow-purpose-goal my-unique-unit-line))
	(current-age >= imperial-age)
=>
	(set-escrow-percentage food 30)
	(set-escrow-percentage gold 0); stop escrowing gold when we have enough
)
(defrule
(or	(unit-type-count spearman-line >= mid-min-number-upgrade)
	(strategic-number sn-minimum-water-body-size-for-dock > water-mixed))
	(can-research-with-escrow ri-halberdier)
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(release-escrow wood)(release-escrow stone)
	(set-escrow-percentage wood 0)(set-escrow-percentage stone 0)
	(research ri-halberdier)
	(set-goal escrow-purpose-goal 0)
)
(defrule
(or	(unit-type-count-total spearman-line >= 6)
	(unit-type-count-total spearman-line >= mid-min-number-upgrade))
	(can-research ri-halberdier)
=>
	(research ri-halberdier)
)
(defrule
(or	(and	(up-research-status c: ri-halberdier != research-available)
		(goal escrow-purpose-goal ri-halberdier))
(or	(and	(unit-type-count spearman-line < 10)
		(goal escrow-purpose-goal ri-halberdier))
	(and	(and	(unit-type-count infantry-class < 10)
			(unit-type-count cavalry-unit-class < 10))
		(goal escrow-purpose-goal blacksmith))))
=>
	(release-escrow food)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage gold 0)
	(set-goal escrow-purpose-goal 0)
)
(defrule
	(up-research-status c: ri-elite-eagle-warrior >= research-pending); try to press advatange with as many EEW as possible in early imp
	(current-age-time < 480); 600
	(population < del-civ-pop)
=>
	(release-escrow food)(release-escrow wood)(release-escrow gold)
	(set-escrow-percentage food 0)(set-escrow-percentage wood 0)(set-escrow-percentage gold 0)
	(set-goal escrow-purpose-goal 0)
)
(defrule
	(strategic-number sn-resource-control <= 2)
;	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(and	(strategic-number sn-resource-control <= 1)
		(population > max-civ-pop))
(or	(current-age-time > 120); 180
	(goal team-coordination-goal 1)))
	(unit-type-count-total battering-ram-line >= 1)
	(can-research ri-capped-ram)
=>
	(research ri-capped-ram)
)
(defrule
	(strategic-number sn-resource-control <= 2); 1
;	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(and	(strategic-number sn-resource-control <= 1)
		(population > max-civ-pop))
	(goal team-coordination-goal 1))
	(unit-type-count-total battering-ram-line >= 2); 4
	(can-research ri-siege-ram)
=>
	(research ri-siege-ram)
)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(defrule
	(goal save-wood-goal 0)
	(strategic-number sn-resource-control <= 1)
(or	(up-research-status c: ri-bow-saw >= research-pending)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
	(building-type-count-total town-center >= tc-level-two))))
(or	(strategic-number sn-gold-gatherer-percentage >= 26)
(or	(strategic-number sn-current-age >= ci-transit)
(or	(building-type-count-total monastery > 2); mush
	(and	(food-amount >= 400)
		(gold-amount < 200)))))
	(can-research ri-gold-shaft-mining)
=>
	(research ri-gold-shaft-mining)
)
(defrule
(or	(can-research ri-crop-rotation)
	(can-research ri-two-man-saw))
=>
	(research ri-crop-rotation)
	(research ri-two-man-saw)
)
#end-if
#end-if
(defrule
(or	(strategic-number sn-stone-gatherer-percentage >= 10)
	(strategic-number sn-current-age >= ci-transit))
	(strategic-number sn-stone-gatherer-percentage >= 3)
	(strategic-number sn-current-age >= fc-transit)
(or	(building-type-count-total barracks > 0); for saracens, to finish the barracks first to drop the other military buildings before castle age
(or	(goal unit-goal my-unique-unit-line)
	(strategic-number sn-current-age >= ci-transit)))
	(can-research ri-stone-mining)
=>
	(research ri-stone-mining)
)












#load-if-not-defined DIFFICULTY-EASIEST; test
#load-if-not-defined DIFFICULTY-EASY
(defrule; back-up blacksmith research rules
	(strategic-number sn-resource-control != 0)
	(strategic-number sn-resource-control != 2)
	(goal team-coordination-goal 0)
(or	(population < del-civ-pop)
	(and	(population < eighty-five-percent-pop)
		(current-age < imperial-age)))
=>
	(up-jump-rule 2))
(defrule
	(strategic-number sn-current-age >= fc-transit)
(or	(building-type-count watch-tower >= 3)
(or	(building-type-count castle >= 3)
(or	(unit-type-count-total rattan-archer-line >= high-min-number-upgrade)
(or	(unit-type-count-total ranged-unit-class >= high-min-number-upgrade)
(or	(unit-type-count-total slinger >= high-min-number-upgrade)
	(unit-type-count-total cavalry-archer-class >= high-min-number-upgrade))))))
=>
	(research ri-fletching)
	(research ri-bodkin-arrow)
	(research ri-bracer))
(defrule
	(strategic-number sn-current-age >= fc-transit)
(or	(unit-type-count-total ballista-elephant-line >= high-min-number-upgrade)
(or	(unit-type-count-total scout-cavalry >= high-min-number-upgrade)
(or	(unit-type-count-total cavalry-unit-class >= high-min-number-upgrade)
(or	(unit-type-count-total magyar-huszar-line >= high-min-number-upgrade)
	(unit-type-count-total boyar-line >= high-min-number-upgrade)))))
=>
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding))
(defrule
	(strategic-number sn-current-age >= fc-transit)
(or	(unit-type-count-total infantry-class >= high-min-number-upgrade)
(or	(unit-type-count-total kamayuk-line >= high-min-number-upgrade)
	(unit-type-count-total condottiero >= high-min-number-upgrade)))
=>
	(research ri-scale-mail)
	(research ri-chain-mail)
	(research ri-plate-mail))
(defrule
	(up-research-status c: ri-bodkin-arrow >= research-pending)
(or	(unit-type-count-total ranged-unit-class >= high-min-number-upgrade)
(or	(unit-type-count-total cavalry-archer-class >= high-min-number-upgrade)
(or	(unit-type-count-total arambai-line >= high-min-number-upgrade)
(or	(unit-type-count-total rattan-archer-line >= high-min-number-upgrade)
(or	(unit-type-count-total slinger >= high-min-number-upgrade)
(or	(unit-type-count-total elephant-archer-line >= high-min-number-upgrade)
	(unit-type-count-total genoese-crossbowman-line >= high-min-number-upgrade)))))))
=>
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor))
(defrule
	(strategic-number sn-current-age >= fc-transit)
(or	(unit-type-count-total gunpowder-class >= high-min-number-upgrade)
	(unit-type-count-total mounted-gun-class >= high-min-number-upgrade))
=>
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor))
(defrule
	(up-research-status c: ri-chain-mail >= research-pending)
(or	(unit-type-count-total infantry-class >= high-min-number-upgrade)
(or	(unit-type-count-total kamayuk-line >= high-min-number-upgrade)
	(unit-type-count-total condottiero >= high-min-number-upgrade)))
=>
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace))
(defrule
	(up-research-status c: ri-chain-barding >= research-pending)
(or	(unit-type-count-total scout-cavalry >= high-min-number-upgrade)
(or	(unit-type-count-total cavalry-unit-class >= high-min-number-upgrade)
(or	(unit-type-count-total magyar-huszar-line >= high-min-number-upgrade)
	(unit-type-count-total boyar-line >= high-min-number-upgrade))))
=>
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace))
#end-if; test
#end-if



;********** SIEGE UNITS **********

#load-if-not-defined POPULATION-CAP-25
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal enemy-fortifications-goal 1)
	(building-type-count castle > 0)
	(current-age >= imperial-age)
	(unit-type-count-total trebuchet-set < 3)
	(population >= max-civ-pop)
	(game-time < 1200)
=>
	(set-goal save-wood-goal 1)
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(unit-type-count-total battering-ram-line < 3)
(or	(players-building-type-count any-enemy castle > 1)
	(players-building-type-count any-enemy stone-wall-line > 10)))
	(unit-type-count-total trebuchet-set == 0)
	(building-type-count-total castle > 0)
	(up-research-status  c: ri-conscription != research-pending)
	(current-age == imperial-age)
	(unit-type-count-total trebuchet-set < 1)
	(population >= max-civ-pop)
	(wood-amount < 300)
=>
	(set-goal save-wood-goal 1)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(unit-type-count-total battering-ram-line < 3)
(or	(players-building-type-count any-enemy castle > 1)
	(players-building-type-count any-enemy stone-wall-line > 10)))
	(unit-type-count-total trebuchet-set == 0)
	(building-type-count castle > 0)
	(up-research-status c: ri-conscription != research-pending)
	(current-age == imperial-age)
	(unit-type-count-total trebuchet-set < 1)
	(population >= max-civ-pop)
	(wood-amount < 300)
=>
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(current-age >= imperial-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control == 2)
	(unit-type-count-total trebuchet-set < 3)
(or	(goal enemy-fortifications-goal 1)
	(unit-type-count-total trebuchet-set < 1))
	(population >= del-civ-pop)
=>
	(set-goal save-wood-goal 1)
	(set-goal train-civ-goal -1)
)
(defrule
	(population >= del-civ-pop)
	(population-cap <= 250)
	(unit-type-count-total battering-ram-line < 4)
	(building-type-count siege-workshop > 0)
	(unit-type-count-total trebuchet-set < 1)
	(unit-type-count-total bombard-cannon < 3)
	(strategic-number sn-current-age >= imperial)
	(current-age >= castle-age)
	(current-age-time > 180)
	(wood-amount > 175)
	(gold-amount > 75)
	(unit-type-count-total villager >= 15)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
	(set-strategic-number sn-resource-control 2)
)
(defrule
	(population-cap <= 250)
	(players-building-count any-enemy > 0)
	(population >= del-civ-pop)
	(up-compare-goal custom-civ-pop > max-civ)
	(gold-amount > 1500)
	(food-amount > 1500)
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(current-age-time > 300)
	(unit-type-count-total villager >= 15)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
)
(defrule
	(building-type-count castle > 0)
	(current-age >= imperial-age)
	(population >= del-civ-pop)
	(population-cap <= 250)
	(unit-type-count-total trebuchet-set < 4)
(or	(goal enemy-fortifications-goal 1)
	(unit-type-count-total trebuchet-set < 1))
	(unit-type-count-total bombard-cannon < 6)
	(wood-amount > 200)
	(gold-amount > 200)
	(can-afford-unit trebuchet)
	(unit-type-count-total villager >= 15)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
	(set-strategic-number sn-resource-control 2)
)
#load-if-not-defined HIGHLAND-MAP
#load-if-not-defined YUCATAN-MAP
(defrule
	(population-cap <= 250)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(building-type-count-total dock > 0)
(or	(and	(up-compare-goal navy-count < 25)
		(up-compare-goal navy-count g:< max-navy)); < max-fleet)
	(and	(up-compare-goal custom-civ-pop > 50)
		(and	(can-afford-unit cannon-galleon-line)
			(unit-type-count-total cannon-galleon-line < 3)))); 6
	(population >= max-pop)
	(unit-type-count-total villager >= 50); 12
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
	(set-strategic-number sn-resource-control 1)
;	(chat-to-player my-player-number "Execute villagers to make room for a bigger navy.")
)
#end-if
#end-if
#else
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(building-type-count-total dock > 0)
(or	(and	(up-compare-goal custom-civ-pop > max-civ)
		(current-age == castle-age))
	(up-research-status c: ri-cannon-galleon >= research-pending))
	(population >= max-pop)
	(unit-type-count-total villager >= 15)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
	(set-strategic-number sn-resource-control 1)
;	(chat-to-player my-player-number "Execute villagers to make room for a bigger navy.")
)
(defrule
	(population >= max-pop)
(or	(strategic-number sn-resource-control == battering-ram)
	(and	(or	(goal forward-threat-goal 1)
			(military-population > 5))
	(and	(unit-type-count-total battering-ram-line < 2)
		(and	(unit-type-count-total trebuchet-set < 1)
			(unit-type-count-total bombard-cannon < 3)))))
	(unit-type-count-total villager >= 15)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
)
(defrule
	(current-age >= imperial-age)
	(current-age-time > 300)
	(population > del-civ-pop)
	(strategic-number sn-resource-control < 2); no siege required from rules above
	(up-compare-goal uu-up-goal != 1)
	(goal escrow-purpose-goal 0)
	(up-compare-goal custom-civ-pop > max-civ)
	(unit-type-count-total villager >= 15)
=>
	(delete-unit villager)
	(set-goal train-civ-goal -1)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(wood-amount >= 2000)
(or	(food-amount >= 2000)
	(gold-amount >= 2000)))
	(unit-type-count-total fishing-ship >= 1)
	(unit-type-count-total transport-ship < 1)
	(population >= del-civ-pop)
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
=>
	(delete-unit fishing-ship))
(defrule
	(timer-triggered two-minute-timer)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(wood-amount >= 2000)
(or	(food-amount >= 2000)
	(gold-amount >= 2000)))
	(unit-type-count-total fishing-ship < 1)
	(unit-type-count-total transport-ship < 1)
	(population >= max-pop)
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(building-type-count dock >= 1)
	(unit-type-count-total villager >= 15)
=>
	(delete-unit villager))
(defrule
	(unit-type-count fishing-ship > 0)
	(population >= del-civ-pop)
;	(housing-headroom < 10)
(or	(and	(food-amount > 500)
		(goal train-civ-goal -1))
	(and	(cc-players-unit-type-count 0 sea-fish <= 0)
		(cc-players-unit-type-count 0 shore-fish <= 0)))	
=>
	(delete-unit fishing-ship))
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); not on water maps
	(dropsite-min-distance wood > 0)
	(dropsite-min-distance wood < 20)
	(goal train-civ-goal -1)
	(strategic-number sn-resource-control < 1); no siege required from rules above
	(up-compare-goal custom-civ-pop < fourty-percent-pop); already deleted lots of villagers
=>
	(set-goal train-civ-goal 1); restart villager training
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(strategic-number sn-resource-control == 1)
	(up-compare-goal navy-count >= 24)
(or	(up-research-status c: ri-cannon-galleon < research-pending)
	(unit-type-count-total cannon-galleon-line > 7))
=>
	(set-strategic-number sn-resource-control 0)
)
; order of rules does matter as 1st rule that will be executed 1st, so next rules may not spend the resources
; so put siege training above building

#load-if-not-defined AZTEC-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(strategic-number sn-resource-control < 2)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(up-research-status c: ri-cannon-galleon < research-pending)
	(up-compare-goal navy-count >= 30)
	(up-compare-goal custom-civ-pop > 100)
	(strategic-number sn-military-level >= 0)
	(players-building-type-count any-enemy castle > 0)
(nand	(up-compare-goal forgotten != 1)
	(civ-selected briton))
(nand	(up-compare-goal forgotten == 1)
	(civ-selected hun))
=>
	(set-strategic-number sn-resource-control 2)
;debug;	(chat-to-player my-player-number "Saving resources for cannon-galleon")
)
#end-if
#end-if
#end-if
(defrule
	(wood-amount < 200)
	(gold-amount > 500)
	(up-compare-goal trade-units > 4)
(or	(or	(strategic-number sn-resource-control == 2)
		(gold-amount > 1500))
	(and	(commodity-buying-price wood < 30)
		(gold-amount > 800)))
	(commodity-buying-price wood < 80)
=>
	(chat-local-to-self "Buying wood.")
	(buy-commodity wood)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
(or	(up-compare-goal navy-count >= 16)
(or	(strategic-number sn-military-level >= 3)
	(population >= max-civ-pop)))
(or	(players-building-type-count any-enemy castle >= 1)
(or	(players-building-type-count any-enemy watch-tower >= 3)
	(players-building-type-count any-enemy bombard-tower >= 1)))
;(or	(or	(cc-players-unit-type-count any-enemy castle-arrow > 0)
;		(cc-players-unit-type-count any-enemy castle-arrow-chemistry > 0))
;	(cc-players-unit-type-count any-enemy 506 > 0))
	(unit-type-count-total cannon-galleon-line < 6)
	(can-train-with-escrow cannon-galleon-line)
=>
	(release-escrow wood)(release-escrow gold)
	(train cannon-galleon-line)
)
#load-if-defined DEFEND-WONDER
(defrule
	(building-type-count wonder <= 0)
	(players-building-type-count any-ally wonder <= 0)
	(unit-type-count-total trebuchet-set < 3)
	(can-train trebuchet)
=>
	(train trebuchet)
)
#end-if
(defrule
	(unit-type-count-total trebuchet-set < 1); 2
(or	(unit-type-count-total monastery-class >= 20)
	(difficulty < moderate))
	(can-train-with-escrow trebuchet)
=>
	(release-escrow wood)(release-escrow gold)
	(train trebuchet)
)
(defrule
(or	(population > max-civ-pop)
	(goal team-coordination-goal 1))
(or	(unit-type-count-total trebuchet-set < 2)
(or	(game-time < 1200); start in DM
(or	(goal enemy-fortifications-goal 1)
	(players-building-type-count any-enemy castle > 1))))
(or	(unit-type-count-total trebuchet-set < mid-min-number-upgrade); 5
	(unit-type-count-total trebuchet-set < number-rams)); test
	(can-train trebuchet)
=>
	(train trebuchet)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(wood-amount >= 725)
(or	(goal team-coordination-goal 1)
(or	(strategic-number sn-military-level >= 2)
(or	(and	(building-type-count-total town-center >= 3)
		(wood-amount >= 350))
	(and	(unit-type-count-total battering-ram-line < 2)
		(strategic-number sn-military-level >= 1))))))
(or	(goal team-coordination-goal 1)
(or	(and	(strategic-number sn-military-level >= 0)
		(military-population > 10))
	(population >= del-civ-pop)))
(or	(unit-type-count-total battering-ram-line < number-rams)
	(and	(strategic-number sn-current-age >= ci-transit)
		(population >= seventy-five-percent-pop)))
(or	(unit-type-count-total battering-ram-line < mid-min-number-upgrade); test
	(unit-type-count-total battering-ram-line < number-rams))
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)
(defrule
	(building-type-count-total town-center < 3)
	(up-compare-goal custom-civ-pop < max-civ)
	(population < max-civ-pop)
(or	(goal strategy-goal boom)
(or	(goal strategy-goal fast-imp)
(or	(goal unit-goal battle-elephant)
	(goal unit-goal knight))))
	(strategic-number sn-military-level < 2)
=>
	(up-jump-rule 1)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(wood-amount >= 725)
(or	(goal team-coordination-goal 1)
(or	(strategic-number sn-military-level >= 2)
(or	(and	(building-type-count-total town-center >= 3)
		(wood-amount >= 350))
	(and	(unit-type-count-total battering-ram-line < 2)
		(strategic-number sn-military-level >= 1))))))
(or	(goal team-coordination-goal 1)
(or	(and	(strategic-number sn-military-level >= 0)
		(military-population > 10))
	(population >= del-civ-pop)))
(or	(unit-type-count-total battering-ram-line < number-rams)
	(and	(strategic-number sn-current-age >= ci-transit)
		(population >= seventy-five-percent-pop)))
(or	(unit-type-count-total battering-ram-line < mid-min-number-upgrade); test
	(unit-type-count-total battering-ram-line < number-rams))
	(can-train battering-ram-line)
=>
	(train battering-ram-line); end jump
)
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(unit-type-count-total battering-ram-line < number-rams)
(or	(goal team-coordination-goal 1)
	(and	(military-population > 20)
		(or	(strategic-number sn-military-level >= 0)
			(population > sixty-percent-pop))))
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)
#else
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal unit-goal monk)
(nand	(unit-available trebuchet)
	(unit-type-count-total trebuchet-set < 1))
	(unit-type-count-total battering-ram-line < 2)
(or	(goal team-coordination-goal 1)
	(and	(military-population > 20)
		(or	(strategic-number sn-military-level >= 0)
			(population > sixty-percent-pop))))
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)
#end-if
#load-if-not-defined POPULATION-CAP-25
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
(or	(goal team-coordination-goal 1)
	(population > max-civ-pop))
(or	(unit-type-count-total battering-ram-line < 4)
(or	(not	(unit-available trebuchet))
	(up-research-status c: ri-siege-ram >= research-available))); pending
(or	(goal enemy-fortifications-goal 1)
	(unit-type-count-total battering-ram-line < 6))
	(unit-type-count-total battering-ram-line < 10); 12
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
)
(defrule
	(strategic-number sn-current-age == castle)
	(strategic-number sn-resource-control < 3)
	(unit-type-count mangonel-line < 2)
(or	(unit-type-count ranged-unit-class >= high-min-number-upgrade)
	(unit-type-count cavalry-archer-class >= mid-min-number-upgrade))
	(players-unit-type-count focus-player skirmisher-line > 12)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
(defrule
	(strategic-number sn-current-age == castle)
	(strategic-number sn-resource-control < 3)
	(unit-type-count mangonel-line < 2)
	(building-type-count-total town-center >= tc-level-two)
	(goal unit-goal my-unique-unit-line)
	(players-current-age focus-player == feudal-age)
	(wood-amount >= 200)
	(current-age >= castle-age)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
(defrule
	(strategic-number sn-resource-control < 3)
	(unit-type-count mangonel-line < 1)
(or	(and	(goal unit-goal my-unique-unit-line); assume we have a ranged uu
		(unit-type-count ranged-unit-class >= mid-min-number-upgrade))
	(goal unit-goal scorpion))
(or	(players-unit-type-count focus-player mangonel-line > 1)
	(players-unit-type-count focus-player scorpion-line > 4))
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
(defrule
	(up-compare-goal control-goal != shot)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-resource-control != battering-ram)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-archer-threat > 1)
	(current-age == castle-age)
	(unit-type-count-total mangonel-line < 1)
	(building-type-count siege-workshop >= 1)
(nor 	(can-afford-unit mangonel-line)
	(up-research-status c: ri-elite-skirmisher >= research-pending))
=>
	(set-strategic-number sn-resource-control mangonel)
	(set-goal save-wood-goal 1)
;debug;	(chat-to-player my-player-number "Saving resources for mangonel")
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(strategic-number sn-archer-threat > 1)
	(players-unit-type-count focus-player scorpion-line > 5))
(or	(current-age == castle-age)
(or	(strategic-number sn-archer-threat > 2)
	(players-unit-type-count focus-player scorpion-line > 11)))
	(unit-type-count mangonel-line < 1)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
(defrule
(or	(strategic-number sn-resource-control <= 2)
	(and	(strategic-number sn-resource-control == ri-elite-eagle-warrior)
		(food-amount < 700)))
	(up-research-status c: ri-elite-eagle-warrior < research-complete); EW die to massed ranged, EEW don't
(or	(strategic-number sn-archer-threat > 2)
	(players-unit-type-count focus-player scorpion-line > 11))
	(unit-type-count-total mangonel-line < 2)
	(goal unit-goal eagle-warrior)
	(up-compare-goal control-goal != shot)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(strategic-number sn-archer-threat > 2)
(or	(players-unit-type-count focus-player scorpion-line > 8)
	(players-unit-type-count focus-player galley-line > 15)))
	(up-research-status c: ri-onager >= research-pending)
	(unit-type-count mangonel-line < 4)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
#load-if-not-defined BERBERS-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BURMESE-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined FRANKISH-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined INDIAN-CIV
#load-if-not-defined ITALIAN-CIV
#load-if-not-defined JAPANESE-CIV
#load-if-not-defined KHMER-CIV
#load-if-not-defined MAGYAR-CIV
#load-if-not-defined MALAY-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined PERSIAN-CIV
#load-if-not-defined PORTUGUESE-CIV
#load-if-not-defined SPANISH-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined VIETNAMESE-CIV ; Siege Onagers
#load-if-not-defined VIKING-CIV ; Aztecs, Celts, Koreans, Mongols, Saracens, Teutons, Slavs, Ethiopians, Malians
(defrule
	(strategic-number sn-resource-control < 1)
	(gold-amount >= 250)
(or	(gold-amount >= 900)
	(up-research-status c: ri-onager >= research-pending))
	(strategic-number sn-cavalry-threat < 3)
	(strategic-number sn-military-level <= 1)
	(unit-type-count-total mangonel-line < mid-min-number-upgrade)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(strategic-number sn-archer-threat > 1)
	(players-unit-type-count focus-player scorpion-line >= 4))
	(strategic-number sn-cavalry-threat < 3)
	(strategic-number sn-military-level <= 1)
	(unit-type-count-total mangonel-line < mid-min-number-upgrade)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-siege-onager >= research-pending)
	(gold-amount >= 200)
	(strategic-number sn-cavalry-threat < 3)
	(military-population >= 10)
(or	(strategic-number sn-military-level <= 1)
(or	(strategic-number sn-archer-threat > 2)
	(players-unit-type-count focus-player scorpion-line > 10)))
	(unit-type-count-total mangonel-line < 16)
	(can-train mangonel-line)
=>
	(train mangonel-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(unit-type-count-total mangonel-line >= mid-min-number-upgrade)
(or	(or	(strategic-number sn-archer-threat > 3)
		(players-unit-type-count focus-player scorpion-line > 12))
	(and	(or	(strategic-number sn-archer-threat > 2)
			(players-unit-type-count focus-player scorpion-line > 8))
		(up-compare-goal trade-units > 14))))
=>
	(research ri-onager)
	(research ri-siege-onager)
	(research 445); ri-shinkichon
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(players-unit-type-count focus-player caravel-line > 18)
	(players-unit-type-count focus-player galley-line > 18))
(or	(up-compare-goal navy-count < 15)
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed))
=>
	(research ri-onager)
	(research ri-siege-onager)
	(research 445); ri-shinkichon
)
; Relic Monks

(defrule
(or	(strategic-number sn-resource-control < 1)
	(gold-amount > 250))
	(current-age == castle-age)
	(current-age-time < 480)
	(unit-type-count-total monk < 3)
	(unit-type-count-total 134 <= 0); 134 = dead monk; dont make monks when they're dying while trying to collect relics behind enemy bases.
	(can-train monk)
=>
	(train monk)
)
#end-if
(defrule
(or	(strategic-number sn-resource-control < 1)
	(strategic-number sn-resource-control == monk))
	(unit-type-count-total monk < 2)
(or	(unit-type-count-total monk < 1)
	(cc-players-unit-type-count 0 relic > 5))
	(unit-type-count-total 134 <= 0); 134 = dead monk; dont make monks when they're dying while trying to collect relics behind enemy bases.
	(can-train monk)
=>
	(train monk)
)

; Trade
(defrule
(nor	(research-available ri-double-bit-axe)
	(research-available ri-horse-collar))
	(goal strategy-goal sling)
	(can-research ri-coinage)
=> 
	(research ri-coinage)
)
(defrule
(or	(and	(strategic-number sn-resource-control <= 2)
		(strategic-number sn-current-age >= ci-transit))
	(strategic-number sn-resource-control == sling))
;	(strategic-number sn-resource-control <= 2)
;(or	(strategic-number sn-current-age >= ci-transit)
;	(and	(and	(food-amount > 500)
;			(gold-amount < 200))
;		(unit-type-count villager > villager-coinage)))
(or	(unit-type-count villager > villager-coinage)
(or	(population >= max-civ-pop)
	(up-compare-goal custom-civ-pop >= max-civ)))
	(player-in-game any-ally)
	(can-research ri-coinage)
=> 
	(research ri-coinage)
)
(defrule
(or	(and	(strategic-number sn-resource-control <= 2)
		(strategic-number sn-current-age >= ci-transit))
	(strategic-number sn-resource-control == sling))
	(player-in-game any-ally)
	(can-research ri-banking)
=> 
	(research ri-banking)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(up-compare-goal trade-units >= 4)
(or	(unit-type-count-total trade-cart >= 1)
	(unit-type-count-total trade-cog >= 1))
	(can-research-with-escrow ri-caravan)
=> 
	(release-escrow food)(release-escrow gold)
	(research ri-caravan)
)
#load-if-defined UP-GAME-AGE2-X2
(defrule
	(player-in-game any-ally)
	(can-research ri-cartography)
=>
	(research ri-cartography)
)
#else
(defrule
	(player-in-game any-ally)
	(strategic-number sn-resource-control < 1)
(or	(strategic-number sn-current-age >= ci-transit)
	(and	(up-compare-goal trade-units >= 5)
		(or	(unit-type-count-total trade-cart >= 1)
			(unit-type-count-total trade-cog >= 1))))
	(can-research ri-cartography)
=>
	(research ri-cartography)
)
#end-if
#load-if-not-defined DEFEND-WONDER
#load-if-defined ITALIAN-CIV
(defrule
(or	(strategic-number sn-resource-control < 1)
	(and	(up-compare-goal trade-units < max-trade-cart)
		(up-compare-goal trade-units < max-trade-pop)))
(or	(players-building-type-count any-ally market >= 1)
	(players-building-type-count any-ally dock >= 1))
	(can-research ri-silk-road)
=>
	(research ri-silk-road)
)
#end-if
(defrule	
(or	(or	(not(player-in-game any-ally))
		(or	(players-building-type-count every-ally market == 0)
			(building-type-count town-center == 0)))
(or	(up-compare-goal trade-units >= max-trade-pop); depending on popcap and difficulty
	(up-compare-goal trade-units >= max-trade-cart))); depending on map size
=>
	(up-jump-rule 2); rule too long
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(research-available imperial-age)
	(strategic-number sn-current-age >= ci-transit))
(or	(strategic-number sn-minimum-water-body-size-for-dock <= water-mixed)
	(map-type team-islands))	
(or	(or	(game-time > 2100)
		(and	(unit-type-count battering-ram-line > 1)
			(goal unit-goal monk)))
	(death-match-game))
	(can-train trade-cart)
=>
	(train trade-cart)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal strategy-goal sling)
	(goal under-attack-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock <= water-mixed)
	(game-time > 1800)
	(can-train trade-cart)
=>
	(train trade-cart)
)
#load-if-not-defined TEAM-ISLANDS-MAP
(defrule
(or	(up-timer-status one-minute-timer == timer-running); test
(or	(or	(not	(player-in-game any-ally))
		(or	(players-building-type-count every-ally dock <= 0)
			(building-type-count town-center <= 0)))
(or	(up-compare-goal trade-units >= max-trade-pop); depending on popcap and difficulty
	(up-compare-goal trade-units >= max-trade-cart))))
=>
	(up-jump-rule 1))
(defrule
	(strategic-number sn-resource-control < 1)
(or	(strategic-number sn-current-age >= imperial)
	(game-time >= 3000)); test
(or	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(map-type islands))
(or	(dropsite-min-distance wood <= -1); wood gone
(or	(dropsite-min-distance wood >= 480)
(or	(strategic-number sn-military-level >= 2)
(or	(goal enemy-boats-goal 0)
(or	(up-compare-goal navy-count g:>= max-navy)
	(up-compare-goal navy-count >= 30))))))
	(gold-amount < 2000)
	(players-building-type-count any-ally dock > 0)
	(unit-type-count-total trade-cog < 11); for now
	(can-train trade-cog)
=>
	(train trade-cog)
)
#end-if
(defrule
(or	(unit-type-count 178 > 2);dead trade cart (empty/loaded)
	(unit-type-count 205 > 2))
	(strategic-number sn-preferred-trade-distance > 60)
=>
	(set-strategic-number sn-preferred-trade-distance 60)
)
(defrule	
	(unit-type-count 178 <= 0)
	(unit-type-count 205 <= 0)
	(strategic-number sn-preferred-trade-distance < trade-distance)
=>
	(set-strategic-number sn-preferred-trade-distance trade-distance)
)
#end-if
#end-if ; NO WONDER-RACE

; VILLAGERS

(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count-total villager >= villager-feudal); object-type-count-total ; also for others below
(or	(or	(difficulty != hardest)
		(game-type == 9)); 8
	(or	(starting-resources != low-resources)
		(or	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
			(map-type yucatan))))
=>
	(set-strategic-number sn-enable-training-queue 0)
)
#load-if-defined DIFFICULTY-HARDEST
(defrule
(or	(and	(research-available feudal-age)
		(food-amount >= 1000));	(food-amount >= feudal-food))
(or	(and	(research-available castle-age)
		(and	(food-amount >= castle-food)
			(gold-amount >= castle-gold)))
	(and	(research-available imperial-age)
		(and	(food-amount >= imperial-food)
			(gold-amount >= imperial-gold)))))
=>
	(set-strategic-number sn-enable-training-queue 0)
)
#end-if
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count-total villager >= villager-flush)
(or	(goal strategy-goal flush)
	(and	(unit-type-count-total villager >= dark-age-villager)
		(or	(food-amount >= 1200)
			(or	(and	(food-amount >= 850)
					(unit-type-count-total villager >= 15))
				(or	(unit-type-count-total villager >= 31)
					(or	(up-compare-goal position-goal == flank)
						(or	(goal unit-goal my-unique-unit-line); but don't do with UU, to get the castle faster (prevent rush)
							(goal unit-goal monk))))))))
=>
	(set-strategic-number sn-enable-training-queue 0)
)
(defrule
(or	(and	(current-age == feudal-age)
		(and	(food-amount >= 600); 500
			(or	(food-amount >= 700); 500
				(up-pending-objects c: blacksmith >= 1))))
	(or	(and	(goal need-loom-goal 1)
			(up-research-status c: ri-loom < research-pending))
		(and	(current-age < imperial-age)
			(death-match-game))))
=>
	(set-strategic-number sn-enable-training-queue 0)
)
(defrule
	(current-age >= castle-age)
(or	(up-compare-goal strategy-goal != boom)
(or	(strategic-number sn-resource-control > 2)
	(and	(research-available imperial-age); (strategic-number sn-current-age == castle)
		(and	(food-amount >= imperial-f2)
			(gold-amount >= imperial-g2)))))
=>
	(set-strategic-number sn-enable-training-queue 0)
)
(defrule
(or	(and	(strategic-number sn-current-age >= ci-transit)
		(strategic-number sn-resource-control >= 1))
	(or	(population >= max-civ-pop)
		(and	(goal strategy-goal flush)
			(current-age-time < 300))))
	(current-age >= feudal-age)
=>
	(set-strategic-number sn-enable-training-queue 0)
)

#load-if-not-defined DEATH-MATCH
#load-if-defined WONDER-RACE
(defrule
	(up-compare-goal custom-civ-pop < max-civ); difficulty
	(population < del-civ-pop)
(or	(or	(and	(current-age <= dark-age)
			(unit-type-count-total villager < villager-wonder-dark))
		(and	(current-age >= feudal-age)
			(unit-type-count-total villager < villager-wonder-feudal)))
	(strategic-number sn-current-age >= ci-transit));(current-age >= imperial-age))
	(goal train-civ-goal 1)
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager)
)
#end-if
;#load-if-not-defined HIGH-RESOURCES-START
;#load-if-not-defined MEDIUM-RESOURCES-START
(defrule
	(up-compare-goal custom-civ-pop < max-civ); difficulty
	(population < max-civ-pop)
(or	(and	(current-age == dark-age)
		(unit-type-count-total villager < 33)); 33
	(current-age == feudal-age))
	(up-compare-goal unit-goal != wonder)
	(unit-type-count-total villager < 35)
	(goal strategy-goal fast-imp)
	(goal train-civ-goal 1)
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager)
;	(chat-local-to-self "Fast-imp test.")
)
;#end-if
;#end-if
#end-if
#load-if-not-defined WONDER-RACE
(defrule
(or	(up-compare-goal custom-civ-pop >= max-civ); difficulty
	(population >= max-civ-pop));
=>
	(up-jump-rule 5))
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count-total villager < 31)
(nor	(goal strategy-goal flush)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands))
(or	(unit-type-count-total villager < dark-age-villager)
(or	(food-amount < 700); 620
	(unit-type-count-total villager < villager-feudal)))
(or	(food-amount < 820)
	(unit-type-count-total villager < 23))
	(goal train-civ-goal 1)
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager))
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count-total villager < 31)
;(or	(unit-type-count-total villager < villager-feudal)
(or	(goal strategy-goal flush)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands))
(nand	(unit-type-count-total villager >= villager-flush)
	(food-amount >= 500))
(or	(unit-type-count-total villager < villager-feudal)
	(food-amount < 440)); 430
	(goal train-civ-goal 1)
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager))
(defrule
	(goal train-civ-goal 1)
	(current-age == feudal-age)
(or	(goal strategy-goal flush)
	(goal strategy-goal sling))
(or	(not	(research-available castle-age))
(or	(food-amount < 740)
	(gold-amount < 160)))
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager))
(defrule
	(goal train-civ-goal 1)
	(food-amount < 500) ; else escrow
	(strategic-number sn-current-age == feudal)
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager))
(defrule
	(goal train-civ-goal 1)
	(up-pending-objects c: villager <= 0)
	(food-amount >= 750)
;	(building-type-count blacksmith == 0)
	(building-type-count archery-range == 0)
	(building-type-count stable == 0)
	(building-type-count market == 0)
	(strategic-number sn-current-age == feudal)
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager)); end jump
(defrule
	(goal train-civ-goal 1)
	(current-age >= castle-age)
	(up-compare-goal custom-civ-pop < max-civ)
(or	(population < max-civ-pop)
	(game-time < 1500)); keep training villagers in DM ; 1800
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager))
#load-if-defined POPULATION-CAP-200
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(population < max-civ-pop)
	(up-compare-goal custom-civ-pop < max-civ); hmmm
	(up-compare-goal custom-civ-pop < 140)
	(goal train-civ-goal 1)
	(strategic-number sn-current-age == castle)
	(food-amount > 200)
	(gold-amount < 600)
(or	(goal unit-goal knight); train extra villagers with knights or elephants
(or	(goal unit-goal battle-elephant)
(or	(civ-selected khmer)
	(civ-selected persian))))
	(can-train villager)
=>
	(disable-timer FDrop)
	(enable-timer FDrop 21)
	(train villager)
)
#end-if
#end-if
#end-if
#end-if

#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(strategic-number sn-current-age != dark)
(or	(up-compare-goal custom-civ-pop >= max-civ)
(or	(population >= max-civ-pop)
(or	(food-amount >= 50)
	(unit-type-count villager >= 30))))
=>
	(up-jump-rule 5))
(defrule
(or	(game-time >= 76)
	(civ-selected chinese))
;	(unit-type-count-total villager >= 7);7
	(up-pending-objects c: villager <= 1)
	(up-research-status c: ri-loom != research-pending)
	(up-research-status c: ri-wheel-barrow != research-pending)
	(up-research-status c: ri-hand-cart != research-pending)
	(up-research-status c: ri-town-watch != research-pending)
	(up-research-status c: feudal-age != research-pending)
	(up-research-status c: castle-age != research-pending)
	(timer-triggered FDrop)
(or	(and	(food-amount < 50)
		(housing-headroom > 0))
	(and	(food-amount < 500)
		(and	(unit-type-count-total villager >= 20)
			(food-amount >= 400))));hopefully boar food too
=>
	(set-goal FDTaunt yes))
(defrule
(or	(game-time >= 76)
	(civ-selected chinese))
	(up-pending-objects c: villager == 0)
	(up-research-status c: ri-loom != research-pending)
	(up-research-status c: ri-wheel-barrow != research-pending)
	(up-research-status c: ri-hand-cart != research-pending)
	(up-research-status c: ri-town-watch != research-pending)
	(up-research-status c: feudal-age != research-pending)
	(up-research-status c: castle-age != research-pending)
;test	(up-timer-status FDrop != timer-running)
(or	(and	(food-amount < 50)
		(housing-headroom > 0))
	(and	(food-amount < 500)
		(and	(unit-type-count-total villager >= 20)
			(food-amount >= 400))));hopefully boar food too
=>
	(set-goal FDTaunt yes))
(defrule
	(goal FDTaunt yes)
	(up-pending-objects c: villager >= 2)
(or	(building-type-count town-center <= 1)
	(up-pending-objects c: villager >= 4))
(or	(building-type-count town-center <= 2)
	(up-pending-objects c: villager >= 6))
(or	(building-type-count town-center <= 3)
	(up-pending-objects c: villager >= 8))
(or	(building-type-count town-center <= 4)
	(up-pending-objects c: villager >= 10))
	(building-type-count town-center <= 5)
=>
;	(chat-local-to-self "Denying forced drop.")
	(set-goal FDTaunt no))
(defrule
	(goal FDTaunt yes)
	(dropsite-min-distance deer-hunting <= 12); 11
;	(food-amount < 50)
;	(up-compare-goal total-food-amount >= 50)
=>
;	(set-goal FDTaunt no)
;	(disable-timer FDrop)
;	(enable-timer FDrop 4)
;	(chat-local-to-self "Forced drop.1")
	(up-drop-resources 909 c: 4)); deer
(defrule
	(goal FDTaunt yes)
;	(food-amount < 50)
;	(up-compare-goal total-food-amount >= 50)
=>
	(set-goal FDTaunt no)
	(disable-timer FDrop)
	(enable-timer FDrop 4)
;	(chat-local-to-self "Forced drop.2")
	(up-drop-resources 907 c: 4)
	(up-drop-resources 958 c: 4)
	(up-drop-resources 910 c: 4)
	(up-drop-resources 949 c: 4)
	(up-drop-resources shore-fish c: 4)
	(up-drop-resources sea-fish c: 4))
(defrule
	(goal FDTaunt yes)
(or	(research-available feudal-age)
	(research-available castle-age))
(or	(and	(food-amount < 800)
		(food-amount >= 690))
	(and	(food-amount < 500)
		(food-amount >= 400)))
=>
	(set-goal FDTaunt no)
	(disable-timer FDrop)
	(enable-timer FDrop 4)
	(chat-local-to-self "Forced drop.3")
	(up-drop-resources food c: 4))
(defrule
	(goal FDTaunt yes)
=>
	(disable-timer FDrop)
;	(enable-timer FDrop 4)
;	(chat-local-to-self "Denying forced drop.2")
	(set-goal FDTaunt no))
(defrule
	(timer-triggered FDrop)
	(up-pending-objects c: villager >= 2)
(or	(building-type-count town-center <= 1)
	(up-pending-objects c: villager >= 4))
(or	(building-type-count town-center <= 2)
	(up-pending-objects c: villager >= 6))
(or	(building-type-count town-center <= 3)
	(up-pending-objects c: villager >= 8))
(or	(building-type-count town-center <= 4)
	(up-pending-objects c: villager >= 10))
	(building-type-count town-center <= 5)
=>
	(disable-timer FDrop)
;	(chat-local-to-self "Denying forced drop.3")
)

(defrule
	(building-type-count-total blacksmith >= 1)
=>
	(enable-timer FDrop 15)
	(disable-self))

(defrule
	(timer-triggered FDrop)
	(strategic-number sn-current-age == feudal)
	(food-amount < 800)
	(food-amount >= 690)
	(gold-amount >= 165)
=>
	(set-goal FDTaunt yes))
(defrule
	(strategic-number sn-current-age == feudal)
	(building-type-count-total blacksmith >= 1)
	(up-research-status c: ri-wheel-barrow != research-pending)
	(goal FDTaunt yes)
=>
	(set-goal FDTaunt no)
	(disable-timer FDrop)
	(enable-timer FDrop 4)
;	(chat-local-to-self "Forced drop.")
	(up-drop-resources food c: 4))

(defrule
	(timer-triggered FDrop)
	(strategic-number sn-current-age == feudal)
	(food-amount >= 740)
	(gold-amount < 200)
	(gold-amount >= 165)
=>
	(set-goal FDTaunt2 yes))
(defrule
	(strategic-number sn-current-age == feudal)
	(building-type-count-total blacksmith >= 1)
	(up-research-status c: ri-wheel-barrow != research-pending)
	(goal FDTaunt2 yes)
=>
	(set-goal FDTaunt2 no)
	(disable-timer FDrop)
	(enable-timer FDrop 4)
;	(chat-local-to-self "Forced drop.")
	(up-drop-resources gold c: 5))

(defrule
	(timer-triggered FDrop)
	(strategic-number sn-current-age > feudal)
=>
	(disable-timer FDrop)
	(disable-self))
(defrule
(or	(up-compare-goal FDTaunt != no)
	(up-compare-goal FDTaunt2 != no))
	(strategic-number sn-current-age > feudal)
=>
	(set-goal FDTaunt no)
	(set-goal FDTaunt2 no))
#end-if
#end-if
#end-if

;********** BUILDINGS **********

(defrule
	(up-pending-objects c: stone-wall-line <= 0)
	(up-pending-objects c: palisade-wall <= 0)
	(up-pending-objects c: stone-wall <= 0)
	(up-pending-objects c: fortified-wall <= 0)
	(strategic-number sn-disable-builder-assistance != 1)
=>
;	(chat-local-to-self "Disabling builder assistance.")
	(set-strategic-number sn-disable-builder-assistance 1))
(defrule
(or	(up-pending-objects c: stone-wall-line >= 1)
(or	(up-pending-objects c: palisade-wall >= 1)
(or	(up-pending-objects c: stone-wall >= 1)
	(up-pending-objects c: fortified-wall >= 1))))
	(strategic-number sn-disable-builder-assistance != 0)
=>
;	(chat-local-to-self "Enabling builder assistance.")
	(set-strategic-number sn-disable-builder-assistance 0))
#load-if-defined VICTORY-STANDARD
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(defrule
	(goal nomad no)
	(goal landnomad no)
	(wall-completed-percentage 2 < 100)
(or	(building-type-count-total wonder >= 1)
	(and	(hold-relics)
		(up-compare-goal relic-count >= 5)))
(not	(player-in-game any-ally))
	(building-type-count-total gate < 5)
	(can-build-gate 2)
=>
	(build-gate 2))
(defrule
	(goal nomad no)
	(goal landnomad no)
	(wall-completed-percentage 2 < 100)
(or	(building-type-count-total wonder >= 1)
	(and	(hold-relics)
		(up-compare-goal relic-count >= 5)))
(not	(player-in-game any-ally))
	(can-build-wall 2 stone-wall-line)
	(strategic-number sn-disable-builder-assistance != 0)
=>
;	(chat-local-to-self "Enabling builder assistance.")
	(set-strategic-number sn-disable-builder-assistance 0))
(defrule
	(goal nomad no)
	(goal landnomad no)
	(wall-completed-percentage 2 < 100)
(or	(building-type-count-total wonder >= 1)
	(and	(hold-relics)
		(up-compare-goal relic-count >= 5)))
(not	(player-in-game any-ally))
	(can-build-wall 2 stone-wall-line)
=>
	(build-wall 2 stone-wall-line))
#end-if
#end-if
#load-if-not-defined DEFEND-WONDER
(defrule
(nand	(death-match-game)
	(game-time < 1200))
	(building-type-count-total wonder < 1)
	(players-building-type-count every-ally wonder < 1)
	(can-build wonder)
=>
	(build wonder))
#end-if
#end-if
#load-if-defined BALTIC-MAP ; testing~~
(defrule
	(goal position-goal flank)
	(wall-completed-percentage 2 < 100)
	(wall-completed-percentage 2 >= 42)
	(strategic-number sn-current-age < imperial)
	(current-age < castle-age)
	(population < max-civ)
	(military-population < 18)
	(building-type-count-total gate < 3)
	(can-build-gate 2)
=>
	(build-gate 2))
(defrule
	(goal position-goal flank)
	(wall-completed-percentage 2 < 100)
	(wall-completed-percentage 2 >= 42)
	(strategic-number sn-current-age < imperial)
	(current-age < castle-age)
	(population < max-civ)
	(military-population < 18)
	(can-build-wall 2 stone-wall-line)
	(strategic-number sn-disable-builder-assistance != 0)
=>
;	(chat-local-to-self "Enabling builder assistance.")
	(set-strategic-number sn-disable-builder-assistance 0))
(defrule
	(goal position-goal flank)
	(wall-completed-percentage 2 < 100)
	(wall-completed-percentage 2 >= 42)
	(strategic-number sn-current-age < imperial)
	(current-age < castle-age)
	(population < max-civ)
	(military-population < 18)
	(can-build-wall 2 stone-wall-line)
=>
	(build-wall 2 stone-wall-line))
#end-if
#load-if-not-defined DARK-AGE-END
#load-if-not-defined FEUDAL-AGE-END
#load-if-not-defined UP-SCENARIO-GAME; don't want to screw up beautiful scenarios
(defrule
(or	(game-type == 3)
(or	(hold-relics)
(or	(building-type-count-total wonder >= 1)
(or	(game-time < 300)
	(and	(building-type-count wall-class <= 0)
		(building-type-count gate-class <= 0))))))
=>
	(up-jump-rule 1))
(defrule
(or	(population >= del-civ-pop)
	(and	(up-compare-goal custom-civ-pop >= max-civ)
		(military-population >= 50)))
=>
;	(delete-building 939); gates
	(delete-building 659)
	(delete-building 661)
	(delete-building 88)
	(delete-building 91)
	(delete-building 667)
	(delete-building 669)
	(delete-building 64)
	(delete-building 78)
	(delete-building stone-wall)
	(delete-building stone-wall-line)
	(delete-building fortified-wall)
	(delete-building palisade-wall))
#end-if
#end-if
#end-if


#load-if-not-defined VICTORY-STANDARD
(defrule
	(taunt-detected any-ally 37)
=>
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
	(acknowledge-taunt every-ally 37))
#else; Victory-Standard
#load-if-not-defined DEFEND-WONDER
(defrule
	(taunt-detected any-ally 37)
(or	(building-type-count-total wonder >= 1)
	(players-building-type-count any-ally wonder >= 1))
=>
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
	(acknowledge-taunt every-ally 37))
(defrule
	(taunt-detected any-ally 37)
=>
	(chat-to-allies-using-id 22161); "39 At once, sire! I shall begin the Wonder as soon as possible!"
	(disable-self))
(defrule
	(taunt-detected any-ally 37)
	(building-available wonder)
	(building-type-count-total wonder < 1)
	(wood-amount >= 1100)
	(gold-amount < 1000)
	(can-sell-commodity wood)
=>
	(chat-local-to-self "Selling wood.")
	(sell-commodity wood))
(defrule
	(taunt-detected any-ally 37)
	(building-available wonder)
	(building-type-count-total wonder < 1)
	(wood-amount < 1000)
	(gold-amount >= 1175)
	(commodity-buying-price wood <= 175)
=>
	(chat-local-to-self "Buying wood.")
	(buy-commodity wood))
(defrule
	(taunt-detected any-ally 37)
	(building-available wonder)
	(building-type-count-total wonder < 1)
	(food-amount >= 1100); for now
	(gold-amount < 1000)
	(can-sell-commodity food)
=>
	(chat-local-to-self "Selling food.")
	(sell-commodity food))
(defrule
	(taunt-detected any-ally 37)
	(building-available wonder)
	(building-type-count-total wonder < 1)
	(stone-amount < 1000)
	(gold-amount >= 1250)
	(commodity-buying-price stone <= 250)
=>
	(chat-local-to-self "Buying stone.")
	(buy-commodity stone))
(defrule
	(taunt-detected any-ally 37)
	(building-type-count-total wonder < 1)
	(can-build wonder)
=>
	(build wonder)
	(acknowledge-taunt every-ally 37))
#else
(defrule
	(taunt-detected any-ally 37)
=>
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
	(acknowledge-taunt every-ally 37))
#end-if
#end-if

#load-if-defined VICTORY-STANDARD
(defrule
	(taunt-detected any-ally 37)
	(stone-amount < 1650)
	(building-type-count-total wonder <= 0)
=>
	(up-jump-rule 4)); block until we have a wonder
#end-if
(defrule
	(up-pending-objects c: castle < 2)
	(unit-type-count-total villager >= villager-castle)
	(building-available castle)
	(stone-amount >= castle-stone)
	(goal increase-town-size-goal 0)
=>
	(set-goal increase-town-size-goal castle)
	(enable-timer increase-town-size-timer 4))
(defrule
	(goal increase-town-size-goal castle)
	(stone-amount < castle-stone)
=>
	(set-goal increase-town-size-goal 2))
(defrule
	(goal increase-town-size-goal castle)
	(strategic-number sn-maximum-town-size >= 60)
	(strategic-number sn-target-player-number g:== closest-enemy-goal); up-compare-sn ; same for others below
	(building-type-count castle > 0)
;(or	(up-compare-const allow-forward-castle == 1)
	(building-type-count-total castle > 2);)
	(stone-amount >= castle-stone)
	(can-build castle)
=>
	(build-forward castle)
	(set-goal forward-goal 1)
	(set-goal increase-town-size-goal 2))
(defrule
	(goal increase-town-size-goal castle)
;	(stone-amount >= castle-stone)
	(can-build castle)
=>
	(build castle)
	(set-goal increase-town-size-goal 2))

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(up-research-status c: ri-bombard-tower >= research-pending)
(or	(building-type-count-total bombard-tower < 10)
	(gold-amount > 2500))
	(up-compare-goal trade-units > 14)
	(unit-type-count 42 > 0); trebuchets in siege mode
	(population > del-civ-pop); high pop
	(can-buy-commodity stone)
	(gold-amount >= 900)
	(stone-amount < 100)
	(commodity-buying-price stone < 400)
=>
	(chat-local-to-self "Buying stone.")
	(buy-commodity stone)
)
(defrule
(or	(strategic-number sn-archer-threat > 1)
	(players-unit-type-count focus-player scorpion-line > 9))
	(goal unit-goal monk)
	(building-type-count-total siege-workshop < 1)
	(building-type-count-total monastery > 0)
=>
	(up-jump-rule 1))
(defrule
	(building-type-count town-center > 0)
	(goal increase-town-size-goal 0)
	(goal unit-goal monk)
(or	(and	(building-type-count-total monastery < 3)
		(strategic-number sn-minimum-water-body-size-for-dock < water-islands))
	(and	(current-age >= imperial-age)
		(current-age-time > 180)))
	(goal save-wood-goal 0)
	(building-type-count-total monastery < 5)
	(can-build monastery)
=>
	(build monastery)
	(set-goal increase-town-size-goal 2))
(defrule
	(building-type-count town-center > 0)
	(goal increase-town-size-goal 0)
	(goal ranged-unit-type-goal monk)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total monastery < 3)
	(wood-amount > 300)
	(goal save-wood-goal 0)
	(can-build monastery)
=>
	(build monastery)
	(set-goal increase-town-size-goal 2))
(defrule
	(up-compare-goal relic-count >= 10)
(or	(building-type-count-total monastery < 2)
	(up-compare-goal relic-count >= 20))
(or	(building-type-count-total monastery < 3)
	(up-compare-goal relic-count >= 30))
(or	(building-type-count-total monastery < 4)
	(up-compare-goal relic-count >= 40))
(or	(building-type-count-total monastery < 5)
	(up-compare-goal relic-count >= 50))
(or	(building-type-count-total monastery < 6)
	(up-compare-goal relic-count >= 60))
(or	(building-type-count-total monastery < 7)
	(up-compare-goal relic-count >= 70))
(or	(building-type-count-total monastery < 8)
	(up-compare-goal relic-count >= 80))
(or	(building-type-count-total monastery < 9)
	(up-compare-goal relic-count >= 90))
	(building-type-count-total monastery < 10)
	(goal save-wood-goal 0)
	(can-build monastery)
=>
	(build monastery)
	(set-goal increase-town-size-goal 2))
#load-if-defined CAPTURE-THE-RELIC ; for scenarios etc
(defrule
	(building-type-count town-center > 0)
	(goal increase-town-size-goal 0)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total monastery < 1)
	(wood-amount > 200); 300
	(goal save-wood-goal 0)
	(can-build monastery)
=>
	(build monastery)
	(set-goal increase-town-size-goal 2))
#end-if
#load-if-defined AZTEC-CIV
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(goal increase-town-size-goal 0)
	(goal save-wood-goal 0)
	(building-type-count-total siege-workshop > 0)
	(building-type-count-total town-center >= tc-level-three)
(or	(building-type-count-total monastery < 2)
	(strategic-number sn-current-age >= ci-transit))
	(building-type-count-total monastery < 3)
(nor	(goal enemy-goal eagle-warrior)
(or	(goal unit-goal archer)
	(goal unit-goal eagle-warrior)))
	(can-build monastery)
=>
	(build monastery))
(defrule
	(goal increase-town-size-goal 0)
	(goal save-wood-goal 0)
	(building-type-count-total town-center >= tc-level-two)
(or	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total monastery < 2))
(or	(building-type-count-total town-center >= tc-level-four)
	(building-type-count-total monastery < 3))
	(building-type-count-total monastery < 5)
	(goal ranged-unit-type-goal monk)
	(can-build monastery)
=>
	(build monastery))
#else
(defrule
	(unit-type-count villager > villager-monastery)
(or	(or	(players-civ every-enemy indian)
		(players-civ every-enemy slavic))
	(or	(or	(players-civ every-enemy gothic)
			(players-civ every-enemy persian))
	(or	(players-civ every-enemy korean)
		(players-civ every-enemy chinese))))
	(building-type-count-total monastery < 5)
	(can-build monastery)
=>
	(build monastery)
)
#end-if
#end-if
#load-if-not-defined DEATH-MATCH
#load-if-defined BRITON-CIV
(defrule
	(up-compare-goal strategy-goal != boom)
	(wood-amount < 195)
(or	(and	(and	(goal unit-goal archer)
			(goal control-goal aggressive-rush))
		(or	(building-type-count-total archery-range < 4); don't mess up build order because british TC discount
			(building-type-count-total siege-workshop < 1)))
	(and	(building-type-count-total monastery < 1)
		(building-type-count-total town-center > 1)))
=>
	(up-jump-rule 2))
#end-if
(defrule
(or	(wood-amount < 825)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(population >= max-civ-pop)))
(or	(or	(and	(goal strategy-goal fast-imp)
			(and	(current-age < imperial-age)
				(wood-amount < 375)))
		(and	(goal strategy-goal shot)
			(and	(building-type-count-total siege-workshop <= 0)
				(wood-amount < 375))))
	(and	(goal unit-goal my-unique-unit-line)
		(building-type-count-total castle <= 0)))	
=>
	(up-jump-rule 1))
(defrule
	(goal save-wood-goal 0)
;	(current-age >= castle-age)
	(building-available town-center)
	(can-afford-building town-center)
	(building-type-count-total town-center < 5)
	(goal increase-town-size-goal 0)
=>
	(enable-timer increase-town-size-timer 6)
	(set-goal increase-town-size-goal town-center)
)
(defrule
	(goal increase-town-size-goal town-center)
	(wood-amount < 475)
	(strategic-number sn-current-age == castle)
	(building-type-count town-center >= 1)
	(building-type-count-total university <= 0)
	(building-type-count-total siege-workshop <= 0)
	(building-type-count-total castle <= 0);
	(goal unit-goal monk)
=>
	(disable-timer increase-town-size-timer)
	(set-goal increase-town-size-goal 0)
)
(defrule
	(goal increase-town-size-goal town-center)
	(wood-amount < 475)
	(building-type-count town-center >= 1)
	(building-available siege-workshop)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal unit-goal archer)
	(goal strategy-goal rush)
	(players-building-type-count focus-player watch-tower > 0)
	(building-type-count-total siege-workshop < 1)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(goal increase-town-size-goal town-center)
;(or	(building-type-count-total town-center <= 0)
(or	(goal save-wood-goal 1)
	(building-type-count-total town-center >= 5));)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(goal increase-town-size-goal town-center)
	(can-afford-building town-center)
(or	(building-type-count-total town-center == 1)
	(and	(building-type-count-total town-center <= 0)
		(game-time >= 666)))
	(dropsite-min-distance wood s:<= sn-camp-max-distance)
=>
	(set-strategic-number sn-town-center-placement lumber-camp)); mining-camp
(defrule
	(goal increase-town-size-goal town-center)
	(can-afford-building town-center)
	(building-type-count-total town-center == 2); >=
(or	(dropsite-min-distance gold s:<= sn-camp-max-distance)
	(dropsite-min-distance stone s:<= sn-camp-max-distance))
=>
	(set-strategic-number sn-town-center-placement mining-camp)); lumber-camp
(defrule
	(goal increase-town-size-goal town-center)
	(can-build town-center)
=>
	(build town-center)
)
#else; => DM
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(goal save-wood-goal 0)
	(building-type-count-total monastery > 0)
	(building-type-count-total siege-workshop > 0)
	(building-type-count-total town-center < 5)
	(goal increase-town-size-goal 0)
	(can-build town-center)
=>
	(build town-center)
)
(defrule
	(unit-type-count villager < 15)
	(building-type-count-total town-center >= 1); test
	(goal increase-town-size-goal town-center)
=>
	(set-goal increase-town-size-goal 0)
)
#end-if
#end-if
#end-if; NOT WONDER-RACE
#load-if-not-defined DEATH-MATCH
(defrule
	(current-age == feudal-age)
	(or
		(up-research-status c: ri-wheel-barrow != research-pending)
		(current-age-time > 40)
	)
	(current-age-time > 20)
	(food-amount > 700)
	(up-compare-goal strategy-goal != flush)
	(building-type-count-total blacksmith == 0)
=>
	(up-assign-builders c: blacksmith c: 3)(disable-self)
)
(defrule
	(current-age-time < 10)
	(current-age == feudal-age)
	(or
		(and
			(up-pending-objects c: villager > 0)
			(food-amount > 700)
		)
		(or
			(goal strategy-goal flush)
			(goal strategy-goal sling)
		)
	)
=>
	(up-assign-builders c: archery-range c: 2)
	(up-assign-builders c: stable c: 2)
	(up-assign-builders c: market c: 2)(disable-self)
)
#end-if
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(building-type-count-total town-center < tc-level-three)
=>
	(set-goal increase-town-size-goal 0)
	(up-jump-rule 3)
)
(defrule
	(goal save-wood-goal 0)
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(building-type-count-total town-center > 0)
	(player-in-game any-ally)
	(up-compare-goal strategy-goal != boom)
(or	(building-type-count-total town-center >= tc-level-two)
	(nor	(goal unit-goal knight)
	(or	(goal unit-goal archer)
		(goal unit-goal battle-elephant))))
	(building-type-count-total monastery == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal monastery)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal save-wood-goal 0)
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(building-type-count-total town-center > 0)
	(or
		(and
			(goal strategy-goal boom)
			(building-type-count-total town-center >= tc-boom-monastery)
		)
		(goal strategy-goal fast-imp)
	)
	(building-type-count-total monastery == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal monastery)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(building-type-count-total town-center > 0)
	(or
		(goal unit-goal wonder)
		(not (player-in-game any-ally))
	)
	(building-type-count-total monastery == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal monastery)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(building-type-count-total town-center > 0)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(building-type-count-total monastery == 0)
	(wood-amount >= 175)
	(food-amount > 500)
	(gold-amount > 400)
=>
	(set-goal increase-town-size-goal monastery)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined DEATH-MATCH
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(up-compare-goal increase-town-size-goal != monastery)
	(building-type-count-total siege-workshop > 0)
	(building-type-count-total monastery == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal monastery)
	(enable-timer increase-town-size-timer 4)
)
#end-if

#load-if-not-defined WONDER-RACE
(defrule
	(building-type-count-total town-center == 0); rebuild tc and no stone => get a market and buy some.
	(stone-amount < 100)
	(building-type-count-total market == 0)
(or	(dropsite-min-distance wood < 10)
	(wood-amount >= 450))
	(can-afford-building market)
	(building-available market)
=>
	(set-goal increase-town-size-goal market)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
(or	(wood-amount > 1000)
(or	(strategic-number sn-current-age >= ci-transit);
(or	(building-type-count-total town-center >= tc-level-four)
(or	(strategic-number sn-resource-control == sling)
	(and	(wood-amount >= 350)
		(building-type-count-total town-center >= tc-level-three))))))
	(goal save-wood-goal 0)
	(building-type-count-total market == 0)
	(can-afford-building market)
	(building-available market)
=>
	(set-goal increase-town-size-goal market)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
(or	(and	(up-compare-goal custom-civ-pop > 60)
		(or	(goal strategy-goal boom)
			(player-in-game any-ally)))
	(and	(research-available imperial-age)
		(goal strategy-goal fast-imp)))
	(building-type-count-total market == 0)
	(can-afford-building market)
=>
	(set-goal increase-town-size-goal market)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
(or	(strategic-number sn-current-age == feudal)
	(research-available castle-age)); fp
(or	(wood-amount >= 775)
(or	(food-amount >= 1400)
(or	(gold-amount >= 800)
(or	(and	(wood-amount >= 195)
		(building-type-count-total barracks == 0)); no rax => market+bs start
(or	(and	(goal strategy-goal rush); fail safe for maps with a rax at start
		(civ-selected saracen)); use saracen market advantage
(or	(goal unit-goal my-unique-unit-line)
(or	(goal unit-goal scorpion)
(or	(goal strategy-goal sling)
	(strategic-number sn-resource-control == sling)))))))))
	(building-type-count-total market < 1)
	(can-afford-building market)
=>
	(set-goal increase-town-size-goal market)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-current-age <= feudal)
	(current-age-time >= 10)
	(building-type-count-total blacksmith >= 1)
	(wood-amount >= 195)
(or	(and	(building-type-count-total stable < 1)
		(building-type-count-total archery-range < 1))
(or	(food-amount < castle-food)
(or	(gold-amount < castle-gold)
	(wood-amount >= 370))))
	(building-type-count-total market < 1)
	(can-afford-building market)
=>
	(set-goal increase-town-size-goal market)
	(enable-timer increase-town-size-timer 4)
)
#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined POPULATION-CAP-50
#load-if-not-defined TINY-MAP
;#load-if-not-defined SMALL-MAP
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count town-center > 0)
(or	(strategic-number sn-current-age <= ci-transit); PIDM work-around
	(game-time >= 120))
	(wood-amount > 300)
	(strategic-number sn-maximum-town-size < 40)
(or	(game-time > market-time)
(or	(strategic-number sn-current-age >= ci-transit);
	(building-type-count-total town-center > 4)))
	(player-in-game any-ally)
	(players-building-type-count any-ally market > 0)
	(building-type-count-total market < number-markets)
	(can-afford-building market)
=>
	(set-goal increase-town-size-goal market)
	(enable-timer increase-town-size-timer 4)
)
;#end-if
#end-if
#end-if
#end-if
(defrule
	(goal increase-town-size-goal market)
	(wood-amount < 1000)
(or	(or	(building-type-count-total market > 0)
		(wood-amount < market-cost))
	(or	(or	(strategic-number sn-current-age == fc-transit)
			(strategic-number sn-resource-control == 3))
		(strategic-number sn-resource-control == ri-elite-skirmisher)))
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
(or	(building-type-count-total town-center <= 0)
(or	(current-age <= feudal-age)
	(building-type-count-total blacksmith >= number-blacksmiths)))
(or	(building-type-count-total town-center <= 0)
	(building-type-count-total blacksmith >= 1)); at least one
=>
	(up-jump-rule 4)) ; temporary(?) debug rule
(defrule
	(goal increase-town-size-goal 0)
(or	(up-compare-goal strategy-goal != flush)
	(and	(research-available castle-age)
		(and	(food-amount >= castle-f2); 600
			(gold-amount >= castle-g2)))); 100
;	(food-amount >= 300); 333
;(nand	(goal strategy-goal sling)
; bnn	(current-age-time < 600))
	(building-type-count town-center > 0)
(or	(building-type-count-total stable > 0)
(or	(building-type-count-total archery-range > 0)
	(building-type-count-total market > 0)))
	(building-type-count-total blacksmith < number-blacksmiths)
	(can-afford-building blacksmith)
=>
	(enable-timer increase-town-size-timer 4)
	(set-goal increase-town-size-goal blacksmith))
(defrule
	(goal increase-town-size-goal 0)
(or	(wood-amount >= 195)
(or	(building-type-count-total barracks >= 2); 3
(or	(building-type-count-total archery-range >= 3); 3
	(building-type-count-total stable >= 2)))); 3
	(goal strategy-goal flush)
(or	(and	(building-type-count-total archery-range > 0)
		(or	(building-type-count-total stable > 0)
			(up-research-status c: ri-man-at-arms >= research-pending)))
	(building-type-count-total archery-range > 1))
; hm	(building-type-count-total mining-camp > 0)
	(building-type-count-total blacksmith < 1)
	(can-afford-building blacksmith)
=>
	(enable-timer increase-town-size-timer 4)
	(set-goal increase-town-size-goal blacksmith))
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-current-age == feudal)
(or	(food-amount >= castle-f2); 600
	(gold-amount >= castle-gs)); 400
(or	(gold-amount >= 100)
(or	(gold-amount >= castle-g2); 100
	(food-amount >= castle-fs))); 1000
	(building-type-count town-center > 0)
(or	(building-type-count-total stable > 0)
(or	(building-type-count-total archery-range > 0)
	(building-type-count-total market > 0)))
	(building-type-count-total blacksmith < 1)
	(can-afford-building blacksmith)
=>
	(enable-timer increase-town-size-timer 4)
	(set-goal increase-town-size-goal blacksmith))
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-current-age == feudal)
	(wood-amount >= 325)
	(building-type-count town-center > 0)
(or	(building-type-count-total stable > 0)
(or	(building-type-count-total archery-range > 0)
	(building-type-count-total market > 0)))
	(building-type-count-total blacksmith < 1)
	(can-afford-building blacksmith)
=>
	(enable-timer increase-town-size-timer 4)
	(set-goal increase-town-size-goal blacksmith))
#load-if-not-defined AZTEC-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined MAYAN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(up-research-status c: ri-bloodlines >= research-available)
	(strategic-number sn-current-age >= fc-transit)
	(game-time < 1560); don't build them too late e.g. after slinging
	(building-type-count-total stable < 1)
	(wood-amount >= 245)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(or
		(goal strategy-goal flush)
		(goal unit-goal mix)
	)
	(building-type-count-total archery-range > 0)
	(or
		(or
			(goal unit-goal scout-cavalry)
			(goal monk-threat-goal 1)
		)
		(and 
			(goal strategy-goal mix)
			(strategic-number sn-current-age >= fc-transit)
		)		
	)
	(building-type-count-total stable < 1)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined BRITON-CIV
(defrule
	(goal increase-town-size-goal 0)
	(research-available ri-man-at-arms)
	(players-unit-type-count every-enemy skirmisher-line > 24)
	(or
		(and
			(building-type-count-total town-center >= tc-level-three)
			(building-type-count-total stable < 1)
		)
		(unit-type-count-total villager > 90)
	)
	(building-type-count-total stable < 2)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal archer)
	(building-type-count-total stable < 1)
	(building-type-count-total archery-range > 2)
	(research-available ri-man-at-arms)
	(players-civ focus-player aztec)
	(or
		(goal enemy-goal eagle-warrior)
		(or
			(players-building-type-count focus-player market > 0)
			(players-building-type-count focus-player barracks > 1)
		)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined CHINESE-CIV
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total town-center >= tc-level-four)
	(unit-type-count-total villager > 90)
	(building-type-count-total stable < 2)
	(wood-amount >= 175)
	(food-amount > 600)
	(gold-amount < 75)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined KOREAN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(or
		(or
			(or
				(unit-type-count-total cavalry-unit-class > 11)
				(unit-type-count-total cavalry-archer-class > 11)
			)
			(unit-type-count-total conquistador-line > 11)
		)
		(strategic-number sn-current-age >= ci-transit)
	)
	(wood-amount >= 175)
	(building-type-count-total stable < 1)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(unit-type-count-total mameluke-line > 11)
	(building-type-count-total stable < 1)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(defrule
	(goal increase-town-size-goal 0)
	(up-research-status c: ri-hussar >= research-pending)
	(food-amount > 1200)
	(wood-amount > 400)
	(building-type-count-total stable < 7)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#end-if
#end-if
#load-if-not-defined VIKING-CIV
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal archer)
	(building-type-count-total archery-range > 3)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total stable < 2)
	(research-available ri-man-at-arms)
	(or
		(strategic-number sn-current-age >= ci-transit)
		(and
			(unit-type-count villager > 50)
			(and
				(food-amount > 400)
				(gold-amount < 150)
			)
		)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal gunpowder-class)
	(building-type-count-total stable < 1)
	(building-type-count-total archery-range > 1)
	(or
		(and
			(civ-selected turkish)
			(strategic-number sn-cavalry-threat > 1); get camels vs cavalry with turks
		)
		(and
			(building-type-count-total archery-range > 5)
			(building-type-count-total university > 0)
		)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(or
		(building-type-count-total town-center >= tc-level-four)
		(or
			(goal monk-threat-goal 1)
			(and
				(goal meso-enemy-goal 1)
				(or
					(goal enemy-goal rush)
					(goal enemy-goal eagle-warrior)
				)
			)
		)
	)
	(building-type-count-total stable < 1)
	(current-age >= castle-age)
	(goal unit-goal skirmisher)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined INDIAN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total stable < 3)
	(up-research-status c: imperial-age >= research-available)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total stable < 1)
	(goal strategy-goal boom)
	(goal monk-threat-goal 1)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total stable < 2)
(or	(and	(building-type-count-total blacksmith > 0)
		(up-compare-goal strategy-goal != boom))
	(building-type-count-total stable < 1))
(or	(goal unit-goal knight)
(or	(goal unit-goal battle-elephant)
	(and	(goal unit-goal scout-cavalry)
		(goal strategy-goal rush))))
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total stable < 1)
	(goal unit-goal cavalry-archer)
(or	(building-type-count-total monastery > 0)
	(building-type-count-total town-center >= tc-level-two))
	(building-type-count-total archery-range > 2)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(goal control-goal shot)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total stable < 3)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total university > 0)
	(up-research-status c: ri-light-cavalry >= research-pending)
	(or
		(building-type-count-total stable < 3)
		(and
			(wood-amount > 350)
			(strategic-number sn-current-age >= ci-transit)
		)
	)
	(building-type-count-total stable < 4)
	(wood-amount >= 225)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= tc-level-four)
	(goal unit-goal knight)
	(or
		(and
			(building-type-count-total stable < 4)
			(strategic-number sn-military-level < 0)
		)
		(strategic-number sn-current-age >= ci-transit)
	)
	(building-type-count-total stable < 6)
	(wood-amount >= 225)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total town-center >= tc-level-four)
	(goal unit-goal battle-elephant)
(or	(and	(building-type-count-total stable < 3)
		(strategic-number sn-military-level < 0))
	(strategic-number sn-current-age >= ci-transit))
	(building-type-count-total stable < 5)
	(wood-amount >= 225)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#load-if-not-defined HUN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal knight)
	(goal strategy-goal boom)
	(building-type-count town-center >= tc-level-three)
	(or
		(building-type-count-total stable < 2)
		(building-type-count-total town-center >= tc-level-four)	
	)
	(strategic-number sn-military-level < 0)
	(goal position-goal flank)
	(building-type-count-total stable < 4)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(building-type-count town-center >= tc-level-two)
	(goal unit-goal default-ranged)
	(or
		(or
			(civ-selected frankish)
			(civ-selected persian)
		)
		(or
			(civ-selected spanish)
			(civ-selected teutonic)
		)
	)
	(building-type-count-total stable < 2)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined DEATH-MATCH
(defrule
	(or
		(building-type-count-total stable < 1)
		(or
			(building-type-count-total blacksmith > 0)
			(current-age >= castle-age)
		)
	)
	(or
		(or
			(building-type-count-total stable < 6)
			(civ-selected hun)
		)
		(building-type-count-total siege-workshop > 0)
	)
	(building-type-count-total stable < number-stables)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#load-if-defined FEUDAL-AGE-END
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total stable < 4)
	(wood-amount >= 175)
	(building-type-count-total blacksmith > 0)
	(goal unit-goal scout-cavalry)
=>
	(set-goal increase-town-size-goal stable)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#end-if; NOT AZTEC
#end-if; NOT INCAN
#end-if; NOT MAYAN
#load-if-defined INCAN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total archery-range < 2)
	(building-type-count-total monastery > 0)
	(or
		(strategic-number sn-infantry-threat > 1)
		(players-civ focus-player gothic)
	)
	(or
		(building-type-count-total archery-range < 1)
		(building-type-count-total siege-workshop > 0)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total barracks > 2)
	(goal unit-goal eagle-warrior)
	(players-unit-type-count every-enemy eagle-warrior-line < 6)
	(strategic-number sn-cavalry-threat == 0)
	(wood-amount > 350)
	(food-amount > 150)
	(gold-amount < 50)
	(building-type-count-total archery-range < 2)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock > water-mixed)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total town-center >= tc-level-three)
	(or
		(building-type-count-total archery-range < 1)
		(and
			(building-type-count-total town-center >= tc-level-four)
			(or
				(up-research-status c: ri-crossbow >= research-pending)
				(civ-selected hun)
			)
		)
	)
	(building-type-count-total archery-range < 2)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(or
		(goal enemy-goal flush)
		(and
			(current-age-time > 200)
			(wood-amount > 270)
		)
	)
	(building-type-count-total archery-range < 3)
	(strategic-number sn-current-age == feudal)
	(building-type-count-total blacksmith > 0)
	(wood-amount >= 220)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(building-type-count-total archery-range < 4)
	(strategic-number sn-current-age == fc-transit)
	(or
		(strategic-number sn-military-level < 0)
		(and
			(players-current-age focus-player == castle-age)
			(or
				(players-unit-type-count focus-player archer-line > 15)
				(players-building-type-count focus-player archery-range > 2)
			)
		)
	)
	(up-compare-goal unit-goal != knight)
	(up-compare-goal unit-goal != battle-elephant)
	(wood-amount >= 220)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age == feudal-age)
	(not (goal unit-goal knight))
	(not (goal unit-goal battle-elephant))
	(building-type-count-total market < 1)
	(building-type-count-total archery-range < 1)
	(building-type-count barracks > 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total market > 0)
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total university > 0)
	(building-type-count-total archery-range < 1)
	(building-type-count barracks > 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(building-type-count-total archery-range < 2)
	(building-type-count-total blacksmith > 0)
	(or
		(strategic-number sn-archer-threat > 1)
		(and
			(players-building-type-count focus-player archery-range > 1)
			(goal enemy-goal skirmisher); enemy probably going for xbow rush
		)
	)
	(strategic-number sn-infantry-threat == 0)
	(strategic-number sn-cavalry-threat == 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(building-type-count barracks > 0)
	(or
		(and
			(building-type-count-total archery-range < 2)
			(and
				(research-available ri-man-at-arms)
				(or
					(building-type-count-total stable == 0)
					(strategic-number sn-current-age >= fc-transit)
				)
			)
		)
		(goal unit-goal archer)
	)
	(building-type-count-total archery-range < 3)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(goal strategy-goal rush)
	(goal unit-goal archer)
	(building-type-count-total archery-range == 2)
	(building-type-count-total town-center < tc-level-three)
=>
	(up-jump-rule 1)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total blacksmith > 0)
	(or
		(goal strategy-goal rush)
		(goal strategy-goal flush)
	)
	(building-type-count-total archery-range < 4)
	(or
		(building-type-count-total archery-range < 3)
		(or
			(building-type-count-total town-center >= tc-level-three)
			(unit-type-count-total battering-ram-line > 0)
		)
	)
	(goal unit-goal archer)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(or
		(goal unit-goal archer)
		(goal unit-goal cavalry-archer)
	)
	(goal strategy-goal boom)
	(building-type-count-total town-center >= tc-level-three)
	(or
		(building-type-count-total archery-range < 3)
		(building-type-count-total town-center >= tc-level-four)	
	)
	(building-type-count-total archery-range < 5)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined VIKING-CIV
(defrule
	(goal increase-town-size-goal 0)
	(goal unit-goal archer)
	(goal strategy-goal boom)
	(building-type-count-total town-center >= 3)
	(or
		(research-available imperial-age)
		(strategic-number sn-current-age >= ci-transit)
	)
	(building-type-count-total archery-range < 8)
	(up-compare-goal custom-civ-pop > 80)
	(wood-amount >= 220)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(strategic-number sn-current-age >= ci-transit)
	(goal unit-goal gunpowder-class)
	(or
		(building-type-count-total archery-range < 2)
		(or
			(building-type-count-total town-center >= 2)
			(up-compare-goal custom-civ-pop > 80)
		)
	)
	(or
		(building-type-count-total archery-range < 4)
		(up-compare-goal custom-civ-pop > 100)
	)
	(building-type-count-total archery-range < 8)	
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined UP-POCKET-POSITION
(defrule
	(building-type-count-total town-center < tc-level-five)
	(or
		(building-type-count-total archery-range < 4)
		(building-type-count-total town-center < tc-level-three)
	)
	(or
		(goal nr-map-goal 1)
		(building-type-count stone-wall-line > 10)
	)
=>
	(up-jump-rule 2)
)
#end-if
(defrule
	(or
		(goal increase-town-size-goal 0)
		(goal increase-town-size-goal monastery)
	)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total town-center >= 1)
	(building-type-count-total archery-range < 2)
	(strategic-number sn-archer-threat >= 1)
	(strategic-number sn-military-level < 0)
	(goal unit-goal skirmisher)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined BYZANTINE-CIV
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total town-center >= tc-level-two)
	(or
		(building-type-count-total archery-range < 2)
		(and
			(building-type-count-total town-center >= 3)
			(strategic-number sn-cavalry-threat < 2)
		)
	)
	(or
		(strategic-number sn-cavalry-threat < 1)
		(building-type-count-total barracks > 1)
	)
	(building-type-count-total archery-range < 4)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#else
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total archery-range < 2)
	(or
		(strategic-number sn-cavalry-threat < 1)
		(building-type-count-total barracks > 1)
	)
	(or
		(goal unit-goal skirmisher)
		(goal unit-goal mix)
	)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#load-if-not-defined CELTIC-CIV
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(goal strategy-goal rush)
	(strategic-number sn-archer-threat > 1)
	(building-type-count-total town-center < tc-level-three)
	(building-type-count-total siege-workshop > 0)
	(unit-type-count mangonel-line == 0)
	(current-age >= castle-age)
=>
	(up-jump-rule 3)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(goal strategy-goal rush)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count siege-workshop == 0)
	(current-age >= castle-age)
	(goal anti-cavalry-threat-goal 0)
=>
	(up-jump-rule 2)
)
#end-if
#end-if
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(goal strategy-goal rush)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(goal enemy-goal eagle-warrior); he will come with pikes
	)
	(or
		(up-research-status c: ri-crossbow >= research-pending)
		(building-type-count-total archery-range < 1)
	)
	(building-type-count-total archery-range < 2)
	(wood-amount >= 175)
	(current-age >= castle-age)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(building-type-count-total town-center >= tc-level-two)
	(or
		(or
			(goal anti-cavalry-threat-goal 1)
			(strategic-number sn-archer-threat > 1)
		)
		(or
			(goal enemy-goal flush)
			(goal enemy-goal skirmisher)
		)
	)
	(up-compare-goal position-goal == flank)
	(building-type-count-total archery-range < 1)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
(defrule
(not	(player-in-game any-ally))
	(goal increase-town-size-goal 0)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(players-unit-type-count focus-player spearman-line > 6)
	(building-type-count-total archery-range < 1)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#end-if
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(or
		(goal strategy-goal flush)
		(and
			(building-type-count-total monastery > 0)
			(goal unit-goal archer)
		)
	)
	(players-civ every-enemy gothic)
	(strategic-number sn-current-age >= fc-transit)
	(building-type-count-total archery-range < 4)
	(wood-amount >= 175)
=>
	(set-goal control-goal aggressive-rush)
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total blacksmith > 0)
	(or
		(building-type-count-total stable > 0)
		(building-type-count-total archery-range < 3)
	)
	(or
		(building-type-count-total siege-workshop > 0)
		(building-type-count-total archery-range < 4)
	)
	(building-type-count-total archery-range < 6)
	(or
		(goal unit-goal cavalry-archer)
		(goal strategy-goal flush)
	)
	(goal control-goal aggressive-rush)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(goal strategy-goal rush)
(or	(not	(civ-selected celtic))
	(up-research-status c: ri-elite-skirmisher >= research-pending))
	(building-type-count-total town-center >= tc-level-five)
	(building-type-count-total archery-range < 4)
(not	(goal control-goal my-unique-unit-line))
	(wood-amount >= 225)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined POPULATION-CAP-50
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total university > 0)
	(building-type-count-total siege-workshop > 0)
	(up-research-status c: ri-elite-skirmisher >= research-pending)
	(wood-amount > 360); excess wood
	(or
		(building-type-count-total archery-range < 6)
		(wood-amount > 600)
	)
	(building-type-count-total archery-range < 8)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#end-if
#end-if
#end-if
(defrule
	(goal increase-town-size-goal archery-range)
(nor	(goal ranged-unit-type-goal archer)
	(goal ranged-unit-type-goal cavalry-archer))
	(wood-amount < 800)
	(building-type-count-total archery-range > 3)
	(strategic-number sn-archer-threat < 3)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(goal increase-town-size-goal archery-range)
	(goal unit-goal eagle-warrior)
	(goal control-goal shot)
	(building-type-count-total town-center < tc-level-three)
	(building-type-count-total barracks < 6)
	(current-age >= castle-age)
=>
	(set-goal increase-town-size-goal 0)
)
#load-if-defined DEATH-MATCH
(defrule
	(game-time > 60)
(or	(building-type-count-total archery-range < 1)
	(building-type-count-total blacksmith > 0))
(or	(or	(building-type-count-total archery-range < 4)
		(civ-selected hun))
	(building-type-count-total university > 0))
	(building-type-count-total archery-range < number-archery-ranges)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#load-if-defined FEUDAL-AGE-END
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total archery-range < 8)
	(wood-amount >= 175)
	(building-type-count-total blacksmith > 0)
=>
	(set-goal increase-town-size-goal archery-range)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
(or	(or	(building-type-count barracks == 0); prerequisites missing
		(current-age == dark-age))
	(goal save-wood-goal 1))
(or	(goal increase-town-size-goal archery-range)
	(goal increase-town-size-goal stable))
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal strategy-goal flush)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined DARK-AGE-END
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total barracks < 15)
	(unit-type-count-total villager > 13)
	(building-type-count-total mill > 0)
	(building-type-count-total lumber-camp > 0)
	(building-type-count-total mining-camp > 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
#end-if
#load-if-defined FEUDAL-AGE-END
(defrule
	(goal increase-town-size-goal 0)
	(building-type-count-total barracks < 10)
	(building-type-count-total blacksmith > 0)
(or	(building-type-count-total barracks < 2)
	(up-research-status c: ri-man-at-arms >= research-pending))
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 3)
)
#end-if
(defrule
	(goal increase-town-size-goal barracks)
	(goal enemy-boats-goal 1)
	(goal strategy-goal flush)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total dock < 2)
	(players-building-type-count every-enemy barracks == 0)
	(players-building-type-count every-enemy archery-range == 0)
	(players-building-type-count every-enemy stable == 0)
=>
	(set-goal increase-town-size-goal 0); skip barracks for more boats
	(disable-timer increase-town-size-timer)
)
#load-if-not-defined SARACEN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal strategy-goal rush)
(nor	(goal unit-goal monk)
(or	(goal unit-goal eagle-warrior)
	(goal unit-goal my-unique-unit-line)))
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal unit-goal monk)
(or	(or	(goal anti-monk-threat-goal 1)
		(strategic-number sn-cavalry-threat > 1))
	(building-type-count town-center >= tc-level-three))
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#load-if-not-defined TURKISH-CIV
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal strategy-goal boom)
(or	(nor	(goal unit-goal my-unique-unit-line)
		(goal unit-goal scorpion))
(or	(strategic-number sn-cavalry-threat > 1)
	(goal monk-threat-goal 1)))
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#else
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal strategy-goal boom)
(or	(nor	(goal unit-goal my-unique-unit-line)
		(goal unit-goal scorpion))
	(goal monk-threat-goal 1))
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#else
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal unit-goal monk)
(or	(goal anti-monk-threat-goal 1)
	(building-type-count town-center >= tc-level-three))
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total town-center < tc-level-four)
	(building-type-count-total barracks > 0)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(goal strategy-goal boom)
=>
	(up-jump-rule 12)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total town-center < tc-level-four)
	(goal unit-goal my-unique-unit-line)
	(goal strategy-goal boom)
(or	(or	(or	(civ-selected mongol)
			(civ-selected saracen))
		(civ-selected spanish))
	(or	(civ-selected italian)
		(civ-selected teutonic)))
=>
	(up-jump-rule 11)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
(or	(goal unit-goal my-unique-unit-line)
	(goal unit-goal scorpion))
	(strategic-number sn-cavalry-threat > 1)
	(building-type-count-total town-center >= tc-level-two)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= df-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
	(goal strategy-goal boom)
	(up-compare-goal unit-goal != my-unique-unit-line)
	(up-compare-goal unit-goal != scorpion)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total barracks < 3)
	(building-type-count-total blacksmith > 0)
	(building-type-count town-center > 0)
(or	(goal strategy-goal boom)
	(goal strategy-goal fast-imp))
(or	(building-type-count-total barracks < 2)
	(building-type-count-total siege-workshop > 0))
	(goal unit-goal eagle-warrior)
	(strategic-number sn-military-level < 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total barracks < 1)
	(building-type-count town-center > 0)
(or	(goal strategy-goal fast-imp)
	(goal unit-goal my-unique-unit-line))
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined SARACEN-CIV
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total barracks < 1)
	(building-type-count-total blacksmith > 0)
	(building-type-count town-center > 0)
	(goal strategy-goal rush)
	(up-compare-goal unit-goal != monk)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined POPULATION-CAP-50
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock > water-mixed)
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total market > 0)
(or	(building-type-count-total barracks < 1)
	(and	(building-type-count-total town-center >= tc-level-four)
		(or	(up-research-status c: ri-long-swordsman >= research-pending)
			(unit-available eagle-warrior-line))))
	(building-type-count-total barracks < 3)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total monastery > 0)
	(building-type-count-total town-center >= tc-level-two)
	(strategic-number sn-cavalry-threat > 0)
(or	(building-type-count-total barracks < 2)		
	(and	(building-type-count-total town-center >= tc-level-four)
		(up-research-status c: ri-pikeman >= research-pending)))
	(building-type-count-total barracks < 4)
	(goal unit-goal skirmisher)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total barracks < 2))
	(strategic-number sn-cavalry-threat > 1)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total barracks < 3)
	(up-research-status c: ri-pikeman >= research-pending)
	(goal strategy-goal rush)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(building-type-count-total town-center >= tc-level-four)
	(building-type-count-total barracks < 2))
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total barracks < 3)
	(up-research-status c: ri-pikeman >= research-pending)
	(goal strategy-goal boom)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total barracks < 4)
(or	(goal unit-goal eagle-warrior)
	(up-research-status c: ri-halberdier >= research-pending))
(or	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total barracks < 3))
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(building-type-count-total barracks < 10)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total town-center >= tc-level-three)
(or	(building-type-count-total barracks < 6)
	(wood-amount > 400))
	(wood-amount > 220)
(or	(goal unit-goal eagle-warrior)
	(up-research-status c: ri-halberdier >= research-pending))
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal barracks)
	(goal strategy-goal boom)
	(goal unit-goal eagle-warrior)
(or	(building-type-count-total barracks > 0)
	(strategic-number sn-current-age < fc-transit))
(nand	(building-type-count-total barracks < 2)
	(building-type-count-total town-center >= tc-level-three))
=>
	(set-goal increase-town-size-goal 0)
	(disable-timer increase-town-size-timer)
)
(defrule
	(goal increase-town-size-goal barracks)
	(goal strategy-goal fast-imp)
	(building-type-count-total barracks > 0)
	(not (research-available imperial-age))
=>
	(set-goal increase-town-size-goal 0)
	(disable-timer increase-town-size-timer)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(building-type-count-total blacksmith > 0)
	(building-type-count-total barracks < 4)
	(goal unit-goal eagle-warrior)
	(goal strategy-goal rush)
(or	(building-type-count-total monastery > 0)
	(goal control-goal aggressive-rush))
(nand	(building-type-count-total siege-workshop == 0)
	(building-type-count-total stone-wall-line > 10))
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(goal strategy-goal flush)
	(goal unit-goal militiaman-line)
(or	(and	(goal enemy-goal eagle-warrior)
		(current-age == feudal-age))
	(and	(up-research-status c: ri-elite-skirmisher >= research-pending)
		(building-type-count-total town-center >= tc-level-two)))
	(building-type-count-total barracks < 2)
	(building-type-count-total blacksmith > 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
	(goal strategy-goal rush)
	(goal unit-goal militiaman-line)
	(building-type-count-total barracks < 2)
	(building-type-count-total blacksmith > 0)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(up-research-status c: ri-horse-collar >= research-pending)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(or	(goal unit-goal militiaman-line)
		(goal control-goal militiaman-line))
	(up-research-status c: ri-pikeman >= research-pending))
	(building-type-count-total barracks < 8)
	(building-type-count-total university > 0)
	(building-type-count-total siege-workshop > 0)
	(wood-amount > 420)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 0)
(or	(and	(goal strategy-goal flush)
		(strategic-number sn-cavalry-threat > 1))
	(and	(population-cap < 75)
		(up-research-status c: ri-pikeman >= research-pending)))
	(building-type-count-total barracks < 2)
	(building-type-count-total blacksmith > 0)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#load-if-defined DARK-AGE-START
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(players-building-type-count focus-player barracks > 0)
	(game-time < 490)
	(building-type-count-total barracks < 1)
	(up-pending-objects c: barracks == 0)
	(can-build barracks)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#end-if
#end-if
#load-if-defined DEATH-MATCH
(defrule
(or	(building-type-count-total barracks < 1)
(or	(or	(building-type-count-total lumber-camp > 0)
		(building-type-count-total mill > 0))
	(building-type-count-total blacksmith > 0)))
(or	(building-type-count-total barracks < 5)
	(building-type-count-total siege-workshop > 0))
	(building-type-count-total barracks < number-barracks)
	(wood-amount >= 175)
=>
	(set-goal increase-town-size-goal barracks)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
(or	(goal increase-town-size-goal siege-workshop)
(or	(or	(goal increase-town-size-goal barracks)
		(goal increase-town-size-goal archery-range))
	(goal increase-town-size-goal stable)))
	(building-type-count-total town-center == 0)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(wood-amount < 200)
(or	(goal increase-town-size-goal siege-workshop)
	(and	(wood-amount < 175)
		(or	(or	(goal increase-town-size-goal barracks)
				(goal increase-town-size-goal archery-range))
			(goal increase-town-size-goal stable))))
=>
	(set-goal increase-town-size-goal 0)
;	(chat-local-to-self "Not enough wood to build.")
)
(defrule
	(goal increase-town-size-goal feitoria)
(or	(up-compare-goal feitoria-count g:>= feitoria-cap)
(or	(stone-amount < 250)
	(gold-amount < 250)))
=>
	(set-goal increase-town-size-goal 0)
;	(chat-local-to-self "Not enough resources to build.")
)
(defrule; don't build if we want to save wood
(or	(strategic-number sn-resource-control == 3); hand-cart upgrade
(or	(and	(strategic-number sn-resource-control == ri-elite-skirmisher)
		(building-type-count archery-range > 0))
	(and	(or	(strategic-number sn-resource-control == battering-ram)
			(goal save-wood-goal 1))
		(building-type-count siege-workshop > 0))))
=>
	(set-goal increase-town-size-goal 0)
)
#end-if; NOT WONDER-RACE
#end-if; end of non-PI start?
#load-if-not-defined WONDER-RACE
(defrule
(or	(goal increase-town-size-goal market)
	(goal increase-town-size-goal barracks))
	(wood-amount < 2000)
	(goal save-wood-goal 1)
=>
	(set-goal increase-town-size-goal 0)
)
#load-if-not-defined BLACK-FOREST-MAP
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-maximum-town-size >= 60)
	(goal unit-goal archer)
(or	(civ-selected viking)
	(civ-selected japanese))
(or	(wood-amount > 700)
	(goal increase-town-size-goal archery-range))
	(building-type-count-total archery-range < 12)
	(building-type-count-total archery-range > 3)
	(can-build archery-range)
=>
	(build-forward archery-range)
)
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CELTIC-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-maximum-town-size >= 60)
(or	(up-research-status c: ri-paladin >= research-pending)
	(up-research-status c: ri-heavy-camel >= research-pending))
	(gold-amount > 500)
	(wood-amount > 1300)
	(building-type-count-total stable < 15)
	(building-type-count-total stable > 3)
	(can-build stable)
=>
	(build-forward stable)
)
#end-if
#end-if
#load-if-defined GOTHIC-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-maximum-town-size >= 60)
(or	(up-research-status c: ri-champion >= research-pending)
	(up-research-status c: ri-anarchy >= research-pending))
(or	(wood-amount > 700)
	(goal increase-town-size-goal barracks))
	(building-type-count-total barracks < 15)
	(building-type-count-total barracks > 5)
	(can-build barracks)
=>
	(build-forward barracks)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-maximum-town-size >= 60)
	(up-research-status c: ri-heavy-scorpion >= research-pending)
	(gold-amount > 500)
	(wood-amount > 600)	
	(building-type-count-total siege-workshop < 5)
	(can-build siege-workshop)
=>
	(build-forward siege-workshop)
)
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(building-type-count-total monastery == 0)
	(goal increase-town-size-goal monastery)
	(can-build monastery)
=>
	(build monastery)
	(set-goal increase-town-size-goal 2)
)
(defrule
	(goal increase-town-size-goal market)
;	(building-type-count-total market < 1)
	(can-build-with-escrow market)
=>
	(release-escrow wood)
	(build market)
	(set-goal increase-town-size-goal 2)
)
(defrule
	(goal increase-town-size-goal blacksmith)
	(can-build blacksmith)
=>
	(build blacksmith)
	(set-goal increase-town-size-goal 2)
)
(defrule
	(goal increase-town-size-goal feitoria)
	(up-compare-goal feitoria-count g:< feitoria-cap)
	(can-build feitoria)
=>
	(build feitoria)
	(set-goal increase-town-size-goal 2)
)
(defrule
	(goal increase-town-size-goal stable)
	(can-build stable)
=>
	(build stable)
	(set-goal increase-town-size-goal 2)
)
(defrule
	(goal increase-town-size-goal barracks)
	(can-build barracks)
=>
	(build barracks)
	(set-goal increase-town-size-goal 2)
)
(defrule
	(goal increase-town-size-goal archery-range)
	(can-build archery-range)
=>
	(build archery-range)
	(set-goal increase-town-size-goal 2)
)
#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-defined DEATH-MATCH
(defrule
	(game-time > 60)
	(strategic-number sn-maximum-town-size < 12)
=>
	(set-strategic-number sn-maximum-town-size 12)
	(disable-self))
(defrule
	(game-time > 120)
	(strategic-number sn-maximum-town-size < 14)
=>
	(set-strategic-number sn-maximum-town-size 14)
	(disable-self))
#load-if-not-defined FEUDAL-AGE-START
(defrule
	(current-age == feudal-age)
	(current-age-time > 20)
	(strategic-number sn-maximum-town-size < 14)
=>
	(set-strategic-number sn-maximum-town-size 14)
	(disable-self))
(defrule
	(current-age == feudal-age)
	(current-age-time > 90)
	(strategic-number sn-maximum-town-size < 16)
=>
	(set-strategic-number sn-maximum-town-size 16)
	(disable-self))
(defrule
	(current-age == feudal-age)
	(current-age-time > 180)
	(strategic-number sn-maximum-town-size < 20)
=>
	(set-strategic-number sn-maximum-town-size 20)
	(disable-self))
#end-if
#end-if
#else;  PI
(defrule
	(game-time < 90)
=>
	(set-strategic-number sn-maximum-town-size 8)
	(set-strategic-number sn-percent-building-cancellation 5)
	(disable-self))
(defrule
	(game-time > 90)
=>
	(set-strategic-number sn-maximum-town-size 12)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-wood-drop-distance 30)
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(set-strategic-number sn-maximum-hunt-drop-distance 22)
	(set-strategic-number sn-gold-gatherer-percentage 100)
	(set-strategic-number sn-cap-civilian-builders 100)
	(set-strategic-number sn-cap-civilian-gatherers 100)
	(disable-self))
(defrule
	(game-time > 120)
	(strategic-number sn-maximum-town-size < 15)
=>
	(set-strategic-number sn-maximum-town-size 15)
	(disable-self))
(defrule
	(game-time > 180)
	(strategic-number sn-maximum-town-size < 18)
=>
	(set-strategic-number sn-maximum-town-size 18)
	(disable-self))
(defrule
	(game-time > 240)
	(strategic-number sn-maximum-town-size < 22)
=>
	(set-strategic-number sn-maximum-town-size 22)
	(set-strategic-number sn-camp-max-distance 50)
	(disable-self))
(defrule
	(game-time > 300)
	(strategic-number sn-maximum-town-size < 26)
=>
	(set-strategic-number sn-maximum-town-size 26)
	(set-strategic-number sn-percent-building-cancellation 75)
	(disable-self))
(defrule
	(game-time > 480)
	(strategic-number sn-maximum-town-size < 30)
=>
	(set-strategic-number sn-maximum-town-size 30)
	(disable-self))
#end-if
(defrule
	(game-time >= 60)
(or	(game-time >= 1230)
	(strategic-number sn-current-age >= castle))
(or	(game-time >= 1500)
	(wood-amount >= 200))
;	(not(enemy-buildings-in-town))
	(strategic-number sn-maximum-town-size < 14)
=>
	(set-strategic-number sn-maximum-town-size 14))
(defrule
	(game-time >= 45)
(or	(strategic-number sn-current-age >= feudal)
(or	(building-type-count-total archery-range >= 2); 1
(or	(building-type-count-total stable >= 2); 1
(or	(building-type-count-total blacksmith >= 1)
(or	(building-type-count-total market >= 1)
	(game-time >= 1080))))))
;	(not(enemy-buildings-in-town))
	(strategic-number sn-maximum-town-size < 12)
=>
	(set-strategic-number sn-maximum-town-size 12)); end jump
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(current-age == castle-age)
	(building-type-count-total town-center < tc-level-five)
(or	(goal unit-goal my-unique-unit-line)
(or	(goal unit-goal battle-elephant)
	(goal unit-goal knight)))
=>
	(up-jump-rule 1)
)
(defrule
	(current-age >= castle-age)
(or	(building-type-count-total town-center >= tc-level-four)
(or	(population >= max-civ-pop)
	(up-compare-goal custom-civ-pop >= max-civ)))
	(can-afford-building university)
	(building-type-count-total university <= 0)
	(goal increase-town-size-goal 0)
=>
	(set-goal increase-town-size-goal university)
	(enable-timer increase-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal 0)
	(current-age >= castle-age)
	(building-type-count-total town-center > 0)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(building-type-count-total monastery > 0)
	(building-type-count-total university <= 0)
	(wood-amount >= 200)
	(food-amount > 500)
	(gold-amount > 400)
=>
	(set-goal increase-town-size-goal university)
	(enable-timer increase-town-size-timer 4)
)
#load-if-not-defined TURKISH-CIV
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal unit-goal gunpowder-class)
	(can-afford-building university)
	(building-type-count-total university <= 0)
	(goal increase-town-size-goal 0)
=>
	(set-goal increase-town-size-goal university)
	(enable-timer increase-town-size-timer 4)
)
#end-if
(defrule
(or	(or	(building-type-count-total university >= 1)
		(wood-amount < 200))
	(or	(up-compare-goal save-wood-goal != 0)
		(and	(goal strategy-goal boom)
			(and	(population < max-civ-pop)
				(and	(up-compare-goal custom-civ-pop < max-civ)
					(and	(building-type-count-total town-center < tc-level-five)
						(or	(food-amount < 600)
							(gold-amount < 500))))))))
	(goal increase-town-size-goal university)
=>
	(set-goal increase-town-size-goal 0)
)
(defrule
	(goal increase-town-size-goal university)
	(building-type-count-total university < 1)
	(can-build university)
=>
	(build university)
	(set-goal increase-town-size-goal 2)
)
#end-if

#load-if-not-defined WONDER-RACE
(defrule
	(building-type-count-total town-center >= 1)
(or	(cc-players-unit-type-count 0 gold-mine < 6)
(or	(wood-amount >= 745)
	(strategic-number sn-current-age >= imperial)))
	(unit-type-count villager >= villager-stable)
(or	(up-research-status c: ri-hand-cart >= research-pending)
	(food-amount < 300))
	(building-type-count-total stable < number-stables)
	(can-build stable)
=>
	(build stable)
)
(defrule
	(building-type-count-total town-center >= 1)
(or	(cc-players-unit-type-count 0 gold-mine < 6)
(or	(wood-amount >= 745)
	(strategic-number sn-current-age >= imperial)))
	(unit-type-count villager >= villager-archery-range)
(or	(up-research-status c: ri-hand-cart >= research-pending)
	(food-amount < 300))
	(building-type-count-total archery-range < number-archery-ranges)
	(can-build archery-range)
=>
	(build archery-range)
)
(defrule
	(building-type-count-total town-center >= 1)
(or	(cc-players-unit-type-count 0 gold-mine < 6)
(or	(wood-amount >= 745)
	(strategic-number sn-current-age >= imperial)))
	(unit-type-count villager >= villager-barracks)
(or	(up-research-status c: ri-hand-cart >= research-pending)
	(food-amount < 300))
	(building-type-count-total barracks < number-barracks)
	(can-build barracks)
=>
	(build barracks)
)
#end-if

(defrule
	(building-type-count town-center > 0)
(or	(wood-amount >= 320)
	(and	(strategic-number sn-resource-control != ri-elite-skirmisher)
		(strategic-number sn-resource-control != battering-ram)))
(or	(dropsite-min-distance wood < wood-distance-farm); make sure we don't run out of wood
	(wood-amount >= 335)); 800
	(game-time > 180)
(or	(and	(goal farm-goal 1)
		(up-pending-objects c: farm < 2))
	(goal farm-goal 2))
(or	(goal save-wood-goal 0)
	(wood-amount >= 10000))
	(up-pending-objects c: farm < 8)
	(can-build farm)
=>
	(build farm)
)

;********** UNITS **********

#load-if-defined DIFFICULTY-EASIEST
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(strategic-number sn-resource-control == 0)
(or	(strategic-number sn-military-level >= 2)
(or	(population >= fourty-percent-pop)
	(and	(strategic-number sn-military-level >= 1)
		(population >= twenty-five-percent-pop))))
; test	(population-cap >= 175)
	(military-population >= 5); 25
; test	(strategic-number sn-military-level >= 0)
=>
	(set-strategic-number sn-resource-control 2)
;	(chat-to-player my-player-number "Hold back resources on this difficulty level.")
)
;(defrule
;	(strategic-number sn-current-age >= ci-transit)
;=>
;	(set-escrow-percentage wood 4)
;	(set-escrow-percentage food 4)
;	(set-escrow-percentage gold 4)
;	(set-escrow-percentage stone 4))
#end-if
#load-if-defined DIFFICULTY-EASY
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(strategic-number sn-resource-control == 0)
(or	(strategic-number sn-military-level >= 3)
(or	(population >= sixty-percent-pop)
	(and	(strategic-number sn-military-level >= 2)
		(population >= fourty-percent-pop))))
; test	(population-cap >= 175)
	(military-population >= 15); 25
; test	(strategic-number sn-military-level >= 1)
=>
	(set-strategic-number sn-resource-control 2)
;	(chat-to-player my-player-number "Hold back resources on this difficulty level.")
)
;(defrule
;	(strategic-number sn-current-age >= ci-transit)
;=>
;	(set-escrow-percentage wood 2)
;	(set-escrow-percentage food 2)
;	(set-escrow-percentage gold 2)
;	(set-escrow-percentage stone 2))
#end-if

#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(game-time < 180)
	(players-building-count every-enemy == 0)
	(unit-type-count scout-cavalry-line < 3)
=>
	(train scout-cavalry-line)
	(set-strategic-number sn-number-explore-groups 5)
	(set-strategic-number sn-minimum-explore-group-size 1)
)
#end-if
(defrule
	(players-building-count every-enemy > 0)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-total-number-explorers 1)
	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
	(disable-self)
)

; *** NAVY ***

#load-if-not-defined RIVERS-MAP
#load-if-not-defined BALTIC-MAP
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(players-unit-type-count every-enemy fire-ship-line < 15)
	(players-unit-type-count every-enemy galley-line < 15)
	(strategic-number sn-resource-control != 2)
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
(or	(population >= del-civ-pop)
	(and	(up-compare-goal navy-count >= 20)
		(soldier-count >= 20)))
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(unit-type-count-total transport-ship < 5)
	(can-train transport-ship)
=>
	(train transport-ship)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
(or	(population >= max-civ-pop)
(or	(strategic-number sn-military-level >= 2)
	(goal team-coordination-goal 1))); attacking
(or	(population >= max-civ-pop)
	(and	(or	(soldier-count >= 20)
			(strategic-number sn-military-level >= 3))
		(or	(or	(up-compare-goal navy-count >= 10)
				(up-compare-goal navy-count g:>= max-navy))
			(goal enemy-boats-goal 0))))
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(unit-type-count-total transport-ship < 5)
	(can-train transport-ship)
=>
	(train transport-ship)
)
#end-if
#end-if
#load-if-defined KOREAN-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed);	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(unit-type-count-total turtle-ship-line >= 3)
	(can-research-with-escrow ri-elite-turtle-ship)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-elite-turtle-ship)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed);	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(unit-type-count-total turtle-ship-line < 9); 12
	(gold-amount >= 250)
(or	(unit-type-count-total turtle-ship-line < 3); 3
	(up-research-status c: ri-elite-turtle-ship >= research-pending))
	(up-compare-goal navy-count g:< max-navy); < max-fleet)
	(can-train turtle-ship-line)
=>
	(train turtle-ship-line)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed);	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(up-compare-goal navy-count >= 20)
(or	(unit-type-count-total cannon-galleon-line < 6); 7
	(up-compare-goal navy-count >= 40))
	(unit-type-count-total cannon-galleon-line < 9); 12
	(can-train cannon-galleon-line)
=>
	(train cannon-galleon-line)
)
#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined POPULATION-CAP-50
#load-if-not-defined POPULATION-CAP-75
(defrule
	(game-time < 1800)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed);	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(strategic-number sn-resource-control <= 2)
	(strategic-number sn-military-level > 0)
	(up-compare-goal navy-count > 15)
(or	(cc-players-unit-type-count 0 shore-fish >= shorefishreq2); a bit
	(cc-players-unit-type-count 0 sea-fish >= deepfishreq2)); a bit
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(unit-type-count-total villager >= 7); easiest
	(up-compare-goal custom-civ-pop < max-civ)
	(population < max-civ-pop)
	(unit-type-count-total fishing-ship < 8); 16
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
#end-if
#end-if
#end-if
#load-if-defined PORTUGUESE-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed);	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(players-unit-type-count any-enemy galley-line >= 8)
	(can-research-with-escrow ri-elite-caravel)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-elite-caravel)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed);	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(players-unit-type-count any-enemy galley-line >= 8)
(or	(current-age <= castle-age)
(or	(up-research-status c: ri-galleon < research-pending)
	(up-research-status c: ri-elite-caravel >= research-pending)))
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(up-compare-goal navy-count g:< max-navy); < max-fleet)
	(can-train caravel-line)
=>
	(train caravel-line)
)
#end-if
#load-if-defined VIKING-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed);	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(can-research-with-escrow ri-elite-longboat)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-elite-longboat)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed);	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(up-research-status c: ri-elite-longboat >= research-pending)
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(up-compare-goal navy-count g:< max-navy); < max-fleet)
	(can-train longboat-line)
=>
	(train longboat-line)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed);	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(strategic-number sn-resource-control < 2)
(or	(current-age <= castle-age)
	(up-research-status c: ri-heavy-demolition-ship >= research-pending))
	(players-unit-type-count every-enemy galley-line < 4)
	(players-unit-type-count every-enemy longboat-line < 4)
	(players-unit-type-count every-enemy turtle-ship-line < 3)
	(players-unit-type-count every-enemy cannon-galleon-line < 4)
	(players-unit-type-count every-enemy caravel-line < 4)
	(players-unit-type-count any-enemy fire-ship-line >= 4)
(or	(players-unit-type-count any-enemy fire-ship-line >= 8)
	(unit-type-count-total demolition-ship-line < 3))
(or	(players-unit-type-count any-enemy fire-ship-line >= 12)
	(unit-type-count-total demolition-ship-line < 6))
	(unit-type-count-total demolition-ship-line < 9)
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(up-compare-goal navy-count g:< max-navy); < max-fleet)
	(can-train demolition-ship-line)
=>
	(train demolition-ship-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed);	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(strategic-number sn-resource-control < 2)
(or	(current-age <= castle-age)
	(up-research-status c: ri-fast-fire-ship >= research-pending))
(or	(strategic-number sn-current-age >= fc-transit)
(or	(goal strategy-goal flush)
	(and	(research-available feudal-age)
		(gold-amount >= 245))))
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(unit-type-count-total fire-ship-line < 22); 24
	(up-compare-goal navy-count g:< max-navy); < max-fleet)
	(can-train fire-ship-line)
=>
	(train fire-ship-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed);	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(strategic-number sn-resource-control < 2)
	(up-research-status c: ri-war-galley >= research-pending)
(or	(up-research-status c: ri-galleon >= research-available)
	(up-research-status c: ri-fast-fire-ship < research-available)); test
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(up-compare-goal navy-count g:< max-navy); < max-fleet)
	(can-train galley-line)
=>
	(train galley-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal position-goal flank)
	(building-type-count-total barracks < 3)
	(building-type-count-total archery-range < 1)
	(building-type-count-total stable < 1)
	(building-type-count-total castle < 1)
	(building-type-count-total siege-workshop < 2)
	(building-type-count-total monastery < 2)
	(wood-amount < 240)
	(players-building-type-count target-player dock < 3)
	(strategic-number sn-current-age < ci-transit)
=>
	(up-jump-rule 2)
)
(defrule
	(strategic-number sn-resource-control < 2)
(or	(up-research-status c: ri-galleon <= research-unavailable)
	(up-research-status c: ri-fast-fire-ship >= research-pending))
	(goal enemy-boats-goal 1)
(or	(up-compare-goal navy-count < 15)
(or	(unit-type-count-total fire-ship-line < 8)
	(civ-selected aztec)))
(or	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(up-compare-goal navy-count < 25))
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(up-compare-goal navy-count g:< max-navy); < max-fleet)
	(can-train fire-ship-line)
=>
	(train fire-ship-line)
)
(defrule
	(strategic-number sn-resource-control < 2)
(or	(goal strategy-goal flush)
	(strategic-number sn-current-age >= fc-transit));	(current-age > feudal-age))
(or	(and	(wood-amount >= 405)
		(gold-amount >= 130))
	(nor	(research-available ri-war-galley)
		(research-available ri-galleon)))
(or	(and	(goal enemy-boats-goal 1)
		(up-compare-goal navy-count < max-warships))
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed));	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands))
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(up-compare-goal navy-count g:< max-navy); < max-fleet)
	(can-train galley-line)
=>
	(train galley-line)
)

; counter units

(defrule
(nor	(civ-selected teutonic)
	(players-civ any-ally teutonic))
(or	(and	(strategic-number sn-resource-control <= 2)
		(or	(strategic-number sn-resource-control < 1)
			(unit-type-count scout-cavalry-line < 6)))
	(strategic-number sn-resource-control == ri-heresy))
(or	(food-amount > 200)
	(unit-type-count scout-cavalry-line < 6))
	(goal monk-threat-goal 1)
	(not (research-available ri-light-cavalry))
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
(defrule
(or	(civ-selected teutonic)
	(players-civ any-ally teutonic))
(nand	(game-time > 1800)
	(and	(players-unit-type-count every-enemy monk < 10)
		(players-unit-type-count every-enemy missionary < 10)))
(or	(and	(food-amount > 200)
		(strategic-number sn-resource-control < 2))
	(unit-type-count scout-cavalry-line < 6))
	(goal monk-threat-goal 1)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal rush)
	(goal unit-goal scout-cavalry)
;	(food-amount >= 130)
(nand	(food-amount < 180)
	(or	(research-available ri-double-bit-axe)
		(research-available ri-horse-collar)))
	(unit-type-count scout-cavalry-line < 5)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#load-if-defined ITALIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(and	(unit-type-count my-unique-unit-line < 20)
		(strategic-number sn-cavalry-threat >= 1))
	(up-research-status c: my-unique-unit-upgrade >= research-pending))
	(gold-amount > 100)
	(can-train genoese-crossbowman)
=>
	(train genoese-crossbowman)
)
#end-if
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal rush); when using fast castle strategy
	(unit-type-count-total spearman-line < 6)
(or	(players-building-type-count focus-player stable >= 1)
(or	(players-unit-type-count focus-player knight-line >= 1)
	(unit-type-count-total spearman-line < 4)))
	(strategic-number sn-current-age == fc-transit)
	(players-current-age focus-player == castle-age);(players-current-age every-enemy == castle-age)
	(players-current-age-time focus-player >= 45);(players-current-age-time every-enemy >= 60); enemy at least 60s ahead of us in castle age
	(goal enemy-goal rush); possible enemy krush
	(goal meso-enemy-goal -1)
	(can-train spearman-line); make spearman so enemy won't raid us with knights
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(current-age == feudal-age)
(or	(food-amount >= 85)
	(unit-type-count spearman-line < 4))
	(unit-type-count-total spearman-line < 7)
(or	(unit-type-count-total spearman-line < 5)
	(players-unit-type-count focus-player scout-cavalry-line >= 5))
(or	(unit-type-count-total spearman-line < 3)
	(players-unit-type-count focus-player scout-cavalry-line >= 4))
	(players-unit-type-count focus-player scout-cavalry-line >= 3)
	(strategic-number sn-focus-player-number g:== closest-enemy-goal)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count spearman-line < 6)
(or	(food-amount >= 85)
	(unit-type-count spearman-line < 4))
	(current-age == feudal-age)
	(goal threat-source 947)
	(goal threat-target villager-class)
	(up-compare-goal threat-time < 5000)
	(players-unit-type-count focus-player scout-cavalry-line > 1)
	(can-train spearman-line); enemy going scout flush
=>
	(train spearman-line)
)
#end-if
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(or	(goal unit-goal knight)
		(up-research-status c: ri-imperial-camel >= research-pending))
	(unit-type-count camel-line < 12))
	(can-train camel-line)
=>
	(train camel-line)
)
#end-if
#load-if-not-defined BERBERS-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined INDIAN-CIV
(defconst extra-anti-cav-unit spearman-line)
#else
(defconst extra-anti-cav-unit camel-line)
#end-if
#else
(defconst extra-anti-cav-unit camel-line)
#end-if
#else
(defconst extra-anti-cav-unit camel-line)
#end-if
#else
(defconst extra-anti-cav-unit camel-line)
#end-if
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-defined POST-IMPERIAL-AGE-START
#load-if-not-defined MONGOL-CIV; no halbs
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat >= 1)
(or	(strategic-number sn-cavalry-threat >= 4); test
;(or
	(players-unit-type-count focus-player paladin > 0)
;	(players-unit-type-count focus-player imperial-camel > 10))
)
(or	(up-research-status c: ri-halberdier >= research-pending)
(or	(up-research-status c: ri-heavy-camel >= research-pending)
	(up-research-status c: ri-camel-corps >= research-pending))); test
	(unit-type-count-total extra-anti-cav-unit < 40)
	(can-train extra-anti-cav-unit)
=>
	(train extra-anti-cav-unit)
)
#end-if
(defrule
	(game-time < 300)
(or	(players-unit-type-count focus-player knight-line > 0)
	(strategic-number sn-cavalry-threat >= 1))
	(up-research-status c: ri-heavy-camel >= research-pending)
	(unit-type-count camel-line < high-min-number-upgrade)
	(can-train camel-line)
=>
	(train camel-line)
)
#load-if-defined DEATH-MATCH
(defrule
	(strategic-number sn-resource-control < 1)
(or	(civ-selected saracen)
	(civ-selected indian))
	(population < seventy-five-percent-pop)
	(game-time < 480)
	(can-train camel-line)
=>
	(train camel-line)
)
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(food-amount >= 85)
	(goal strategy-goal flush)
	(current-age <= castle-age)
	(strategic-number sn-cavalry-threat >= 1)
	(building-type-count-total archery-range > 0)
(or	(current-age == feudal-age)
	(up-research-status c: ri-pikeman >= research-pending))
	(unit-type-count spearman-line < 18)
	(unit-type-count camel-line < 12)
;	(unit-type-count villager >= 30)
	(can-train spearman-line)		
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(strategic-number sn-cavalry-threat >= 1)
(or	(and	(food-amount >= 85)
		(wood-amount >= 70))
	(unit-type-count spearman-line < 4))
(or	(unit-type-count spearman-line < 9)
	(strategic-number sn-cavalry-threat >= 2))
	(unit-type-count spearman-line < 12)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if ;NOT EASY
#end-if ;NOT EASIEST
#load-if-defined BYZANTINE-CIV
(defrule
	(starting-age == post-imperial-age)
	(game-time > 600)
	(building-type-count castle > 0)
=>
	(up-jump-rule 1)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-paladin >= research-pending)
(or	(or	(and	(players-unit-type-count focus-player spearman-line < 25)
			(players-unit-type-count focus-player camel-line < 20))
		(and	(civ-selected celtic)
			(gold-amount > 2000)))
(or	(strategic-number sn-archer-threat > 1)
(or	(players-unit-type-count focus-player mangonel-line > 7)
	(players-unit-type-count focus-player scorpion-line > 9))))
	(can-train knight-line)
=>
	(train knight-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count my-unique-unit-line < 20)
	(strategic-number sn-infantry-threat >= 1)
(or	(gold-amount > 100)
	(up-research-status c: my-unique-unit-upgrade >= research-pending))
(or	(or 	(civ-selected aztec)
		(civ-selected byzantine))
	(or 	(civ-selected spanish)
		(up-research-status c: ri-elite-teutonic-knight >= research-pending)))
	(can-train my-unique-unit-line)
=>
	(train my-unique-unit-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(can-train my-unique-unit-line)
	(unit-type-count my-unique-unit-line < 12)
	(goal enemy-goal eagle-warrior)
(or	(or 	(civ-selected aztec)
		(civ-selected byzantine))
	(or 	(civ-selected japanese)
		(or	(civ-selected teutonic)
			(civ-selected ethiopian))))
=>
	(train my-unique-unit-line)
)
#load-if-defined INCAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total slinger < 25)
(or	(strategic-number sn-infantry-threat >= 2)
	(goal ranged-unit-type-goal slinger))	
(or	(gold-amount > 100)
	(current-age == castle-age))
(or	(up-research-status c: ri-arbalest < research-pending)
	(goal ranged-unit-type-goal slinger))
	(can-train slinger)
=>
	(train slinger)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(unit-type-count villager > 75)
	(food-amount >= unique-unit-food))
	(strategic-number sn-cavalry-threat >= 1)
(or	(strategic-number sn-cavalry-threat >= 2)
(or	(gold-amount > 100)
	(current-age == castle-age)))
(or	(unit-type-count my-unique-unit-line < 20)
(or	(strategic-number sn-cavalry-threat >= 2)
	(unit-type-count-total archer-line >= 15)))
	(can-train my-unique-unit-line)
=>
	(train my-unique-unit-line)
)
#end-if
#load-if-defined BERBERS-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(players-unit-type-count focus-player knight-line >= 5)
	(players-unit-type-count focus-player scout-cavalry-line >= 6))
(or	(strategic-number sn-cavalry-threat >= 1)
	(unit-type-count camel-line < 8))
(or	(strategic-number sn-cavalry-threat >= 2)
	(unit-type-count camel-line < 16))
(or	(strategic-number sn-cavalry-threat >= 2)
	(gold-amount > 100))
	(unit-type-count camel-line < 32)
	(can-train camel-line)
=>
	(train camel-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(players-unit-type-count focus-player cavalry-archer-line >= 5)
	(players-unit-type-count focus-player mangudai >= 5))
(or	(players-unit-type-count focus-player cavalry-archer-line >= 15)
(or	(players-unit-type-count focus-player mangudai >= 15)
	(unit-type-count my-unique-unit-line < 15)))
(or	(players-unit-type-count focus-player cavalry-archer-line >= 30)
(or	(players-unit-type-count focus-player mangudai >= 30)
	(unit-type-count my-unique-unit-line < 30)))
	(can-train my-unique-unit-line)
=>
	(train my-unique-unit-line)
)
#end-if
#load-if-defined ETHIOPIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-archer-threat < 2)
(or	(players-unit-type-count focus-player eagle-warrior-line >= 15)
	(players-unit-type-count focus-player huskarl-line >= 12))
	(can-train my-unique-unit-line)
=>
	(train my-unique-unit-line)
)
#end-if
#load-if-defined GOTHIC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(food-amount > 100)
	(gold-amount > 90)
	(can-train b-husk-line)
=>
	(train b-husk-line)
	(set-goal unit-goal my-unique-unit-line)
)
#end-if
#load-if-defined MALIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(strategic-number sn-archer-threat < 1)
	(and	(strategic-number sn-archer-threat < 2)
		(up-research-status c: my-unique-unit-line >= research-pending)))
(or	(strategic-number sn-cavalry-threat < 3)
	(players-unit-type-count focus-player huskarl-line >= 12))
	(can-train my-unique-unit-line)
=>
	(train my-unique-unit-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
; nn	(unit-type-count-total 882 < 36)
	(unit-type-count-total condottiero < 36)
(or
; nn	(and	(unit-type-count-total 882 < 27)
		(unit-type-count-total condottiero < 27); nn)
	(gold-amount > 100))
	(players-unit-type-count focus-player hand-cannoneer > 6)
	(gold-amount > 70)
(or	(goal unit-goal militiaman-line)
(or	(civ-selected aztec)
(or	(civ-selected incan)
(or	(civ-selected japanese)
(or	(civ-selected viking)
(or	(civ-selected malay)
(or	(civ-selected malian)
(or	(unit-type-count karambit-warrior-line > high-min-number-upgrade)
(or	(unit-type-count shotel-line >= high-min-number-upgrade)
(or	(unit-type-count teutonic-knight-line >= mid-min-number-upgrade); high-
	(civ-selected gothic)))))))))))
	(can-train condottiero)
=>
	(train condottiero)
)

(defrule
;	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
(or	(unit-type-count genitour-line < 30)
	(population < max-civ-pop))
	(strategic-number sn-archer-threat >= 2)
(or	(up-research-status c: ri-elite-genitour >= research-pending)
(or	(up-research-status c: ri-elite-skirmisher <= research-unavailable)
	(and	(and	(up-research-status c: ri-bloodlines >= research-pending)
			(up-research-status c: ri-imperial-skirmisher < research-pending))
		(up-research-status c: ri-elite-genitour >= research-available))))
(or	(gold-amount < 250)
	(population < max-civ-pop))
	(wood-amount >= 125)
	(unit-type-count huskarl-set < 18)
	(unit-type-count bombard-cannon < 6)
	(unit-type-count mangonel-line < 6)
	(unit-type-count scorpion-line < 10)
	(unit-type-count knight-line < 30)
	(unit-type-count war-elephant-line < 10)
	(can-train 1079)
=>
	(train 1079); genitours
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(strategic-number sn-resource-control == 2)
(or	(strategic-number sn-military-level <= -2)
	(strategic-number sn-archer-threat >= 1)))
	(wood-amount >= 300)
	(food-amount >= 300)
	(population < max-civ-pop)
(or	(dropsite-min-distance gold > 5)
	(gold-amount < 100))
	(strategic-number sn-military-level <= 0)
	(up-research-status c: ri-elite-genitour >= research-pending)
;	(up-research-status c: ri-bloodlines >= research-pending)
	(can-train 1079)
=>
	(train 1079); genitours
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count-total genitour-line >= mid-min-number-upgrade)
	(up-research-status c: ri-imperial-skirmisher < research-pending))
(or	(and	(strategic-number sn-resource-control < 1)
		(or	(wood-amount > 800)
			(or	(food-amount > 800)
				(gold-amount > 800))))
(or	(unit-type-count-total genitour-line >= high-min-number-upgrade)
	(and	(strategic-number sn-resource-control < 1)
		(or	(strategic-number sn-archer-threat >= 2)
			(or	(unit-type-count-total genitour-line >= low-min-number-upgrade)
				(and	(up-pending-objects c: skirmisher-line >= 1)
					(not	(civ-selected byzantine))))))))
	(can-research ri-elite-genitour)
=>
	(research ri-elite-genitour)
)
#load-if-defined GOTHIC-CIV
(defrule
	(not (player-in-game any-ally))
	(up-research-status c: ri-champion >= research-pending)
	(players-unit-type-count every-enemy teutonic-knight-line < 9)
	(gold-amount < 500)
=>
	(up-jump-rule 1)
)
#end-if	
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total hand-cannoneer < 60)
(or	(unit-type-count-total hand-cannoneer < 30)
(or	(gold-amount >= 2000)
	(up-compare-goal trade-units >= 20)))
(or	(goal unit-goal gunpowder-class)
	(and	(goal ranged-unit-type-goal gunpowder-class)
		(or	(unit-type-count-total hand-cannoneer < 15)
			(death-match-game))))
	(gold-amount > 100)
	(can-train hand-cannoneer)
=>
	(train hand-cannoneer)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total bombard-cannon < 6)
(or	(goal unit-goal gunpowder-class)
	(up-research-status c: ri-arquebus >= research-pending))
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total mangonel-line < 5)
	(players-unit-type-count focus-player scorpion-line >= 4); min 4 scorps
(or	(unit-type-count-total bombard-cannon < 3)
(or	(and	(players-unit-type-count focus-player scorpion-line >= 8)
		(unit-type-count-total bombard-cannon < 5))
(or	(and	(players-unit-type-count focus-player scorpion-line >= 12)
		(unit-type-count-total bombard-cannon < 7))
	(players-unit-type-count focus-player scorpion-line >= 16))))
	(unit-type-count-total bombard-cannon < 9)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total mangonel-line < 5)
	(players-unit-type-count focus-player mangonel-line >= 4); min 4 scorps
(or	(unit-type-count-total bombard-cannon < 3)
(or	(and	(players-unit-type-count focus-player mangonel-line >= 8)
		(unit-type-count-total bombard-cannon < 5))
(or	(and	(players-unit-type-count focus-player mangonel-line >= 12)
		(unit-type-count-total bombard-cannon < 7))
	(players-unit-type-count focus-player mangonel-line >= 16))))
	(unit-type-count-total bombard-cannon < 9)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(military-population >= 25)
	(strategic-number sn-military-level >= 1))
(or	(unit-type-count-total battering-ram-line >= 2)
	(unit-type-count-total trebuchet-set >= 1))
	(unit-type-count-total bombard-cannon < 3)
	(can-train bombard-cannon)
=>
	(train bombard-cannon)
)
#end-if
#end-if
#end-if
#load-if-not-defined TURKISH-CIV
(defrule
	(up-research-status c: ri-heavy-scorpion >= research-pending)
	(wood-amount >= 300)
	(players-unit-type-count every-enemy huskarl-line < 9)
	(unit-type-count scorpion-line > 4)
=>
	(up-jump-rule 2)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
(nand	(or	(civ-selected teutonic)
		(civ-selected byzantine))
	(building-type-count castle > 0))
	(unit-type-count-total hand-cannoneer < 33)
(or	(strategic-number sn-infantry-threat >= 2)
(or	(players-unit-type-count focus-player huskarl-line > 6)
	(unit-type-count-total hand-cannoneer < 25)))
(or	(strategic-number sn-infantry-threat >= 1)
	(players-unit-type-count focus-player huskarl-line > 4))
	(gold-amount > 150)
	(can-train hand-cannoneer)
=>
	(train hand-cannoneer))
(defrule
	(strategic-number sn-resource-control < 1)
(or	(players-unit-type-count focus-player huskarl-line > 8)
	(up-research-status c: ri-arbalest < research-available))
	(unit-type-count hand-cannoneer < 50)
(or	(strategic-number sn-infantry-threat >= 2)
(or	(players-unit-type-count focus-player huskarl-line > 8)
	(players-unit-type-count focus-player teutonic-knight-line > 7)))
	(gold-amount > 100)
	(can-train hand-cannoneer)
=>
	(train hand-cannoneer))
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-long-swordsman >= research-pending)
(or	(food-amount >= 110)
	(strategic-number sn-military-level < 1))
	(goal enemy-goal eagle-warrior)
	(unit-type-count militiaman-line < 12)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(can-train my-unique-unit-line)
(or	(current-age == castle-age)
	(gold-amount > 120))
(or	(or	(civ-selected mongol)
		(civ-selected briton))
	(and	(strategic-number sn-archer-threat >= 1)
		(civ-selected gothic)))
=>
	(train my-unique-unit-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat > 0)
(or	(game-time < 900); in DM
	(strategic-number sn-cavalry-threat > 2))		
	(can-train camel-line)
	(gold-amount > 250)
(or	(unit-type-count camel-line < 16)
	(strategic-number sn-cavalry-threat > 3))
(or	(unit-type-count camel-line < 24)
	(game-time < 600))
(or	(current-age < imperial-age)
	(up-research-status c: ri-heavy-camel >= research-available))
=>
	(train camel-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(game-time < 900)
	(can-train camel-line)
	(players-civ focus-player hun)
(or	(current-age < imperial-age)
	(up-research-status c: ri-heavy-camel >= research-available))
	(gold-amount > 250)
=>
	(train camel-line)
)
#load-if-not-defined WONDER-RACE
(defrule
	(strategic-number sn-resource-control < 1)
	(goal ranged-unit-type-goal monk)
	(up-research-status c: ri-sanctity >= research-pending)
(or	(unit-type-count-total monastery-class < 12)
	(and	(or	(players-unit-type-count every-enemy monk < 5)
			(up-research-status c: ri-atonement >= research-pending))
		(or	(and	(players-unit-type-count every-enemy mangonel-line == 0)
				(players-unit-type-count every-enemy scorpion-line < 5))
			(up-research-status c: ri-redemption >= research-pending))))
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-sanctity >= research-available)
	(up-research-status c: ri-block-printing >= research-available)
	(gold-amount > 175)
(or 	(civ-selected aztec)
(or	(players-unit-type-count focus-player war-elephant-line > 5)
(or	(players-unit-type-count focus-player battle-elephant-line > 7)
	(players-unit-type-count focus-player elephant-archer-line > 10))))
(or	(goal anti-monk-threat-goal 0)
	(and	(players-unit-type-count any-enemy war-elephant-line > 20)
		(unit-type-count monastery-class < 15)))
	(can-train monk)
=>
	(train monk)
)
#end-if
#load-if-not-defined TURKISH-CIV
#load-if-not-defined POPULATION-CAP-25
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(current-age >= castle-age)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat >= 1)
	(food-amount >= 85)
	(up-compare-goal control-goal != shot)
(nand	(and	(building-type-count-total town-center < tc-level-two)
		(goal position-goal pocket))
	(and	(or	(goal unit-goal knight)
			(goal unit-goal battle-elephant))
		(research-available ri-pikeman)))
(or	(unit-type-count-total spearman-line < 10)
	(up-research-status c: ri-pikeman >= research-pending))
	(unit-type-count-total spearman-line < 30)
	(unit-type-count-total camel-line < 7); don't overdo anti cavalry
	(unit-type-count-total imperial-camel < 7)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(food-amount >= 85)
	(not (player-valid 3))
	(current-age >= castle-age)
	(strategic-number sn-cavalry-threat > 1)
	(strategic-number sn-military-level < 0)
(or	(unit-type-count-total spearman-line < 10)
	(up-research-status c: ri-pikeman >= research-pending))
	(unit-type-count-total spearman-line < 18)
	(unit-type-count-total camel-line < 12)
	(unit-type-count-total imperial-camel < 12)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(food-amount >= 85)
	(strategic-number sn-cavalry-threat >= 1)
(or	(strategic-number sn-cavalry-threat >= 2); 3
(or	(or	(goal unit-goal archer); ranged units are weak vs cavalry
		(goal unit-goal skirmisher))
	(strategic-number sn-military-level >= 1))); or try to reach lvl2 and attack
	(unit-type-count-total spearman-line < 15)
	(unit-type-count-total camel-line < 10)
	(unit-type-count-total imperial-camel < 10)
	(up-research-status c: ri-pikeman >= research-pending)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#else
(defrule
	(strategic-number sn-current-age == castle)
	(strategic-number sn-cavalry-threat < 2); 3
(or	(goal unit-goal knight)
(or	(goal unit-goal battle-elephant)
	(and	(goal unit-goal my-unique-unit-line)
		(or	(civ-selected spanish)
			(civ-selected persian)))))
	(goal strategy-goal boom)
=>
	(up-jump-rule 1)
)	
(defrule
	(current-age >= castle-age)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat >= 1)
	(food-amount >= 85)
(or	(strategic-number sn-cavalry-threat >= 2); 3
(or	(current-age-time > 360); 420
	(goal unit-goal archer)))
(or	(unit-type-count-total spearman-line < 8)
	(up-research-status c: ri-pikeman >= research-pending))
(or	(unit-type-count-total spearman-line < 16)
	(strategic-number sn-cavalry-threat >= 2))
	(unit-type-count-total spearman-line < 30)
	(gold-amount < 200)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if
#else
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-cavalry-threat >= 1)
	(food-amount >= 85)
	(up-research-status c: ri-pikeman >= research-pending)
	(unit-type-count-total spearman-line < 4)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#end-if
#else
(defrule
	(strategic-number sn-resource-control < 1)
	(can-train camel-line)
(or	(strategic-number sn-cavalry-threat >= 1)
	(players-unit-type-count focus-player cavalry-archer-line >= 15))
(or	(gold-amount > 100)
	(unit-type-count-total camel-line < 6))
	(unit-type-count-total spearman-line < 30)
=>
	(train camel-line)
)
#end-if
#load-if-defined BYZANTINE-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(goal unit-goal knight)
(or	(or	(players-unit-type-count focus-player knight-line >= 5); in RM train camels vs mass knights
		(or	(players-unit-type-count focus-player scout-cavalry-line >= 5); or vs scouts + ca
			(players-unit-type-count focus-player cavalry-archer-line >= 14)))
	(or	(strategic-number sn-cavalry-threat >= 1)
		(unit-type-count-total camel-line < 8)))
	(unit-type-count-total spearman-line < 30)
	(can-train camel-line)
=>
	(train camel-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-pikeman >= research-pending)
	(gold-amount < 50)
	(food-amount > 200)
	(wood-amount > 200)
(or	(or	(civ-selected aztec)
		(civ-selected viking))
	(up-research-status c: ri-halberdier >= research-pending))
	(unit-type-count-total spearman-line < 20)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
(or	(strategic-number sn-resource-control < 1)
(or	(civ-selected turkish)
	(civ-selected indian)))
(or	(and	(or	(strategic-number sn-cavalry-threat >= 1)
		(or	(or	(players-unit-type-count focus-player cavalry-archer-line >= 12)
				(players-unit-type-count focus-player mangudai-line >= 12))
			(unit-type-count-total camel-line >= high-min-number-upgrade)))
		(unit-type-count-total camel-line >= mid-min-number-upgrade))
	(civ-selected indian))
	(can-research ri-heavy-camel)
=>
	(research ri-heavy-camel)
)
(defrule
	(strategic-number sn-resource-control < 1) ; anticipate knight defense
	(goal unit-goal eagle-warrior); so better make some spears and spend our gold to collect relics
	(food-amount >= 85)
	(goal enemy-goal rush)
(or 	(or 	(players-civ focus-player hun)
		(players-civ focus-player frankish))
	(or 	(players-civ focus-player teutonic)
		(players-civ focus-player viking)))
	(unit-type-count-total monk <= 0)
	(building-type-count-total monastery > 0)
	(unit-type-count-total spearman-line < 5)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-elite-eagle-warrior >= research-pending)
(or	(current-age-time < 300)
	(gold-amount > 114))
(nor	(players-unit-type-count focus-player teutonic-knight-line > 11)
	(players-unit-type-count focus-player militiaman-line > 19))
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
(nand 	(goal train-civ-goal ri-chain-mail)
	(gold-amount < 160))
(or	(food-amount >= 52); one food drop left to train next villager
(or	(town-under-attack)
	(and	(goal control-goal aggressive-rush)
		(current-age-time < 240))))
	(goal unit-goal eagle-warrior)
	(goal strategy-goal rush)
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
;	(current-age == castle-age)
	(strategic-number sn-resource-control < 1)
(or	(gold-amount > 120)
	(strategic-number sn-military-level < 0))
	(food-amount >= 52)
	(goal unit-goal mix)
	(goal strategy-goal rush)
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
#load-if-defined MAYAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(players-unit-type-count focus-player huskarl-line > 3)
(or	(players-unit-type-count any-enemy militiaman-line < 12)
(or	(unit-type-count archer-line > 12)
	(unit-type-count plumed-archer-line > 12)))
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
(or	(gold-amount > 150)
	(current-age == castle-age))
(or	(players-unit-type-count focus-player monk > 5)
(or	(players-unit-type-count focus-player missionary > 5)
	(goal control-goal shot)))
	(unit-type-count-total eagle-warrior < 15)
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
(defrule
(or	(goal unit-goal eagle-warrior)
	(goal control-goal eagle-warrior))
	(strategic-number sn-resource-control < 1)
(or	(strategic-number sn-current-age >= fc-transit)
	(strategic-number sn-military-level <= -1))
	(food-amount > 70)
	(gold-amount > 150)
	(unit-type-count eagle-warrior < 15)
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(gold-amount > 120)
	(players-unit-type-count focus-player skirmisher-line > 15)
(or	(civ-selected japanese)
	(civ-selected viking))
	(up-research-status c: ri-heavy-scorpion >= research-pending)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-archer-threat >= 2)
(or	(gold-amount > 220)
	(and	(or	(strategic-number sn-cavalry-threat < 2)
			(or	(unit-type-count camel-line >= mid-min-number-upgrade)
				(unit-type-count spearman-line >= high-min-number-upgrade)))
		(players-unit-type-count every-enemy eagle-warrior-line < high-min-number-upgrade)))
	(up-research-status c: ri-heavy-scorpion >= research-pending)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(current-age == feudal-age)
(or	(and	(strategic-number sn-current-age == fc-transit)
		(goal control-goal aggressive-rush))
	(and	(building-type-count-total blacksmith > 0)
		(gold-amount > 245)))
	(goal unit-goal archer)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-crossbow >= research-pending)
	(goal ranged-unit-type-goal archer)
	(nor (can-train longbowman-line)
	(can-train plumed-archer-line))
	(nor (can-train war-wagon-line)
	(goal strategy-goal boom))
	(gold-amount > 120)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(wood-amount > 100)
	(gold-amount >= 145)
	(strategic-number sn-current-age >= fc-transit)
(or	(game-time < 1800)
	(civ-selected viking))
	(goal ranged-unit-type-goal archer)
	(goal strategy-goal boom)
	(can-train archer-line)
=>
	(train archer-line)
)
#load-if-not-defined SARACEN-CIV
(defrule
(or	(strategic-number sn-resource-control < 1)
	(and	(or	(or	(strategic-number sn-resource-control == ri-pikeman)
				(strategic-number sn-resource-control == ri-bodkin-arrow))
			(strategic-number sn-resource-control == ri-crossbow))
		(gold-amount >= 145)))
	(strategic-number sn-current-age >= fc-transit)
	(game-time < 1800)
	(goal unit-goal archer)
	(goal strategy-goal rush)
	(can-train archer-line)
=>
	(train archer-line)
)
#else
(defrule
	(strategic-number sn-resource-control < 1); buy food instead with saracen
	(strategic-number sn-current-age >= fc-transit)
	(game-time < 1800)
	(goal unit-goal archer)
	(goal strategy-goal rush)
	(can-train archer-line)
=>
	(train archer-line)
)
#end-if
#load-if-defined MAGYAR-CIV
(defrule
(or	(strategic-number sn-resource-control < 1)
	(and	(research-available imperial-age)
		(and	(food-amount >= 1080)
			(gold-amount < 700))))
	(food-amount >= unique-unit-food); > 150
	(can-train magyar-huszar-line)
=>
	(train magyar-huszar-line)
)
#end-if
#load-if-defined SLAVIC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
(or	(current-age == castle-age)
	(gold-amount > 120))
(or	(unit-type-count villager > 75)
	(food-amount >= unique-unit-food))
	(can-train boyar-line)
=>
	(train boyar-line)
)
#end-if
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-defined CELTIC-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-military-level <= 0)
	(strategic-number sn-current-age == fc-transit)
	(goal strategy-goal flush)
	(wood-amount > 200)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
#end-if
(defrule
	(current-age >= castle-age)
	(strategic-number sn-resource-control == 2)
(not	(player-in-game 3))
	(up-research-status c: ri-pikeman >= research-pending)
	(wood-amount > 400); gold shortage while getting imperial researches
	(food-amount > 400); so keep slots filled
	(gold-amount < 200); with non-gold units
	(population < max-civ-pop)
(nand	(up-research-status c: ri-bracer >= research-pending)
	(unit-type-count spearman-line >= 40))
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(up-research-status c: ri-pikeman >= research-pending)
	(research-available imperial-age)
	(population < max-civ-pop)
(or	(food-amount > imperial-food)
	(gold-amount < 300))
	(food-amount > 400)
	(gold-amount < imperial-gold)
	(wood-amount >= 100)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(up-research-status c: ri-elite-skirmisher >= research-available)
	(research-available imperial-age)
	(population < max-civ-pop)
(or	(food-amount > imperial-food)
	(gold-amount < 300))
	(food-amount > 400)
	(gold-amount < imperial-gold)
	(wood-amount >= 100)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
#end-if; NOT EASY
#end-if; NOT EASIEST
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined SPANISH-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined KOREAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(goal unit-goal my-unique-unit-line)
	(goal strategy-goal rush)
	(strategic-number sn-current-age == castle)
	(unit-type-count knight-line < 12)
	(can-train knight-line)
=>
	(train knight-line)
)
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(or
		(and
			(goal unit-goal cavalry-archer)
			(up-research-status c: ri-bloodlines >= research-pending)
		)
		(goal unit-goal mix)
	)
	(or
		(building-type-count-total archery-range < 6)
		(goal enemy-goal eagle-warrior)
	)
	(goal strategy-goal rush)
	(current-age == castle-age)
	(unit-type-count knight-line < 12)
	(can-train knight-line)
=>
	(train knight-line)
)
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(goal unit-goal skirmisher)
	(or
		(players-unit-type-count focus-player eagle-warrior-line > 5)
		(strategic-number sn-military-level >= 2)
	)
	(nand
		(civ-selected byzantine)
		(building-type-count castle > 0)
	)
	(goal strategy-goal rush)
	(current-age == castle-age)
	(unit-type-count knight-line < 12)
	(can-train knight-line)
=>
	(train knight-line)
)
#load-if-not-defined DEATH-MATCH
(defrule
	(strategic-number sn-resource-control < 1)
	(goal unit-goal archer)
	(up-compare-goal position-goal == flank)
	(game-time < 1800)
	(or
		(goal enemy-goal eagle-warrior)
		(or
			(up-compare-goal enemy-goal != flush)
			(or
				(players-building-type-count focus-player market > 0)
				(players-building-type-count focus-player barracks > 1)
			)
		)
	)
	(unit-type-count knight-line < 6)
	(can-train knight-line)
=>
	(train knight-line)
)
#end-if
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(strategic-number sn-resource-control < 1)
(or	(and	(goal strategy-goal flush)
		(current-age == castle-age))
	(and	(up-research-status c: ri-cavalier >= research-pending)
		(gold-amount > 150)))
(or	(or	(goal anti-cavalry-threat-goal 0)
		(military-population < 30))
	(death-match-game))
(nand	(and	(up-compare-goal unit-goal != knight)
		(up-compare-goal control-goal != knight))
	(or	(up-compare-goal unit-goal == battle-elephant)
		(up-compare-goal control-goal == battle-elephant)))
	(can-train knight-line)
=>
	(train knight-line)
)
#else
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined GOTHIC-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-cavalier >= research-pending)
(or 	(up-research-status c: ri-bloodlines >= research-pending)
	(up-research-status c: ri-paladin >= research-pending))
(or	(goal anti-cavalry-threat-goal 0)
(or	(game-time < 480)
	(and	(civ-selected hun)
		(death-match-game))))
(nand	(and	(up-compare-goal unit-goal != knight)
		(up-compare-goal control-goal != knight))
	(or	(up-compare-goal unit-goal == battle-elephant)
		(up-compare-goal control-goal == battle-elephant)))
	(can-train knight-line)
=>
	(train knight-line)
)
#end-if
#end-if
(defrule
	(game-time < 240)
	(can-train monk)
=>
	(train monk)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
(or	(goal unit-goal knight)
(or	(and	(goal control-goal knight)
		(gold-amount > 225))
	(and	(up-research-status c: ri-paladin >= research-pending)
		(and	(players-unit-type-count every-enemy camel-line < 25)
			(and	(players-unit-type-count every-enemy spearman-line < 25)
				(players-unit-type-count every-enemy kamayuk-line < 25))))))
(or	(current-age == castle-age)
	(gold-amount > 100))
	(can-train knight-line)
=>
	(train knight-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(goal unit-goal battle-elephant)
	(and	(goal control-goal battle-elephant)
		(gold-amount > 225)))
(or	(current-age == castle-age)
	(gold-amount > 100))
	(can-train battle-elephant-line)
=>
	(train battle-elephant-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(and	(up-research-status c: ri-chain-barding >= research-pending)
		(or	(gold-amount >= 1300)
			(up-research-status c: ri-elite-battle-elephant >= research-pending)))
(or	(up-research-status c: ri-howdah >= research-pending)
(or	(up-research-status c: ri-tusk-swords >= research-pending)
	(up-research-status c: ri-chatras >= research-pending))))
	(up-compare-goal anti-cavalry-threat-goal <= 0)
	(up-compare-goal monk-threat-goal <= 0)
	(unit-type-count-total battle-elephant-line <= high-min-number-upgrade)
	(gold-amount >= 275)
(or	(up-research-status c: ri-elite-battle-elephant >= research-pending)
	(gold-amount >= 575))
	(can-train battle-elephant-line)
=>
	(train battle-elephant-line)
)
; balance resources
#load-if-defined ITALIAN-CIV
(defrule
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-resource-control != ri-imperial-skirmisher)
	(strategic-number sn-resource-control != ri-heresy)
	(gold-amount > 250)
	(food-amount < 200)
(or	(food-amount < 80)
	(gold-amount > 400))
	(can-train my-unique-unit-line)
=>
	(train my-unique-unit-line)
)
#end-if
#load-if-not-defined MALAY-CIV
#load-if-not-defined BERBERS-CIV
#load-if-not-defined AZTEC-CIV
#load-if-not-defined CELTIC-CIV
#load-if-not-defined ETHIOPIAN-CIV
#load-if-not-defined FRANKISH-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined INDIAN-CIV
#load-if-not-defined JAPANESE-CIV
#load-if-not-defined MAGYAR-CIV
#load-if-not-defined MALIAN-CIV
#load-if-not-defined PERSIAN-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined TEUTONIC-CIV
#load-if-not-defined VIKING-CIV
#load-if-not-defined BYZANTINE-CIV
(defrule
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-resource-control != ri-imperial-skirmisher)
	(strategic-number sn-resource-control != ri-heresy)
	(gold-amount > 250)
	(food-amount < 200)
(or	(food-amount < 80)
	(gold-amount > 400)) ; PI start
	(can-train my-unique-unit-line) ; certain ranged UUs
=>
	(train my-unique-unit-line)
)
#end-if
(defrule
	(current-age >= castle-age)
(or	(and	(and	(or	(civ-selected briton)
				(civ-selected mayan))
			(goal unit-goal my-unique-unit-line))
		(goal strategy-goal rush))
	(building-type-count castle >= 2))
=>
	(set-goal ranged-unit-type-goal 0)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(current-age >= castle-age)
	(goal unit-goal knight)
	(goal strategy-goal rush)
	(building-type-count castle > 0)
(or	(or	(civ-selected mongol)
		(civ-selected chinese))
	(civ-selected briton))
=>
	(set-goal ranged-unit-type-goal uu)
	(set-goal uu-up-goal 1)
	(disable-self)
)
(defrule
	(game-time > 20)
	(game-time < 60)
	(goal strategy-goal boom)
	(goal unit-goal my-unique-unit-line)
	(up-compare-goal ranged-unit-type-goal != scorpion)
	(up-compare-goal ranged-unit-type-goal != monk)
	(up-compare-goal ranged-unit-type-goal != gunpowder-class)
=>
	(set-goal ranged-unit-type-goal uu)
)
#end-if
#end-if

#end-if

#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-not-defined INCAN-CIV
#load-if-not-defined AZTEC-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined ITALIAN-CIV
#load-if-not-defined JAPANESE-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MAGYAR-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined VIKING-CIV
(defrule
(nand	(up-research-status c: ri-crossbow >= research-pending)
	(game-time < 2400))
(or	(or	(building-type-count siege-workshop > 0)
		(strategic-number sn-minimum-water-body-size-for-dock == water-islands))
	(goal strategy-goal boom))
	(up-compare-goal unit-goal g:!= ranged-unit-type-goal)
	(up-compare-goal ranged-unit-type-goal != scorpion)
	(up-compare-goal ranged-unit-type-goal != monk)
	(up-compare-goal ranged-unit-type-goal != gunpowder-class)
=>
	(set-goal ranged-unit-type-goal 0)
)
#load-if-defined DEATH-MATCH
#load-if-not-defined TURKISH-CIV
(defrule
	(up-compare-goal ranged-unit-type-goal != 0)
=>
	(set-goal ranged-unit-type-goal 0)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(goal ranged-unit-type-goal cavalry-archer)
(or	(gold-amount > 125)
	(goal unit-goal cavalry-archer))
(or	(gold-amount > 100)
	(and	(goal control-goal aggressive-rush)
		(current-age == castle-age)))
(or	(dropsite-min-distance wood < 4)
	(wood-amount > 140))
	(can-train cavalry-archer-line)
=>
	(train cavalry-archer-line)
)
#load-if-not-defined HUN-CIV
(defrule
	(strategic-number sn-resource-control != battering-ram)
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-resource-control != ri-heresy)
	(up-research-status c: ri-crossbow >= research-pending)
	(goal ranged-unit-type-goal archer)
	(wood-amount > 90)
	(gold-amount > 250)
	(food-amount < 200)
(or	(food-amount < 80)
	(gold-amount > 400))
	(can-train archer-line)
=>
	(train archer-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control != ri-elite-skirmisher)
	(strategic-number sn-resource-control != ri-heresy)
	(nor (can-train chu-ko-nu-line)
	(can-train mangudai-line))
	(goal ranged-unit-type-goal cavalry-archer)
	(wood-amount > 90)
	(gold-amount > 250)
(or	(food-amount < 200)
	(game-time < 720))
(or	(food-amount < 80)
	(gold-amount > 400))
	(can-train cavalry-archer-line)
=>
	(train cavalry-archer-line)
)
(defrule
	(current-age >= castle-age)
	(strategic-number sn-resource-control < 1)
	(goal unit-goal militiaman-line)
	(goal strategy-goal rush)
(or	(food-amount >= 110)
	(strategic-number sn-military-level < 0))
	(not (research-available ri-long-swordsman))
	(unit-type-count militiaman-line < 15)
	(game-time < 1800); this strategy is currently only used that early against EW rush
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(goal unit-goal militiaman-line)
	(goal control-goal militiaman-line))
	(food-amount >= 110)
(or	(and	(and	(current-age == castle-age)
			(up-research-status c: ri-long-swordsman >= research-pending))
		(unit-type-count militiaman-line < 30))
	(and	(up-research-status c: ri-two-handed-swordsman >= research-pending)
		(gold-amount > 90)))
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-resource-control < 1)
	(can-train elephant-archer-line)
(or	(or	(unit-type-count villager > 75)
		(goal train-civ-goal -1))
	(food-amount >= unique-unit-food))
(or	(current-age == castle-age)
	(gold-amount > 100))
=>
	(train elephant-archer-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(can-train my-unique-unit-line)
(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
(or	(goal unit-goal my-unique-unit-line)
	(goal control-goal my-unique-unit-line)))
(or	(up-compare-goal custom-civ-pop > 75);	(unit-type-count villager > 75)
(or	(goal train-civ-goal -1)
	(food-amount >= unique-unit-food)))
(or	(current-age == castle-age)
	(gold-amount > 100))
=>
	(train my-unique-unit-line)
)
(defrule
	(goal unit-goal my-unique-unit-line)
	(can-train my-unique-unit-line)	
(or	(and	(unit-type-count-total my-unique-unit-line < 5)
		(civ-selected byzantine))
	(civ-selected gothic))
	(unit-type-count-total my-unique-unit-line < 12)
	(current-age == castle-age)
=>
	(train my-unique-unit-line)
)
#load-if-not-defined AZTEC-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BURMESE-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined ITALIAN-CIV
#load-if-not-defined KHMER-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined MALIAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined VIETNAMESE-CIV
(defrule
	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(up-research-status c: ri-forced-levy < research-complete)
	(building-type-count castle > 2)
=>
	(up-jump-rule 1)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-champion >= research-pending)
	(food-amount >= 110)
(or	(up-research-status c: ri-forced-levy >= research-complete)
	(gold-amount > 200))
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
#load-if-defined DARK-AGE-END
(defrule
	(strategic-number sn-resource-control < 1)
	(can-train militiaman-line)
=>
	(train militiaman-line))
#end-if
#load-if-defined FEUDAL-AGE-END
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(up-research-status c: ri-horse-collar >= research-pending)
(or	(unit-type-count-total militiaman-line < 6)
	(up-research-status c: ri-man-at-arms >= research-pending))
	(food-amount >= 110)
	(gold-amount >= 70)
	(can-train militiaman-line)
=>
	(train militiaman-line))
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(up-research-status c: ri-horse-collar >= research-pending)
(or	(strategic-number sn-infantry-threat >= 1)
	(gold-amount >= 400))
(or	(gold-amount >= 95)
	(up-research-status c: ri-fletching >= research-pending))
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(can-train archer-line)
=>
	(train archer-line))
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(up-research-status c: ri-horse-collar >= research-pending)
	(strategic-number sn-archer-threat >= 1)
	(strategic-number sn-cavalry-threat <= 1)
	(strategic-number sn-infantry-threat < 3)
	(food-amount >= 75)
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
(or	(unit-type-count-total skirmisher-line < 33)
	(population < max-civ-pop))
	(can-train skirmisher-line)
=>
	(train skirmisher-line))
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(up-research-status c: ri-horse-collar >= research-pending)
	(strategic-number sn-archer-threat <= 1)
	(strategic-number sn-cavalry-threat >= 1)
	(strategic-number sn-infantry-threat < 3)
	(food-amount >= 85)
(or	(dropsite-min-distance wood < 5)
	(wood-amount >= 110))
	(unit-type-count-total spearman-line < 11)
	(can-train spearman-line)
=>
	(train spearman-line))
(defrule
	(strategic-number sn-resource-control < 1)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(up-research-status c: ri-horse-collar >= research-pending)
	(food-amount >= 130)
(or	(and	(up-research-status c: ri-man-at-arms < research-pending)
		(or	(building-type-count barracks <= 0)
			(unit-type-count-total militiaman-line >= 6)))
	(players-unit-type-count focus-player skirmisher-line >= 18))
	(food-amount >= 130)
	(unit-type-count-total scout-cavalry-line < 22)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line))
#end-if
; Flush
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
(or	(food-amount >= 130)
	(current-age-time < 120))
	(current-age == feudal-age)
(or	(current-age-time < 480)
	(and	(food-amount < 500)
		(players-military-population every-enemy < 8)))
	(up-research-status c: ri-man-at-arms < research-pending)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
(defrule
	(goal strategy-goal flush)
	(strategic-number sn-gold-gatherer-percentage > 10)
	(strategic-number sn-current-age == feudal)
(or	(and	(food-amount < 600)
		(strategic-number sn-resource-control < 1))
	(and	(gold-amount >= 245)
		(strategic-number sn-resource-control <= 2)))
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(current-age-time < 180)
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(food-amount >= 75)
	(players-building-type-count focus-player stable == 0)
	(players-military-population focus-player > 4)
(or	(military-population < 3)
	(players-military-population focus-player > 8))
	(military-population < 6)
	(strategic-number sn-current-age == feudal)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-resource-control <= 2)
	(goal strategy-goal flush)
	(current-age == feudal-age)
(or	(food-amount < castle-f2)
(or	(strategic-number sn-gold-gatherer-percentage <= 10)
	(and	(strategic-number sn-current-age == fc-transit)
		(goal ranged-unit-type-goal archer))))
	(gold-amount >= 245)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(wood-amount > 70); dont run out of stock while spamming skirmishers
	(food-amount >= 75)
(or	(food-amount < 690)
	(and	(food-amount >= 825)
		(building-type-count-total blacksmith > 0)))
(nand	(up-research-status c: ri-man-at-arms >= research-pending)
	(goal enemy-goal eagle-warrior))
	(strategic-number sn-current-age == feudal)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(food-amount >= 75)
(nand	(up-research-status c: ri-man-at-arms >= research-pending)
	(goal enemy-goal eagle-warrior))
	(building-type-count-total blacksmith > 0); castle age advancement is already prepared
	(current-age == feudal-age); as no resource restriction on this rule
	(strategic-number sn-military-level < 0); use this only to catch up with enemy military
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(goal enemy-goal flush)
	(strategic-number sn-current-age == fc-transit)
	(strategic-number sn-military-level < 1)
	(wood-amount > 250)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(current-age == feudal-age)
	(strategic-number sn-resource-control < 1)
	(goal strategy-goal flush)
	(up-research-status c: ri-man-at-arms >= research-pending)
	(goal unit-goal militiaman-line)
(or	(goal enemy-goal eagle-warrior)
(or	(current-age-time < 480)
	(and	(strategic-number sn-current-age == fc-transit)
		(food-amount >= 260))))
	(food-amount >= 110)
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(current-age == dark-age)
	(goal unit-goal militiaman-line)
	(strategic-number sn-current-age == df-transit)
	(food-amount > 260)
(nand	(civ-selected gothic)
	(not (death-match-game)))
	(can-train militiaman-line)
=>
	(train militiaman-line)
)
(defrule
	(game-time < 900)
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(food-amount >= 85)
(or	(players-civ focus-player hun)
(or	(players-civ focus-player magyar)
	(players-civ focus-player mongol)))
	(players-building-type-count focus-player archery-range < 2)
	(unit-type-count spearman-line < 2)
	(not (goal unit-goal militiaman-line))
	(can-train spearman-line); make spearman fast so the flush won't die vs quick scouts.
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(food-amount >= 85)
	(unit-type-count spearman-line < 5)
(or	(and	(and	(building-type-count-total archery-range > 0); archery-range not yet finished
			(building-type-count archery-range == 0))
		(players-military-population focus-player > 2)); enemy is very fast
	(goal enemy-goal rush))
	(goal meso-enemy-goal -1)
	(can-train spearman-line); make spearman to keep up with military production
=>
	(train spearman-line)
)
#load-if-not-defined WONDER-RACE ;Wonderrace ends too fast to make gold from relics
(defrule
	(strategic-number sn-resource-control < 1)
	(goal ranged-unit-type-goal monk)
	(or
		(goal enemy-goal flush)
		(and
			(up-compare-goal position-goal == flank)
			(strategic-number sn-archer-threat > 1)
		)
	)
	(research-available ri-sanctity)
	(building-type-count monastery > 0)
=>
	(set-strategic-number sn-resource-control 2)
)
#load-if-defined AZTEC-CIV
(defrule
	(goal strategy-goal boom)
	(goal unit-goal archer)
=>
	(up-jump-rule 3)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal train-civ-goal 1)
	(or
		(and
			(up-compare-goal ranged-unit-type-goal != monk)
			(up-research-status c: ri-sanctity >= research-pending)
		)
		(unit-type-count-total monastery-class < 6)
	)
	(food-amount < 150)
	(gold-amount > 200)
	(goal anti-monk-threat-goal 0)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(nand
		(goal unit-goal eagle-warrior)
		(strategic-number sn-cavalry-threat == 0)
	)
	(or
		(unit-type-count-total monastery-class < 8)
		(and
			(food-amount < 600)
			(gold-amount > 750)
		)
	)
	(goal anti-monk-threat-goal 0)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= ci-transit)
	(gold-amount > 175)
	(or
		(players-unit-type-count every-enemy monk < 5)
		(up-research-status c: ri-atonement >= research-pending)
	)
	(or
		(and
			(players-unit-type-count every-enemy mangonel-line == 0)
			(players-unit-type-count every-enemy scorpion-line < 5)
		)
		(up-research-status c: ri-redemption >= research-pending)
	)
	(goal anti-monk-threat-goal 0)
	(can-train monk)
=>
	(train monk)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(goal ranged-unit-type-goal monk)
	(unit-type-count-total monastery-class < 6)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal train-civ-goal 1)
	(or
		(up-research-status c: ri-sanctity >= research-pending)
		(unit-type-count-total monastery-class < 6)
	)
	(up-research-status c: ri-pikeman >= research-pending)
	(goal anti-monk-threat-goal 0)
	(strategic-number sn-cavalry-threat >= 1)
	(or
		(goal unit-goal mix)
		(goal unit-goal skirmisher)
	)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal train-civ-goal 1)
	(or
		(up-research-status c: ri-sanctity >= research-pending)
		(unit-type-count-total monastery-class < 6)
	)
	(food-amount < 100)
	(gold-amount > 300)
	(current-age == castle-age)
	(goal anti-monk-threat-goal 0)
	(strategic-number sn-cavalry-threat > 1)
	(can-train monk)
=>
	(train monk)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(goal train-civ-goal 1)
	(or
		(up-research-status c: ri-sanctity >= research-pending)
		(unit-type-count-total monastery-class < 6)
	)
	(gold-amount > 200)
	(current-age == castle-age)
	(goal anti-monk-threat-goal 0)
	(strategic-number sn-cavalry-threat > 1)
	(goal unit-goal cavalry-archer)
	(goal control-goal aggressive-rush)
	(can-train monk)
=>
	(train monk)
)
(defrule
(or	(player-resigned every-ally)
	(not	(player-in-game any-ally)))
	(population >= del-civ-pop)
(or	(and	(players-building-type-count every-ally market <= 0)
		(players-building-type-count every-ally dock <= 0))
;(or	(up-compare-goal trade-units > 80)
(or	(up-compare-goal trade-units > max-trade-pop); depending on popcap and difficulty
	(up-compare-goal trade-units > max-trade-cart)));); depending on map size
(or	(unit-type-count trade-cart > 0)
	(unit-type-count trade-cog > 0))
=>
	(delete-unit trade-cart)
	(delete-unit trade-cog)
)
(defrule
	(game-time >= 4500)
(or	(up-compare-goal navy-count g:> max-navy)
	(taunt-detected any-human 35))
	(soldier-count < 50); 40; 20
	(building-type-count any-enemy >= 1)
	(population >= del-civ-pop)
(or	(wood-amount >= 400); 1800
(or	(food-amount >= 400); 1800
	(gold-amount >= 400))); 1800
=>
	(delete-unit fire-ship-line)
	(delete-unit galley-line)
	(delete-unit demolition-ship-line)
	(delete-unit caravel-line)
	(delete-unit turtle-ship-line)
	(delete-unit longboat-line))
#end-if ;not WONDER-RACE
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(strategic-number sn-resource-control < 1)
	(food-amount > 200)
(or	(gold-amount < 100)
	(and	(strategic-number sn-current-age >= ci-transit)
		(population < max-civ-pop)))
	(up-research-status c: ri-light-cavalry >= research-pending)
(nor	(and	(up-research-status c: ri-bloodlines < research-pending)
		(goal anti-cavalry-threat-goal 1))
	(can-train magyar-huszar))
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(up-research-status c: ri-light-cavalry >= research-pending)
	(research-available imperial-age)
	(not (can-train magyar-huszar))
	(population < del-civ-pop)
	(food-amount >= 1080)
	(gold-amount < 700)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#else
(defrule
	(strategic-number sn-resource-control < 1)
	(population < seventy-five-percent-pop)
	(gold-amount > 1000)
	(up-research-status c: ri-cavalier >= research-pending)
	(can-train knight-line)
=>
	(train knight-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(food-amount > 400)
	(gold-amount < 100)
	(not (can-train magyar-huszar))
	(population < del-civ-pop)
	(up-research-status c: ri-light-cavalry >= research-pending)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#end-if
#load-if-not-defined TURKISH-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(unit-type-count skirmisher-line < 20)
	(strategic-number sn-archer-threat >= 1)
(or 	(up-research-status c: ri-elite-skirmisher >= research-pending)
	(unit-type-count skirmisher-line < 7))
(nand	(gold-amount > 400)
	(up-compare-goal trade-units > 20))
	(wood-amount >= 135)
	(food-amount >= 75)
(nand	(up-research-status c: ri-elite-genitour >= research-pending)
	(up-research-status c: ri-bloodlines >= research-pending))
	(current-age >= castle-age)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal rush)
(or	(and	(gold-amount >= 145)
		(wood-amount >= 100))
	(players-unit-type-count focus-player militiaman-line > 0))
	(goal ranged-unit-type-goal archer)
(or	(goal unit-goal mix)
	(goal unit-goal skirmisher))
	(military-population < 8)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(gold-amount < 750)
	(up-research-status c: ri-elite-skirmisher >= research-pending)
(or	(and	(research-available my-unique-research)
		(civ-selected aztec))
	(research-available ri-hussar))
;(nand	(up-research-status c: ri-elite-genitour >= research-pending)
;	(up-research-status c: ri-bloodlines >= research-pending))
	(wood-amount > 250)
	(food-amount > 500)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(unit-type-count spearman-line > 14)
	(research-available ri-halberdier)
(nor 	(research-available ri-blast-furnace)
	(research-available ri-bracer))
(nor	(research-available ri-plate-mail)
	(research-available ri-plate-barding))
	(up-research-status c: ri-chemistry >= research-pending)
;(nand	(up-research-status c: ri-elite-genitour >= research-pending)
;	(up-research-status c: ri-bloodlines >= research-pending))
	(wood-amount > 250)
	(food-amount > 350)
	(gold-amount < 600)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= fc-transit)
	(game-time < 1320)
	(unit-type-count spearman-line < 4)
	(goal strategy-goal rush)
	(goal unit-goal skirmisher)
	(goal enemy-goal rush)	
	(goal meso-enemy-goal -1)
	(can-train spearman-line); make spearman so enemy won't raid us with knights
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(game-time < 1800)
	(strategic-number sn-current-age >= ci-transit))
	(strategic-number sn-resource-control < 1)
	(building-type-count-total town-center >= tc-level-two)
	(goal unit-goal skirmisher)
	(wood-amount > 115)
	(food-amount > 85)
	(goal strategy-goal rush)
	(unit-type-count spearman-line < 10)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#load-if-not-defined AZTEC-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= fc-transit)
(or	(military-population < 4)		
	(building-type-count-total monastery > 0))
	(goal strategy-goal rush)
(or	(goal unit-goal mix)
	(goal unit-goal skirmisher))
	(food-amount > 90)
	(wood-amount > 95)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal rush)
	(goal unit-goal skirmisher)
(or	(goal enemy-goal skirmisher)
	(and	(players-military-population focus-player > 4)
		(players-current-age focus-player == feudal-age)))
(or	(food-amount >= 75)
	(strategic-number sn-military-level < 0))
(or	(military-population < 8)
	(strategic-number sn-military-level < 0))
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age == fc-transit)
	(military-population < 8)
	(goal strategy-goal rush)
	(goal unit-goal skirmisher)
	(goal enemy-goal flush)
	(up-research-status c: ri-double-bit-axe >= research-pending)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
(or	(strategic-number sn-current-age == fc-transit)
	(and	(gold-amount > 145)
		(building-type-count-total monastery > 0)))
	(wood-amount > 85)
	(goal strategy-goal rush)
	(goal ranged-unit-type-goal archer)
	(goal unit-goal skirmisher)
	(can-train archer-line)
=>
	(train archer-line)
)
(defrule
	(current-age == castle-age)
	(current-age-time < 400)
	(strategic-number sn-resource-control < 1)
	(food-amount >= 85)
	(goal strategy-goal rush)
	(goal unit-goal archer)
(nor 	(research-available ri-crossbow)
	(goal enemy-goal flush))
(or	(or	(players-civ focus-player frankish)
		(players-civ focus-player persian))
	(players-civ any-enemy hun))
	(unit-type-count spearman-line < 8)
	(can-train spearman-line)
=>
	(train spearman-line)
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
	(current-age == castle-age)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-resource-control != battering-ram)
	(strategic-number sn-archer-threat > 1)
	(unit-type-count scorpion-line < 8)
(or	(goal unit-goal eagle-warrior)
	(goal unit-goal monk))
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
#end-if
#load-if-not-defined CHINESE-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined AZTEC-CIV
(defrule
	(goal unit-goal gunpowder-class)
	(goal strategy-goal fast-imp)
=>
	(up-jump-rule 7)
)
(defrule
	(current-age >= imperial-age)
(or	(and	(up-research-status c: ri-heavy-scorpion < research-available)
		(or	(up-research-status c: ri-onager >= research-available)
			(unit-available bombard-cannon)))
(or	(or	(civ-selected hun)
		(civ-selected korean))
(or	(or	(civ-selected saracen)
		(civ-selected spanish))
(or	(or	(civ-selected indian)
		(civ-selected italian))		
	(civ-selected vietnamese)))))
=>
	(up-jump-rule 6)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal save-wood-goal 0)
	(goal position-goal flank)
	(strategic-number sn-archer-threat >= 1)
	(unit-type-count scorpion-line < 5)
(or	(and	(food-amount < 50)
		(strategic-number sn-military-level < 0))
	(and	(up-research-status c: ri-elite-skirmisher < research-complete)
		(up-compare-goal unit-goal != eagle-warrior)))
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(players-unit-type-count focus-player spearman-line > 20)
	(unit-type-count scorpion-line < 15)
	(unit-type-count cavalry-unit-class > 20)
	(up-research-status c: ri-heavy-scorpion >= research-pending)
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-archer-threat >= 1)
	(unit-type-count scorpion-line < 12)
(or	(and	(gold-amount > 150)
		(food-amount < 75))
	(civ-selected turkish))
	(can-train scorpion-line)
=>
	(train scorpion-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
(nor	(goal strategy-goal fast-imp)
	(goal unit-goal default-ranged))
(nor	(civ-selected celtic)
	(civ-selected slavic))
	(strategic-number sn-resource-control < 1)
	(can-train scorpion-line)
	(unit-type-count scorpion-line < 12)
	(wood-amount > 400); excess wood and gold
	(gold-amount > 300)
	(food-amount < 200)
=>
	(train scorpion-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(up-research-status c: ri-elite-skirmisher < research-pending)
	(goal unit-goal monk)
(nor	(civ-selected celtic)
	(civ-selected slavic))
	(strategic-number sn-resource-control < 1)
	(can-train scorpion-line)
	(strategic-number sn-archer-threat >= 1)
	(unit-type-count scorpion-line < 6)
	(wood-amount > 200)
=>
	(train scorpion-line)
)
(defrule
(or	(or	(civ-selected celtic)
		(civ-selected slavic))
	(or	(goal ranged-unit-type-goal scorpion)
		(goal unit-goal scorpion)))
(or	(strategic-number sn-resource-control < 1)
	(and	(strategic-number sn-resource-control == 2)
		(food-amount < 100)))
	(population < del-civ-pop)
	(can-train scorpion-line)
	(gold-amount > scorpion-gold-min)
=>
	(train scorpion-line); end jump
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-defined BYZANTINE-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-resource-control < 1)
	(can-train archer-line)
	(up-research-status c: ri-arbalest >= research-pending)
	(wood-amount > 400); excess wood and gold
	(gold-amount > 300)
	(food-amount < 200)
=>
	(train archer-line)
)
#end-if
(defrule
	(strategic-number sn-resource-control == 2)
(or	(and	(wood-amount < 300)
		(not (research-available ri-champion)))
	(goal monk-threat-goal 1))
	(food-amount >= 580); hussar + lc food cost
	(gold-amount < 600); hussar gold cost
	(not (can-train magyar-huszar))
	(population < max-civ-pop)
;	(up-research-status c: ri-light-cavalry >= research-pending)
	(up-research-status c: ri-hussar >= research-available)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
)
#load-if-not-defined AZTEC-CIV
#load-if-not-defined BERBERS-CIV
#load-if-not-defined BRITON-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined ITALIAN-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MONGOL-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined SPANISH-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= ci-transit)
	(population < max-civ-pop); test
(or	(gold-amount <= 90)
	(goal escrow-purpose-goal ri-halberdier))
	(food-amount > 200)
	(wood-amount > 200)
(or	(unit-type-count spearman-line < 10)
	(up-research-status c: ri-pikeman >= research-pending))
(nor	(up-research-status c: ri-elite-teutonic-knight >= research-pending)
	(up-research-status c: ri-elite-throwing-axeman >= research-pending))
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control == 2)
	(wood-amount > 300)
	(food-amount > 300)
(or	(dropsite-min-distance gold > 5)
	(gold-amount < 100))
(nor	(up-research-status c: ri-elite-teutonic-knight >= research-pending)
	(up-research-status c: ri-elite-throwing-axeman >= research-pending))
	(can-research-with-escrow ri-pikeman)
	(strategic-number sn-military-level < 1)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-pikeman)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control < 1)
	(wood-amount > 275)
	(food-amount > 175)
	(population < max-civ-pop)
(or	(dropsite-min-distance gold > 5)
	(gold-amount < 100))
(nand	(gold-amount > 400)
	(up-compare-goal trade-units > 20))
(nand	(up-research-status c: ri-elite-genitour >= research-pending)
	(up-research-status c: ri-bloodlines >= research-pending))
	(up-research-status c: ri-elite-skirmisher >= research-pending)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control == 2)
	(wood-amount > 200); 400
	(food-amount > 200); 400
(or	(dropsite-min-distance gold > 5)
	(gold-amount < 100))
	(up-research-status c: ri-elite-teutonic-knight < research-pending)
	(strategic-number sn-cavalry-threat >= 2)
	(up-research-status c: ri-pikeman >= research-pending)
	(unit-type-count-total spearman-line < 30)
	(population < max-civ-pop)
	(strategic-number sn-military-level < 1)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control == 2)
	(wood-amount > 200)
	(food-amount > 200)
	(up-research-status c: ri-elite-skirmisher >= research-pending)
(or	(up-research-status c: ri-imperial-skirmisher >= research-pending)
	(and	(wood-amount > 300); 400
		(food-amount > 300))); 400
	(population < max-civ-pop)
(or	(dropsite-min-distance gold > 5)
	(gold-amount < 100))
(nand	(up-research-status c: ri-elite-genitour >= research-pending)
	(up-research-status c: ri-bloodlines >= research-pending))
(or	(strategic-number sn-archer-threat >= 1)
	(strategic-number sn-cavalry-threat <= 1))
	(strategic-number sn-military-level < 1)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(wood-amount > 200); 400
	(food-amount > 200); 400
	(up-research-status c: ri-halberdier >= research-pending)
	(strategic-number sn-cavalry-threat >= 2)
	(population < del-civ-pop)
(or	(goal uu-up-goal 1)
	(goal unit-goal militiaman-line))
	(research-available my-unique-unit-upgrade)
	(strategic-number sn-military-level < 0)
	(unit-type-count-total spearman-line < 30)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
(nor	(civ-selected celtic)
(or	(civ-selected khmer)
	(civ-selected korean)))
=>
	(up-jump-rule 1))
(defrule
	(population < del-civ-pop)
	(food-amount >= 85)
	(unit-type-count-total my-unique-unit-line < 7)
	(unit-type-count-total knight-line < 7)
(or	(unit-type-count-total scorpion-line >= 10); 11
	(unit-type-count-total mangonel-line >= 8)); 9
(or	(up-research-status c: ri-heavy-scorpion >= research-pending)
	(up-research-status c: ri-siege-onager >= research-pending))
	(unit-type-count-total spearman-line < 16); 18
	(can-train spearman-line)
=>
	(train spearman-line)
) ; end jump
(defrule
(not	(players-building-count every-enemy >= 1)); scout everyone
	(military-population < 1)
	(unit-type-count-total spearman-line < 1)
	(can-train spearman-line)
=>
	(train spearman-line)
)
(defrule
;	(goal nomad yes)
;	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(wood-amount >= 400)
(or	(food-amount >= 1200)
	(and	(food-amount >= 560)
		(up-research-status c: castle-age <= research-unavailable))))
	(strategic-number sn-current-age <= dark)
(not	(players-building-count every-enemy >= 1)); want to scout everyone
	(military-population < 1)
	(unit-type-count-total militiaman-line < 1)
	(can-train militiaman-line)
=>
	(train militiaman-line)
	(disable-self))
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-resource-control <= 2)
	(wood-amount > 400)
	(food-amount > 400)
(or	(and	(goal uu-up-goal 1)
		(research-available my-unique-unit-upgrade))
	(and	(unit-type-count knight-line > 19)
		(research-available ri-paladin)))
;(nand	(up-research-status c: ri-elite-genitour >= research-pending)
;	(up-research-status c: ri-bloodlines >= research-pending))
	(population < del-civ-pop)
	(strategic-number sn-military-level < 0)
	(up-research-status c: ri-elite-skirmisher >= research-pending)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
)
#load-if-defined DEATH-MATCH
#load-if-defined DARK-AGE-START
(defrule
	(current-age <= castle-age)
(or	(and	(strategic-number sn-military-level < 0)
		(current-age == feudal-age))
	(goal ranged-unit-type-goal archer))
	(can-train archer-line)
=>
	(train archer-line))
(defrule
	(unit-type-count militiaman-line > 9)
=>
	(research ri-man-at-arms)
	(research ri-two-handed-swordsman)
	(research ri-long-swordsman))
(defrule
	(strategic-number sn-current-age <= castle); train militias to keep up with dark age militias
(or	(strategic-number sn-military-level < 0)
	(current-age <= feudal-age))
	(food-amount >= 110)
	(can-train militiaman-line)
=>
	(train militiaman-line))
#end-if
#end-if

; ********** OTHER RESEARCHES **********

#load-if-defined DIFFICULTY-EASIEST
(defrule
;	(current-age >= imperial-age)
	(strategic-number sn-resource-control == 2)
;	(population >= fourty-percent-pop)
	(population < fourty-percent-pop)
=>
	(set-strategic-number sn-resource-control 0))
#end-if
#load-if-defined MONGOL-CIV
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count-total battering-ram-line >= 4)
(or	(unit-type-count-total mangonel-line >= 8)
(or	(unit-type-count-total scorpion-line >= 8)
	(unit-type-count-total bombard-cannon >= 8))))
	(up-research-status c: ri-siege-ram >= research-pending)
	(can-research my-unique-research)
=>
	(research my-unique-research))
#end-if

(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= ci-transit)
	(difficulty != easiest)
	(difficulty != easy)
	(difficulty != moderate)
(or	(population > del-civ-pop)
	(goal unit-goal wonder))
	(can-research ri-stonecutting)
=>
	(research ri-stonecutting))

#load-if-not-defined WONDER-RACE
#load-if-not-defined DIFFICULTY-EASIEST
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(strategic-number sn-current-age >= ci-transit)
(or	(unit-type-count-total scorpion-line >= 4)
(or	(unit-type-count-total skirmisher-line >= 14)
(or	(unit-type-count-total ranged-unit-class >= 9)
(or	(unit-type-count-total cavalry-archer-class >= 9)
(or	(unit-type-count-total galley-line >= 6)
(or	(up-research-status c: ri-arquebus >= research-pending)
	(building-type-count watch-tower >= 4))))))))
	(can-research ri-ballistics)
=>
	(research ri-ballistics))
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(strategic-number sn-resource-control <= 2)
	(cc-players-unit-type-count 0 stone-mine > 5); stone left on map
(or	(unit-type-count 124 > 0)
	(unit-type-count 220 > 0))
(or	(strategic-number sn-resource-control < 1)
	(strategic-number sn-stone-gatherer-percentage > 15))
	(strategic-number sn-current-age >= ci-transit)
	(strategic-number sn-stone-gatherer-percentage > 4)
	(can-research ri-stone-shaft-mining)
=> 
	(research ri-stone-shaft-mining))
(defrule
; nn	(strategic-number sn-resource-control <= 2)
(or	(building-type-count-total wonder >= 1)
	(and	(current-age >= imperial-age)
		(and	(population > del-civ-pop)
			(strategic-number sn-resource-control < 1))))
	(can-research ri-treadmill-crane)
=>
	(research ri-treadmill-crane))
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= ci-transit)
(or	(building-type-count castle >= 3)
(or	(building-type-count watch-tower >= 4)
(or	(building-type-count guard-tower >= 4)
(or	(building-type-count keep >= 4)
	(building-type-count watch-tower-line >= 4))))); counting watch-towers has always been weird so we'll make extra-sure it works 11
	(goal enemy-boats-goal 1)
(or	(up-compare-goal navy-count < 5)
	(strategic-number sn-current-age >= imperial))
	(can-research ri-heated-shot)
=>
	(research ri-heated-shot))
(defrule
	(strategic-number sn-resource-control < 1)
;	(current-age >= imperial-age)
(or	(building-type-count watch-tower >= 3)
(or	(building-type-count guard-tower >= 3)
(or	(building-type-count keep >= 3)
	(building-type-count watch-tower-line >= 3))))
	(can-research ri-arrowslits)
=>
	(research ri-arrowslits))
(defrule
	(strategic-number sn-resource-control < 1)
        (building-type-count watch-tower >= 3)
	(can-research ri-guard-tower)
=>
	(research ri-guard-tower))
(defrule
	(strategic-number sn-resource-control < 1)
        (building-type-count watch-tower >= 3)
	(can-research ri-keep)
=>
	(research ri-keep))
(defrule
	(strategic-number sn-resource-control < 1)
	(current-age >= imperial-age)
(or	(gold-amount < 100)
	(population > del-civ-pop))
	(food-amount > 400)
	(wood-amount > 400)
	(can-research ri-masonry)
=>
	(research ri-masonry))
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(strategic-number sn-resource-control < 1)
(or	(strategic-number sn-current-age >= ci-transit);	(current-age >= imperial-age)
	(goal team-coordination-goal 1))
	(unit-type-count infantry-class > 12)
(or	(unit-type-count infantry-class > 24)
	(population > del-civ-pop))
(or	(strategic-number sn-military-level >= 1)
	(gold-amount > 150))
	(can-research ri-arson)
=>
	(research ri-arson))
(defrule
	(strategic-number sn-resource-control < 1)
(or	(gold-amount < 100)
	(population > del-civ-pop))
	(food-amount > 400)
	(wood-amount > 400)
	(can-research ri-architecture)
=>
	(research ri-architecture))
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
(or	(gold-amount < 100)
	(population > del-civ-pop))
	(food-amount > 400)
	(wood-amount > 400)
	(building-type-count castle >= 2)
	(can-research ri-hoardings)
=>
	(research ri-hoardings))
(defrule
	(strategic-number sn-resource-control < 1)
	(population > del-civ-pop)
	(building-type-count castle > 0)
	(can-research ri-bombard-tower)
=>
	(research ri-bombard-tower))
#end-if
(defrule
	(strategic-number sn-resource-control < 1)
(or	(and	(or	(strategic-number sn-current-age >= ci-transit)
			(population > max-civ))
		(or	(unit-type-count-total battering-ram-line >= high-min-number-upgrade)
			(or	(unit-type-count-total scorpion-line >= high-min-number-upgrade)
				(or	(unit-type-count-total mangonel-line >= high-min-number-upgrade)
					(or	(unit-type-count-total bombard-cannon >= high-min-number-upgrade)
						(or	(unit-type-count-total trebuchet-set >= high-min-number-upgrade)
							(or	(unit-type-count-total ballista-elephant-line >= high-min-number-upgrade)
								(unit-type-count-total organ-gun-line >= high-min-number-upgrade))))))))
	(population > del-civ-pop))
	(can-research ri-siege-engineers)
=>
	(research ri-siege-engineers))
(defrule
	(strategic-number sn-resource-control < 1)
	(strategic-number sn-current-age >= ci-transit)
	(food-amount > 600)
	(current-age-time > 240); 300
	(population > del-civ-pop)
	(can-research ri-town-watch)
=>
	(research ri-town-watch)
)
(defrule
	(strategic-number sn-resource-control < 1)
(or	(town-under-attack)
	(population > del-civ-pop))
	(building-type-count castle > 0)
	(can-research ri-murder-holes)
=>
	(research ri-murder-holes)
)
(defrule
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(unit-type-count transport-ship > 0)
	(strategic-number sn-resource-control <= 1)
=>
	(research ri-padded-archer-armor)
	(research ri-leather-archer-armor)
	(research ri-ring-archer-armor)
	(research ri-chain-mail)
	(research ri-plate-mail)
	(research ri-scale-barding)
	(research ri-chain-barding)
	(research ri-plate-barding)
	(research ri-forging)
	(research ri-iron-casting)
	(research ri-blast-furnace)
)
#end-if ; was non-easiest
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(wood-amount > 600)
	(food-amount > 600))
(or	(current-age-time > 30)
	(gold-amount < 400))
	(can-research-with-escrow ri-guilds)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-guilds)
)
(defrule
	(strategic-number sn-resource-control < 1)
	(population > del-civ-pop)
	(strategic-number sn-current-age >= ci-transit)
	(unit-type-count infantry-class > 11)
	(can-research ri-tracking)
=>
	(research ri-tracking)
)
(defrule
	(strategic-number sn-resource-control == ri-heresy)
	(can-research-with-escrow ri-heresy)
=>
	(release-escrow gold)
	(research ri-heresy)
)
(defrule
	(strategic-number sn-resource-control < 2)
(or	(players-unit-type-count focus-player monk > 19)
	(players-unit-type-count focus-player missionary > 19))
	(can-research-with-escrow ri-faith)
=>
	(release-escrow food)(release-escrow gold)
	(research ri-faith)
)
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined DEFEND-WONDER
(defrule
	(game-time > 300)
	(game-time < 900); build them defensively early in DM
	(building-type-count-total bombard-tower < 6)
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(can-build bombard-tower)
=>
	(build bombard-tower)
)
(defrule
	(game-time > 300)
	(game-time < 900); build them defensively early in DM
	(building-type-count-total bombard-tower < 1)
	(building-type-count-total watch-tower < 6)
	(building-type-count-total castle >= 3)
(or	(civ-selected briton)
(or	(civ-selected korean)
	(civ-selected japanese)))
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(can-build watch-tower)
=>
	(build watch-tower))
#else; def wonder
(defrule
	(game-time > 300)
	(building-type-count-total wonder > 0)
	(building-type-count-total bombard-tower < 12)
	(building-type-count castle >= 2)
(or	(building-type-count-total castle >= 3)
	(stone-amount >= 775))
	(can-build bombard-tower)
=>
	(build bombard-tower)
)
(defrule
	(game-time > 300)
	(building-type-count-total wonder > 0)
	(building-type-count-total watch-tower < 12)
	(building-type-count castle >= 2)
	(up-research-status c: ri-bombard-tower <= research-unavailable)
	(up-research-status c: ri-keep >= research-available); guard tower
	(up-research-status c: ri-arrowslits >= research-available)
(or	(building-type-count-total castle >= 3)
	(stone-amount >= 775))
	(can-build watch-tower)
=>
	(build watch-tower))
#end-if
#load-if-defined CAPTURE-THE-RELIC
(defrule
	(current-age <= feudal-age)
	(players-current-age focus-player >= castle-age)
	(unit-type-count-total 213 < 2)	; Dead female builder
	(unit-type-count-total 225 < 2)	; Dead male builder
(or	(unit-type-count-total 134 == 0); dead monk
	(strategic-number sn-military-level > 0))
	(can-build watch-tower)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(build-forward watch-tower)
	(disable-self))
(defrule
	(building-type-count monastery >= 1); (unit-type-count monk >= 1)
	(unit-type-count-total 213 < 3)	; Dead female builder
	(unit-type-count-total 225 < 3)	; Dead male builder
(or	(unit-type-count-total 134 == 0); dead monk
	(strategic-number sn-military-level > 0))
	(can-research ri-bombard-tower)
=>
	(research ri-bombard-tower))
(defrule
(or	(building-type-count-total bombard-tower < 3)
	(and	(building-type-count-total castle >= 3)
		(building-type-count-total bombard-tower < 15)))
(or	(building-type-count-total castle >= 3)
	(stone-amount >= 700))
	(unit-type-count monk >= 1)
	(unit-type-count-total 213 < 3)	; Dead female builder
	(unit-type-count-total 225 < 3)	; Dead male builder
(or	(unit-type-count-total 134 == 0); dead monk
	(strategic-number sn-military-level > 0))
	(can-build bombard-tower)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(build-forward bombard-tower))
#end-if
#load-if-defined KING-OF-THE-HILL
(defrule
	(building-type-count castle > 0)
	(strategic-number sn-military-level > 0)
	(can-research ri-bombard-tower)
=>
	(research ri-bombard-tower))
(defrule
(or	(building-type-count-total bombard-tower < 3)
	(and	(building-type-count-total castle >= 3)
		(building-type-count-total bombard-tower < 15)))
(or	(building-type-count-total castle >= 3)
	(stone-amount >= 700))
	(unit-type-count-total 213 < 3)	; Dead female builder
	(unit-type-count-total 225 < 3)	; Dead male builder
(or	(strategic-number sn-maximum-town-size >= 40)
	(strategic-number sn-number-attack-groups > 1))
	(strategic-number sn-military-level > 0)
	(can-build bombard-tower)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(build-forward bombard-tower))
#end-if
(defrule
	(population > max-civ-pop)
	(up-compare-goal team-coordination-goal == 1)
	(strategic-number sn-military-level >= 2)
	(building-type-count castle >= 2)
	(building-type-count-total castle >= 3)
	(building-type-count-total wonder <= 0)
	(building-type-count-total bombard-tower < 10)
(or	(building-type-count-total bombard-tower < 5)
	(building-type-count-total castle >= 4))
	(can-build bombard-tower)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(up-assign-builders c: bombard-tower c: 2)
	(build-forward bombard-tower))
(defrule
	(population > max-civ-pop)
	(up-compare-goal team-coordination-goal == 1)
	(strategic-number sn-military-level >= 2)
	(building-type-count castle >= 2)
	(building-type-count-total castle >= 3)
	(building-type-count-total wonder <= 0)
(or	(up-research-status c: ri-bombard-tower <= research-available); hmmm
	(building-type-count-total bombard-tower <= 0))
(or	(up-research-status c: ri-bombard-tower <= research-unavailable); hmmm
	(up-research-status c: ri-keep >= research-pending))
	(up-research-status c: ri-guard-tower >= research-available); keep
	(up-research-status c: ri-arrowslits >= research-available)
(or	(civ-selected briton)
(or	(civ-selected korean)
	(civ-selected japanese)))
	(building-type-count-total watch-tower < 10)
(or	(building-type-count-total watch-tower < 5)
	(building-type-count-total castle >= 4))
	(can-build watch-tower)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(up-assign-builders c: watch-tower c: 2)
	(build-forward watch-tower))

(defrule
	(players-building-count target-player >= 1)
;;;;	(up-compare-goal temporary-goal7 == 4385)
;	(players-military-population target-player >= 2)
;	(up-compare-goal strategy-type != aggressive)
	(game-time >= 1206666)
	(building-type-count-total watch-tower < 1)
	(can-build watch-tower)
=>
	(set-strategic-number sn-ignore-tower-elevation 1)
	(set-strategic-number sn-placement-zone-size 2)
	(up-set-placement-data my-player-number -1 c: 15); 14
	(up-build place-control 0 c: watch-tower)
	(disable-self))
#end-if
#end-if
#end-if
#load-if-defined TEUTONIC-CIV
(defrule
	(up-research-status c: ri-hoardings >= research-pending)
	(building-type-count castle > 1)
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if
#load-if-defined TURKISH-CIV
(defrule
(or	(building-type-count-total bombard-tower >= 2)
(or	(unit-type-count-total bombard-cannon >= 3)
	(unit-type-count-total cannon-galleon-line >= 3)))
	(can-research my-unique-research)
=>
	(research my-unique-research)
)
#end-if



; ********** FARMS/FISHING SHIPs ********** ; Put them at the end for low priority

#load-if-not-defined POPULATION-CAP-25
(defrule
	(strategic-number sn-current-age == df-transit)
(or	(cc-players-unit-type-count 0 shore-fish >= shorefishreq2); a bit
	(cc-players-unit-type-count 0 sea-fish >= deepfishreq2)); a bit
(or	;(and	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
		(wood-amount >= 400);)
(or	(building-type-count-total barracks >= 1)
	(and	(goal strategy-goal flush)
		(or	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
			(or	(goal position-goal pocket)
				(wood-amount >= 350))))))
	(wood-amount >= 250)
	(unit-type-count-total villager >= 7); easiest
	(up-compare-goal custom-civ-pop < max-civ)
	(population < max-civ-pop)
	(unit-type-count-total fishing-ship < 12); 16
	(can-train fishing-ship)
=>
	(train fishing-ship); make more fishing ships during feudal transit on islands
)
(defrule
	(strategic-number sn-current-age <= dark)
(or	(cc-players-unit-type-count 0 shore-fish >= shorefishreq2); a bit
	(cc-players-unit-type-count 0 sea-fish >= deepfishreq2)); a bit
(or	(building-type-count-total lumber-camp > 0)
	(and	(civ-selected persian)
		(unit-type-count-total fishing-ship < 3)))
(or	(dropsite-min-distance wood < 4)
	(wood-amount >= 110))
	(unit-type-count-total villager >= 7); easiest
	(up-compare-goal custom-civ-pop < max-civ)
	(population < max-civ-pop)
	(unit-type-count-total fishing-ship < 12); 16
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(unit-type-count-total fishing-ship < 8)
	(current-age == feudal-age))
(or	(cc-players-unit-type-count 0 shore-fish >= shorefishreq2); a bit
	(cc-players-unit-type-count 0 sea-fish >= deepfishreq2)); a bit
	(wood-amount >= 225)
	(game-time < 2100)
	(dropsite-min-distance wood < 5)
	(unit-type-count revealer == 0); no enemy attacking us
	(building-type-count-total market > 0)
	(unit-type-count-total villager >= 7); easiest
	(up-compare-goal custom-civ-pop < max-civ)
	(population < max-civ-pop)
	(unit-type-count-total fishing-ship < 12); 16
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
(defrule
	(strategic-number sn-resource-control <= 2)
(or	(wood-amount > 200)
	(food-amount < 150))
	(population < max-civ-pop)
(or	(cc-players-unit-type-count 0 shore-fish >= shorefishreq2); a bit
	(cc-players-unit-type-count 0 sea-fish >= deepfishreq2)); a bit
(or	(up-compare-goal navy-count >= 20)
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed))
	(game-time < 2100)
(or	(and	(up-compare-goal navy-count g:>= biggest-enemy-navy)
		(up-compare-goal navy-count > 6))
(or	(up-compare-goal navy-count g:>= max-navy)
	(up-compare-goal navy-count > 9))); 6
	(unit-type-count-total villager >= 7); easiest
	(up-compare-goal custom-civ-pop < max-civ)
	(population < max-civ-pop)
	(unit-type-count-total fishing-ship < 12); 12
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
#load-if-defined VIKING-CIV
(defrule
	(current-age == castle-age)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(not (unit-available war-galley))
	(strategic-number sn-resource-control == ri-bodkin-arrow))
(or	(cc-players-unit-type-count 0 shore-fish >= shorefishreq2); a bit
	(cc-players-unit-type-count 0 sea-fish >= deepfishreq2)); a bit
	(up-compare-goal custom-civ-pop < max-civ)
	(population < max-civ-pop)
	(unit-type-count-total villager >= 7); easiest
	(unit-type-count-total fishing-ship < 12); 16
	(can-train fishing-ship)
=>
	(train fishing-ship)
)
#end-if
#end-if
#end-if ; NOT WONDER-RACE

; ********** GATHERER PERCENTAGES **********

(defrule
	(strategic-number sn-maximum-wood-drop-distance < wood-distance2)
	(strategic-number sn-maximum-wood-drop-distance != -1)
(or	(unit-type-count villager >= 13)
	(strategic-number sn-wood-gatherer-percentage >= 25))
=>
	(up-modify-sn sn-maximum-wood-drop-distance c:max wood-distance2)
;	(chat-local-to-self "Debugging maximum-wood-drop-distance.")
;	(up-chat-data-to-all "sn-maximum-wood-drop-distance: %d" s: sn-maximum-wood-drop-distance)
	(disable-self))

#load-if-not-defined POST-IMPERIAL-AGE-START
#load-if-not-defined DEATH-MATCH

(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 8)
(or	(strategic-number sn-wood-gatherer-percentage < 13)
(or	(up-pending-objects c: house >= 1)
(or	(housing-headroom >= 3)
(or	(wood-amount >= 30)
	(population >= max-civ)))))
=>
	(set-strategic-number sn-food-gatherer-percentage	 87); 100
	(set-strategic-number sn-wood-gatherer-percentage 	 13)
	(set-strategic-number sn-gold-gatherer-percentage 	  0)
	(set-strategic-number sn-stone-gatherer-percentage 	  0)
	(set-strategic-number sn-maximum-wood-drop-distance wood-distance2))
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 9)
(or	(strategic-number sn-wood-gatherer-percentage < 22)
(or	(up-pending-objects c: house >= 1)
(or	(housing-headroom >= 3)
(or	(wood-amount >= 30)
	(population >= max-civ)))))
=>
	(set-strategic-number sn-food-gatherer-percentage	 78); 89
	(set-strategic-number sn-wood-gatherer-percentage 	 22)
	(set-strategic-number sn-gold-gatherer-percentage 	  0)
	(set-strategic-number sn-stone-gatherer-percentage 	  0)
	(up-modify-sn sn-maximum-wood-drop-distance c:max wood-distance2))
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 10)
(or	(strategic-number sn-wood-gatherer-percentage < 30)
(or	(up-pending-objects c: house >= 1)
(or	(housing-headroom >= 3)
(or	(wood-amount >= 30)
	(population >= max-civ)))))
=>
	(set-strategic-number sn-food-gatherer-percentage	 70); 80
	(set-strategic-number sn-wood-gatherer-percentage 	 30)
	(set-strategic-number sn-gold-gatherer-percentage 	  0)
	(set-strategic-number sn-stone-gatherer-percentage 	  0)
	(up-modify-sn sn-maximum-wood-drop-distance c:max wood-distance2))
(defrule
	(unit-type-count villager == 11)
=>
	(set-strategic-number sn-food-gatherer-percentage 64); 73)
	(set-strategic-number sn-wood-gatherer-percentage 36); 27)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(up-modify-sn sn-maximum-wood-drop-distance c:max wood-distance2)
;	(disable-self)
)
(defrule
	(unit-type-count villager == 12)
=>
	(set-strategic-number sn-food-gatherer-percentage 67); 75); 67
	(set-strategic-number sn-wood-gatherer-percentage 33); 25); 33
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(up-modify-sn sn-maximum-wood-drop-distance c:max wood-distance2)
;	(disable-self)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 13)	
=>
	(set-strategic-number sn-food-gatherer-percentage 69); 77); 62
	(set-strategic-number sn-wood-gatherer-percentage 31); 23); 38
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 14)
=>
	(set-strategic-number sn-food-gatherer-percentage	 71); 79); 64
	(set-strategic-number sn-wood-gatherer-percentage 	 29); 21); 36
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 15)
=>
	(set-strategic-number sn-food-gatherer-percentage	 73); 80); 67
	(set-strategic-number sn-wood-gatherer-percentage 	 27); 20); 33
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 16)
=>
	(set-strategic-number sn-food-gatherer-percentage	 75); 69
	(set-strategic-number sn-wood-gatherer-percentage 	 25); 31
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 17)
=>
	(set-strategic-number sn-food-gatherer-percentage	 76); 71
	(set-strategic-number sn-wood-gatherer-percentage 	 24); 29
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 18)
=>
	(set-strategic-number sn-food-gatherer-percentage	 78); 72
	(set-strategic-number sn-wood-gatherer-percentage 	 22); 28
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 19)
=>
	(set-strategic-number sn-food-gatherer-percentage	 79); 74); 76
	(set-strategic-number sn-wood-gatherer-percentage 	 21); 26); 24
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 20)
=>
	(set-strategic-number sn-food-gatherer-percentage	 80); 75); 70
	(set-strategic-number sn-wood-gatherer-percentage 	 20); 25); 30
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(unit-type-count villager == 21)
=>
	(set-strategic-number sn-food-gatherer-percentage	 76); 67
	(set-strategic-number sn-wood-gatherer-percentage 	 24); 33
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(up-compare-goal strategy-goal != flush)
	(unit-type-count villager == 22)
=>
	(set-strategic-number sn-food-gatherer-percentage	 73); 64
	(set-strategic-number sn-wood-gatherer-percentage 	 27); 36
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(up-compare-goal strategy-goal != flush)
	(unit-type-count villager == 23)
=>
	(set-strategic-number sn-food-gatherer-percentage	 70); 65
	(set-strategic-number sn-wood-gatherer-percentage 	 30); 35
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(strategic-number sn-current-age == dark)
	(up-compare-goal strategy-goal != flush)
	(unit-type-count villager == 24)
=>
	(set-strategic-number sn-food-gatherer-percentage	 67); 67
	(set-strategic-number sn-wood-gatherer-percentage 	 33); 33
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(strategic-number sn-current-age == dark)
	(up-compare-goal strategy-goal != flush)
	(unit-type-count villager == 25)
=>
	(set-strategic-number sn-food-gatherer-percentage	 68); 68
	(set-strategic-number sn-wood-gatherer-percentage 	 32); 32
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(strategic-number sn-current-age == dark)
	(up-compare-goal strategy-goal != flush)
	(unit-type-count villager == 26)
=>
	(set-strategic-number sn-food-gatherer-percentage	 69); 69
	(set-strategic-number sn-wood-gatherer-percentage 	 31); 31
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(up-compare-goal strategy-goal != flush)
	(unit-type-count villager == 27)
=>
	(set-strategic-number sn-food-gatherer-percentage	 70); 70
	(set-strategic-number sn-wood-gatherer-percentage 	 30); 30
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(up-compare-goal strategy-goal != flush)
	(unit-type-count villager == 28)
=>
	(set-strategic-number sn-food-gatherer-percentage	 71); 70
	(set-strategic-number sn-wood-gatherer-percentage 	 29); 30
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(up-compare-goal strategy-goal != flush)
	(unit-type-count villager == 29)
=>
	(set-strategic-number sn-food-gatherer-percentage	 72); 70
	(set-strategic-number sn-wood-gatherer-percentage 	 28); 30
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(up-compare-goal strategy-goal != flush)
	(unit-type-count villager == 30)
=>
	(set-strategic-number sn-food-gatherer-percentage	 73); 70
	(set-strategic-number sn-wood-gatherer-percentage 	 27); 30
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(up-compare-goal strategy-goal != flush)
	(unit-type-count villager >= 31)
=>
	(set-strategic-number sn-food-gatherer-percentage	 74); 70
	(set-strategic-number sn-wood-gatherer-percentage 	 26); 30
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(strategic-number sn-current-age == dark)
	(goal strategy-goal flush)
	(unit-type-count villager == 22)
=>
	(set-strategic-number sn-food-gatherer-percentage	 77); 64
	(set-strategic-number sn-wood-gatherer-percentage 	 23); 36
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == dark)
	(goal strategy-goal flush)
	(unit-type-count villager == 23)
=>
	(set-strategic-number sn-food-gatherer-percentage	 78); 65
	(set-strategic-number sn-wood-gatherer-percentage 	 22); 35
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(strategic-number sn-current-age == dark)
	(goal strategy-goal flush)
	(unit-type-count villager == 24)
=>
	(set-strategic-number sn-food-gatherer-percentage	 79); 67
	(set-strategic-number sn-wood-gatherer-percentage 	 21); 33
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(strategic-number sn-current-age == dark)
	(goal strategy-goal flush)
	(unit-type-count villager == 25)
=>
	(set-strategic-number sn-food-gatherer-percentage	 80); 68
	(set-strategic-number sn-wood-gatherer-percentage 	 20); 32
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(strategic-number sn-current-age == dark)
	(goal strategy-goal flush)
	(unit-type-count villager >= 26)
=>
	(set-strategic-number sn-food-gatherer-percentage	 81); 69
	(set-strategic-number sn-wood-gatherer-percentage 	 19); 31
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if ; <= no DM
#else; PI =>
(defrule
	(unit-type-count villager >= 12)
=>
	(set-strategic-number sn-maximum-food-drop-distance 15)
	(set-strategic-number sn-maximum-gold-drop-distance 14)
	(set-strategic-number sn-maximum-stone-drop-distance 14)
	(set-strategic-number sn-maximum-hunt-drop-distance 22)
	(set-strategic-number sn-cap-civilian-builders 100)
	(set-strategic-number sn-cap-civilian-gatherers 100)
	(disable-self))
#end-if
#load-if-not-defined KHMER-CIV
(defrule
	(strategic-number sn-current-age == df-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 47); 50; 47
	(set-strategic-number sn-wood-gatherer-percentage 40); 38; 40
	(set-strategic-number sn-gold-gatherer-percentage 13); 12; 13
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#else; khmer
(defrule
	(strategic-number sn-current-age == df-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 52); 50; 47
	(set-strategic-number sn-wood-gatherer-percentage 33); 38; 40
	(set-strategic-number sn-gold-gatherer-percentage 15); 12; 13
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
#load-if-defined LOW-RESOURCES-START
(defrule
	(strategic-number sn-current-age == feudal)
=>
	(set-strategic-number sn-food-gatherer-percentage 47); 50; 47
	(set-strategic-number sn-wood-gatherer-percentage 40); 38; 40
	(set-strategic-number sn-gold-gatherer-percentage 13); 12; 13
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(up-compare-goal strategy-goal != flush)
	(research-available castle-age)
(or	(civ-selected khmer)
	(current-age-time > 77))
	(food-amount < castle-food)
	(gold-amount < castle-gold)
=>
	(set-strategic-number sn-food-gatherer-percentage 53); 50; 47
	(set-strategic-number sn-wood-gatherer-percentage 33); 38; 40
	(set-strategic-number sn-gold-gatherer-percentage 14); 12; 13
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == df-transit)
	(goal strategy-goal flush)
	(building-type-count-total mining-camp <= 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 65)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
(or	(and	(strategic-number sn-current-age == feudal)
		(and	(up-compare-goal strategy-goal != flush)
			(and	(current-age-time >= 150)
				(building-type-count-total blacksmith >= 1)))); test
	(and	(regicide-game)
		(strategic-number sn-current-age == df-transit)))
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 19)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == df-transit)
	(goal strategy-goal flush)
(or	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(building-type-count-total mining-camp <= 0))
(or	(up-compare-goal unit-goal != militiaman-line)
	(civ-selected gothic))
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 60)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == df-transit)
	(goal strategy-goal flush)
	(goal unit-goal archer)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 55)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age >= df-transit)
	(goal strategy-goal sling)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#load-if-defined SARACEN-CIV
(defrule
	(strategic-number sn-current-age == df-transit)
	(goal strategy-goal rush)
	(goal control-goal aggressive-rush)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
#end-if
;(defrule
;	(strategic-number sn-current-age == df-transit)
;(or	(and	(goal enemy-boats-goal 1)
;		(unit-type-count fishing-ship > 4))
;	(strategic-number sn-minimum-water-body-size-for-dock == water-islands))
;	(goal strategy-goal flush)
;=>
;	(set-strategic-number sn-food-gatherer-percentage 25)
;	(set-strategic-number sn-wood-gatherer-percentage 70)
;	(set-strategic-number sn-gold-gatherer-percentage 5)
;	(set-strategic-number sn-stone-gatherer-percentage 0)
;)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
(or	(goal unit-goal militiaman-line)
	(goal unit-goal scout-cavalry))
	(building-type-count-total mining-camp > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
(or	(goal unit-goal militiaman-line)
	(goal unit-goal scout-cavalry))
	(building-type-count-total blacksmith > 0)
	(building-type-count-total mining-camp > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 55)
	(set-strategic-number sn-wood-gatherer-percentage 29)
	(set-strategic-number sn-gold-gatherer-percentage 16)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
(or	(and	(goal unit-goal militiaman-line)
		(goal enemy-goal flush))
(or	(goal unit-goal skirmisher)
	(strategic-number sn-cavalry-threat > 1)))
	(building-type-count-total blacksmith > 0)
	(building-type-count-total mining-camp > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 14)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(strategic-number sn-cavalry-threat > 1)
(or	(and	(or	(building-type-count farm < 16)
			(unit-type-count villager > 41)); 41
		(and	(building-type-count farm < 20)
			(unit-type-count villager > 38))); 38
	(building-type-count-total barracks == 0))
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(goal unit-goal archer)
	(building-type-count-total mining-camp > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 36); 35
	(set-strategic-number sn-wood-gatherer-percentage 48); 50
	(set-strategic-number sn-gold-gatherer-percentage 16); 15
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(goal unit-goal archer)
	(building-type-count-total blacksmith > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 46); 45
	(set-strategic-number sn-wood-gatherer-percentage 38); 35
	(set-strategic-number sn-gold-gatherer-percentage 16); 20
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal flush)
	(current-age-time < 300)
	(goal control-goal belated-flush-defense)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 5)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
	(strategic-number sn-current-age == feudal)
	(current-age == feudal-age)
(not	(research-available castle-age))
	(current-age-time > 480)
(or	(building-type-count-total blacksmith <= 0)
	(building-type-count-total market <= 0))
=>
	(set-strategic-number sn-food-gatherer-percentage 40); 45
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 10); 5
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#load-if-defined AZTEC-CIV
#load-if-not-defined REGICIDE
(defrule
	(building-type-count barracks == 0)
(or	(strategic-number sn-current-age == df-transit);will overwrite rule above
	(strategic-number sn-current-age == feudal))
	(goal strategy-goal rush)
(or	(and	(goal unit-goal eagle-warrior)
		(up-compare-goal position-goal == flank))
	(goal unit-goal monk))
	(up-compare-goal control-goal != shot); shot won't sell stone for additional TCs, so mine more gold
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 47)
	(set-strategic-number sn-gold-gatherer-percentage 3)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
#end-if
(defrule
	(strategic-number sn-current-age == feudal)
(or	(goal unit-goal my-unique-unit-line)
	(civ-selected saracen))
(nor	(goal strategy-goal flush)
	(goal strategy-goal sling))
	(dropsite-min-distance stone < 6)
	(stone-amount < castle-stone)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
(defrule
(or	(and	(strategic-number sn-current-age == feudal)
		(goal strategy-goal sling))
	(and	(strategic-number sn-wood-gatherer-percentage == 100); end of rebuild code
		(building-type-count town-center > 0))); use this in case no other percentages are loaded for some reason.
	(game-time > 1200)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#load-if-not-defined SARACEN-CIV
(defrule
	(goal strategy-goal rush)
(or	(goal unit-goal eagle-warrior)
	(goal unit-goal monk))
	(strategic-number sn-current-age == fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal unit-goal eagle-warrior)
	(goal control-goal shot)
	(strategic-number sn-current-age >= fc-transit)
	(building-type-count-total town-center < tc-level-three)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
(or	(goal strategy-goal rush)
	(goal strategy-goal boom))
(or	(or	(goal unit-goal mix)
		(goal unit-goal skirmisher))
	(or	(goal unit-goal militiaman-line)
		(goal unit-goal scorpion)))
	(strategic-number sn-current-age == fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal boom)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age >= fc-transit)
(or	(stone-amount >= 100)
	(dropsite-min-distance stone > 5))
	(building-type-count-total town-center < tc-level-three)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 46)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(up-jump-rule 2)
)
(defrule
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age >= fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(goal position-goal pocket)
	(up-compare-goal control-goal != aggressive-rush)
	(strategic-number sn-current-age >= fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
(or	(goal unit-goal scout-cavalry)
	(and	(goal unit-goal skirmisher)
		(goal monk-threat-goal 1)))
	(strategic-number sn-current-age >= fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 55)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
(or	(and	(goal strategy-goal rush)
		(goal unit-goal cavalry-archer))
	(goal strategy-goal flush))
	(strategic-number sn-current-age == fc-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
(or	(goal unit-goal archer)
	(and	(or	(civ-selected mayan)
			(civ-selected aztec))
		(goal strategy-goal flush)))
=>
	(set-strategic-number sn-food-gatherer-percentage 29)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 29)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
(nor	(goal unit-goal my-unique-unit-line)
(or	(goal unit-goal battle-elephant)
	(goal unit-goal knight)))
	(goal strategy-goal boom)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(goal control-goal aggressive-rush)
	(goal unit-goal archer)
=>
	(set-strategic-number sn-food-gatherer-percentage 23)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 35)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal fast-imp)
(nand	(and	(goal unit-goal eagle-warrior)
		(goal control-goal shot))
	(building-type-count-total town-center < 3))
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal fast-imp)
(nand	(and	(goal unit-goal eagle-warrior)
		(goal control-goal shot))
	(building-type-count-total town-center < 3))
	(research-available imperial-age); test
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 22)
	(set-strategic-number sn-gold-gatherer-percentage 33)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == ci-transit)
	(goal strategy-goal fast-imp)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#else; => #load-if-defined SARACEN-CIV
(defrule
	(goal unit-goal knight)
	(goal control-goal aggressive-rush)
	(building-type-count market > 0)
	(building-type-count-total stable < 2)
	(strategic-number sn-current-age >= fc-transit)
	(game-time < 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 20)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 22)
	(set-strategic-number sn-stone-gatherer-percentage 23)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal unit-goal archer)
	(goal control-goal aggressive-rush)
	(building-type-count market > 0)
	(building-type-count-total archery-range < 3)
	(unit-type-count villager > 20)
	(game-time < 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 10)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 25)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)	
(or	(and	(goal unit-goal monk)
		(building-type-count-total monastery < 3))
	(goal unit-goal scorpion))
	(unit-type-count villager > 20)
	(game-time < 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 20)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 22)
	(set-strategic-number sn-stone-gatherer-percentage 23)
)
(defrule
	(goal unit-goal monk)
	(building-type-count-total monastery > 2)
	(commodity-selling-price stone > 104)
	(unit-type-count villager > 20)
	(game-time < 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 25)
	(set-strategic-number sn-wood-gatherer-percentage 20)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 25)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(goal control-goal aggressive-rush)
	(building-type-count market > 0)
	(building-type-count-total archery-range < 3)
	(building-type-count-total stable < 2)
	(building-type-count-total monastery < 3)
	(commodity-selling-price stone > 104)
	(unit-type-count villager > 20)
	(game-time < 1800)
=>
	(set-strategic-number sn-food-gatherer-percentage 10)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 20)
)
#end-if ; SARACEN-CIV
(defrule
	(game-time < 1800)
	(strategic-number sn-current-age >= ci-transit)
	(goal strategy-goal fast-imp)
	(goal unit-goal gunpowder-class)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
(or	(building-type-count-total town-center == 1)
	(goal enemy-fortifications-goal 1))
	(strategic-number sn-current-age >= ci-transit)
	(goal strategy-goal fast-imp)
	(building-type-count-total archery-range > 2)
	(goal unit-goal gunpowder-class)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 27)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(strategic-number sn-current-age == fc-transit)
	(goal unit-goal wonder)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 35)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
(defrule
	(goal strategy-goal rush)
(or	(and	(goal unit-goal eagle-warrior)
		(strategic-number sn-cavalry-threat >= 1))
	(goal unit-goal mix))
	(unit-type-count villager > 20)
	(building-type-count-total monastery > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(strategic-number sn-cavalry-threat == 0)
	(building-type-count-total barracks > 2)
(or	(and	(building-type-count-total barracks > 3)
		(building-type-count-total monastery > 0))
	(goal control-goal aggressive-rush))
=>
	(set-strategic-number sn-food-gatherer-percentage 34)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 40)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
(or	(strategic-number sn-current-age == fc-transit)
	(and	(current-age == castle-age)
		(current-age-time < 120)))
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(strategic-number sn-cavalry-threat == 0)
	(building-type-count-total barracks > 2)
	(goal control-goal aggressive-rush)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 34)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(building-type-count-total castle <= 0)
	(goal strategy-goal rush)
	(goal unit-goal my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 37); 37
	(set-strategic-number sn-wood-gatherer-percentage 30); 27
	(set-strategic-number sn-gold-gatherer-percentage 3); 6
	(set-strategic-number sn-stone-gatherer-percentage 30); 30
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(building-type-count-total castle <= 0)
	(goal strategy-goal boom)
	(goal unit-goal my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 28); 27
	(set-strategic-number sn-wood-gatherer-percentage 39); 40
	(set-strategic-number sn-gold-gatherer-percentage 3); 3
	(set-strategic-number sn-stone-gatherer-percentage 30); 30
)
(defrule
	(strategic-number sn-current-age >= fc-transit)
	(up-compare-goal custom-civ-pop > 50)
	(building-type-count-total castle <= 0)
	(goal unit-goal my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 36); 37
	(set-strategic-number sn-wood-gatherer-percentage 30); 27
	(set-strategic-number sn-gold-gatherer-percentage 24); 26
	(set-strategic-number sn-stone-gatherer-percentage 10); 10
)
(defrule
	(strategic-number sn-current-age == fc-transit)
(or	(building-type-count-total castle >= 1)
	(stone-amount >= castle-stone))
	(goal unit-goal my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 42); 34
	(set-strategic-number sn-wood-gatherer-percentage 37); 45
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 6)
	(research ri-stone-mining); debug, dba and hc are blocked
)
#load-if-not-defined SARACEN-CIV
(defrule
	(goal strategy-goal rush)
	(up-compare-goal control-goal != shot)
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(current-age-time < 300)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal knight)
	(up-compare-goal control-goal != shot)
	(strategic-number sn-current-age == castle)
	(building-type-count-total stable > 1)
	(building-type-count-total siege-workshop > 0)
	(game-time < 1500)
=>
	(set-strategic-number sn-food-gatherer-percentage 33)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 29)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(up-compare-goal control-goal != shot)
	(goal unit-goal battle-elephant)
	(strategic-number sn-current-age == castle)
	(current-age-time < 300)
=>
	(set-strategic-number sn-food-gatherer-percentage 54)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 16)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal battle-elephant)
	(up-compare-goal control-goal != shot)
	(strategic-number sn-current-age == castle)
	(building-type-count-total stable > 1)
	(building-type-count-total siege-workshop > 0)
	(game-time < 1500)
=>
	(set-strategic-number sn-food-gatherer-percentage 46)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center < tc-level-three)
	(stone-amount >= 100)
	(goal unit-goal archer)
	(goal strategy-goal boom)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal cavalry-archer)
	(goal control-goal aggressive-rush)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(building-type-count-total stable < 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 27)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 35)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal cavalry-archer)
	(goal control-goal aggressive-rush)
	(strategic-number sn-cavalry-threat > 1)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(building-type-count-total stable < 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 27)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal cavalry-archer)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total archery-range > 2)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
(or	(and	(goal unit-goal archer)
		(stone-amount >= 100))
	(goal unit-goal scorpion))
	(building-type-count-total stable == 0)
	(strategic-number sn-current-age == castle)
	(commodity-selling-price stone < 96)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 27); 25
	(set-strategic-number sn-wood-gatherer-percentage 45); 45
	(set-strategic-number sn-gold-gatherer-percentage 28); 30
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal archer)
	(building-type-count-total stable == 0)
	(strategic-number sn-current-age == castle)
	(stone-amount >= 100)
	(commodity-selling-price stone < 96)
	(unit-type-count villager > 20)
(or	(up-research-status c: ri-pikeman >= research-pending)
	(up-research-status c: ri-elite-skirmisher >= research-pending))
=>
	(set-strategic-number sn-food-gatherer-percentage 32)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal flush)
(or	(goal unit-goal archer)
	(goal unit-goal mix))
	(unit-type-count villager > 20)
	(strategic-number sn-current-age == castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 20)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
(or	(goal strategy-goal flush)
	(goal strategy-goal rush))
	(goal unit-goal archer)
	(building-type-count-total town-center >= tc-level-three)
	(commodity-selling-price stone < 96)
	(dropsite-min-distance stone < 5)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 33)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 22)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal flush)
(or	(goal unit-goal cavalry-archer)
	(goal unit-goal mix))
	(unit-type-count villager > 20)
	(building-type-count-total town-center >= tc-level-two)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
(or	(goal strategy-goal flush)
	(up-research-status c: ri-bodkin-arrow >= research-pending))
(or	(goal unit-goal archer)
	(goal unit-goal cavalry-archer))
	(stone-amount < 100)
	(building-type-count-total town-center < tc-level-three)
	(strategic-number sn-current-age == castle)
	(up-compare-goal control-goal != my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 20)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal flush)
	(goal unit-goal mix)
(or	(building-type-count-total town-center >= tc-level-three)
	(stone-amount < 100))
	(dropsite-min-distance stone < 5)
	(up-compare-goal control-goal != my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#load-if-not-defined CELTIC-CIV
(defrule
	(goal unit-goal skirmisher)
	(up-compare-goal control-goal != my-unique-unit-line)
	(strategic-number sn-current-age >= castle)
(or	(and	(building-type-count-total town-center >= tc-level-three)
		(goal strategy-goal rush))
	(stone-amount < 100))
	(dropsite-min-distance stone < 5)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal flush)
	(goal unit-goal militiaman-line)
	(building-type-count-total town-center >= tc-level-two)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 32)
	(set-strategic-number sn-gold-gatherer-percentage 23)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal strategy-goal flush)
	(goal unit-goal militiaman-line)
	(stone-amount < 100)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#else
(defrule
	(goal strategy-goal rush)
	(goal unit-goal skirmisher)
	(strategic-number sn-current-age >= castle)
	(building-type-count-total town-center < 3)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 14)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal flush)
	(dropsite-min-distance stone < 6)
	(strategic-number sn-current-age >= castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 39)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 13)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal unit-goal militiaman-line)
	(dropsite-min-distance stone < 6)
	(strategic-number sn-current-age >= castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#end-if
(defrule
	(goal strategy-goal rush)
	(goal unit-goal skirmisher)
	(strategic-number sn-cavalry-threat == 0)
	(players-unit-type-count every-enemy militiaman-line < 8)
	(not (goal control-goal my-unique-unit-line))
	(strategic-number sn-current-age >= castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#load-if-defined GOTHIC-CIV
(defrule
	(goal strategy-goal flush)
	(goal unit-goal militiaman-line)
	(building-type-count-total town-center >= tc-level-three)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 32)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#end-if
#load-if-not-defined VIKING-CIV
#load-if-not-defined TURKISH-CIV
(defrule
	(not (goal strategy-goal boom))
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(building-type-count town-center >= tc-level-two)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 42); 42
	(set-strategic-number sn-wood-gatherer-percentage 35); 38
	(set-strategic-number sn-gold-gatherer-percentage 23)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#else
(defrule
	(not (goal strategy-goal boom))
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(building-type-count town-center >= tc-level-two)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 43)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
#end-if
(defrule
	(not (goal strategy-goal boom))
	(goal unit-goal battle-elephant)
	(strategic-number sn-current-age == castle)
	(building-type-count town-center >= tc-level-two)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal boom)
(or	(goal unit-goal archer)
	(goal unit-goal scorpion))
	(building-type-count-total town-center < 3)
	(stone-amount < 100); gather stone when TC disrupted
=>
	(set-strategic-number sn-food-gatherer-percentage 23)
	(set-strategic-number sn-wood-gatherer-percentage 46)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal strategy-goal boom)
	(goal unit-goal scorpion)
	(building-type-count-total town-center >= tc-level-three)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal strategy-goal boom)
(or	(goal unit-goal archer)
	(and	(goal unit-goal scorpion)
		(up-research-status c: ri-light-cavalry >= research-pending)))
	(building-type-count-total town-center >= tc-level-three)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
(defrule
	(goal strategy-goal boom)
	(goal unit-goal archer)
	(or
		(building-type-count-total town-center >= tc-level-four)
		(current-age-time > 300)
	)
	(strategic-number sn-current-age >= castle-age)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal strategy-goal boom)
	(goal unit-goal archer)
	(strategic-number sn-current-age >= ci-transit)
=>
	(set-strategic-number sn-food-gatherer-percentage 26)
	(set-strategic-number sn-wood-gatherer-percentage 42)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#load-if-defined AZTEC-CIV
(defrule
	(goal strategy-goal fast-imp)
	(strategic-number sn-current-age >= fc-transit)
;	(building-type-count-total town-center >= tc-level-three)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 26)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal boom)
	(goal unit-goal archer)
	(building-type-count-total town-center >= tc-level-three)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 46)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#end-if
#load-if-defined PERSIAN-CIV
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-four)
	(dropsite-min-distance stone <= 6)
	(goal control-goal my-unique-unit-line)
	(building-type-count-total castle == 0)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
#end-if
#load-if-defined INDIAN-CIV
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-three)
	(goal strategy-goal fast-imp)
	(goal unit-goal gunpowder-class)
=>
	(set-strategic-number sn-food-gatherer-percentage 55)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
#load-if-not-defined TEUTONIC-CIV
(defrule
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total archery-range > 0)
	(dropsite-min-distance stone <= 6)
	(goal control-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 13)
)
(defrule
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 6)
	(up-research-status c: ri-elite-skirmisher >= research-pending)
	(goal control-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 12)
)
#end-if
(defrule
	(goal unit-goal battle-elephant)
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-two)
	(dropsite-min-distance stone <= 6)
	(goal control-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-two)
	(dropsite-min-distance stone <= 6)
	(goal control-goal my-unique-unit-line)
	(or(civ-selected frankish)(civ-selected briton))
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
(defrule
	(goal unit-goal knight)
	(goal control-goal shot)
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-two)
	(dropsite-min-distance stone <= 6)
	(or(civ-selected mongol)(civ-selected chinese))
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 22)
	(set-strategic-number sn-stone-gatherer-percentage 13)
)
(defrule
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age >= castle)
	(building-type-count-total castle > 0)
	(goal control-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal strategy-goal rush)
(or	(goal unit-goal eagle-warrior)
	(goal unit-goal militiaman-line))
	(strategic-number sn-current-age >= castle)
	(dropsite-min-distance stone <= 6)
(or	(building-type-count-total town-center >= tc-level-two)
	(and	(stone-amount < 100)
		(up-research-status c: ri-pikeman >= research-pending)))
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 26)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
(or	(strategic-number sn-cavalry-threat == 0)
	(strategic-number sn-current-age >= ci-transit))
	(dropsite-min-distance stone <= 6)
	(unit-type-count villager > 60)
=>
	(set-strategic-number sn-food-gatherer-percentage 33)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 38)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal eagle-warrior)
	(strategic-number sn-cavalry-threat == 0)
	(strategic-number sn-current-age == ci-transit)
	(building-type-count town-center == 3)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-not-defined AZTEC-CIV
(defrule
	(goal strategy-goal rush)
	(goal unit-goal mix)
	(building-type-count-total town-center < 3)
	(stone-amount != 100)
	(stone-amount != 200)
	(dropsite-min-distance stone < 5)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#else
(defrule
	(goal strategy-goal boom)
	(goal unit-goal eagle-warrior)
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone < 5)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 47)
	(set-strategic-number sn-gold-gatherer-percentage 14)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal mix)
	(building-type-count-total town-center < 3)
	(stone-amount != 100)
	(stone-amount != 200)
	(dropsite-min-distance stone < 5)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 29)
	(set-strategic-number sn-stone-gatherer-percentage 7)
)
(defrule
	(goal unit-goal militiaman-line)
	(strategic-number sn-current-age >= ci-transit)
	(game-time < 2400)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 46)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 19)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#end-if
#load-if-not-defined AZTEC-CIV
#load-if-not-defined FRANKISH-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined ITALIAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined SARACEN-CIV
(defrule
	(not (goal unit-goal my-unique-unit-line))
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age >= ci-transit)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage ci-uu-switch-food)
	(set-strategic-number sn-wood-gatherer-percentage ci-uu-switch-wood)
	(set-strategic-number sn-gold-gatherer-percentage ci-uu-switch-gold)
	(set-strategic-number sn-stone-gatherer-percentage ci-uu-switch-stone)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-not-defined BYZANTINE-CIV
#load-if-not-defined CELTIC-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined SLAVIC-CIV
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
(nor	(goal unit-goal archer)
(or	(goal unit-goal battle-elephant)
	(goal unit-goal knight)))
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 14)
)
#else
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(goal unit-goal scorpion)
	(goal control-goal my-unique-unit-line)
	(building-type-count-total castle >= 0)
	(unit-type-count villager > 20)
	(strategic-number sn-current-age >= castle)
=>
	(set-strategic-number sn-food-gatherer-percentage 34)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 27)
	(set-strategic-number sn-stone-gatherer-percentage 6)
)
#end-if ;SLAVIC-CIV
#else
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(goal control-goal my-unique-unit-line)
(or	(strategic-number sn-current-age == castle)
	(building-type-count-total castle == 0))
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 37)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 16)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
#end-if ;KOREAN-CIV
#else
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 13)
)
#end-if ;CELTIC-CIV
#else
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 13)
	(set-strategic-number sn-stone-gatherer-percentage 15)
)
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age == castle)
	(goal enemy-goal skirmisher)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 39)
	(set-strategic-number sn-wood-gatherer-percentage 41)
	(set-strategic-number sn-gold-gatherer-percentage 5)
	(set-strategic-number sn-stone-gatherer-percentage 15)
)
(defrule
	(goal position-point pocket)
	(building-type-count stone-wall-line > 5)
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(goal control-goal my-unique-unit-line)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 39)
	(set-strategic-number sn-wood-gatherer-percentage 41)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 8)
)
#end-if ;BYZANTINE-CIV
#load-if-not-defined KOREAN-CIV
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total castle == 1)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 20)
(nand	(wood-amount > 300)
	(stone-amount < 100))
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 7)
)
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-three);3
	(building-type-count-total castle == 1)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 31)
	(set-strategic-number sn-wood-gatherer-percentage 37)
	(set-strategic-number sn-gold-gatherer-percentage 24)
	(set-strategic-number sn-stone-gatherer-percentage 8)
)
#else
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total castle == 1)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 20)
	(nand
		(wood-amount > 300)
		(stone-amount < 100)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 31)
	(set-strategic-number sn-wood-gatherer-percentage 52)
	(set-strategic-number sn-gold-gatherer-percentage 13)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
#end-if
(defrule
	(building-type-count-total castle == 1)
	(goal control-goal shot)
	(goal unit-goal my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 20)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 13)
)
#load-if-not-defined BRITON-CIV
#load-if-not-defined CHINESE-CIV
#load-if-not-defined KOREAN-CIV
#load-if-not-defined MAYAN-CIV
#load-if-not-defined MONGOL-CIV
(defrule
	(strategic-number sn-current-age == feudal)
	(goal unit-goal my-unique-unit-line)
	(goal strategy-goal boom)
;	(building-type-count-total castle <= 0)
	(dropsite-min-distance stone < 6)
	(stone-amount < 600)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 15)
)
#load-if-not-defined TEUTONIC-CIV
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total castle >= 1)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total castle >= 1)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 20)
	(current-age-time > 420)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-defined SLAVIC-CIV
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-two)
	(goal unit-goal my-unique-unit-line)
	(unit-type-count villager > 100)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 21)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#else
(defrule
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center >= tc-level-five)
	(unit-type-count villager > 20)
	(up-compare-goal custom-civ-pop < max-civ)
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 16)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
#end-if
(defrule
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total castle > 1)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage uu-food2)
	(set-strategic-number sn-wood-gatherer-percentage uu-wood2)
	(set-strategic-number sn-gold-gatherer-percentage uu-gold2)
	(set-strategic-number sn-stone-gatherer-percentage uu-stone2)
)
#load-if-defined CELTIC-CIV
(defrule
(or	(up-research-status c: my-unique-unit-upgrade >= research-pending)
	(up-research-status c: ri-champion >= research-pending))
	(up-research-status c: ri-halberdier >= research-pending)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
#end-if
(defrule
	(current-age == castle-age)
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total castle > 1)
	(unit-type-count villager > 20)
(or	(or 	(civ-selected byzantine)
		(civ-selected spanish))
	(or	(civ-selected japanese)
		(civ-selected gothic)))
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-defined BYZANTINE-CIV
(defrule
	(not (goal strategy-goal boom))
	(goal uu-up-goal 1)
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total castle > 1)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 28)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal strategy-goal boom)
	(strategic-number sn-current-age == ci-transit)
	(goal unit-goal my-unique-unit-line)
	(building-type-count-total castle > 1)
	(unit-type-count villager > 20)	
=>
	(set-strategic-number sn-food-gatherer-percentage 24)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#end-if
#load-if-not-defined TEUTONIC-CIV
#load-if-not-defined HUN-CIV
(defrule
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone <= 6)
(or	(building-type-count-total town-center >= tc-level-three)
	(stone-amount < 100))
	(not (goal control-goal my-unique-unit-line))
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 19)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
(defrule
	(goal strategy-goal rush)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age == castle)
	(building-type-count-total town-center == 2)
	(unit-type-count-total 970 > 2); monk
	(unit-type-count villager > 20)
	(stone-amount >= 100)
(nor 	(goal enemy-goal eagle-warrior)
	(civ-selected viking))
	(goal anti-cavalry-threat-goal 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 36)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone <= 6)
	(building-type-count-total town-center >= tc-level-three)
	(up-research-status c: ri-crossbow < research-pending)
	(goal control-goal my-unique-unit-line)
	(unit-type-count villager > 20)
	(up-compare-goal custom-civ-pop < 100)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 16)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal strategy-goal boom)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone <= 6)
	(building-type-count-total town-center >= tc-level-three)
	(building-type-count-total town-center < tc-level-five)
	(unit-type-count villager > 20)
	(up-compare-goal custom-civ-pop < 100)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 39)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
(nor	(player-in-game any-ally)
	(player-in-game 3))
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age == castle)
(or	(building-type-count-total town-center >= tc-level-three)
	(goal strategy-goal flush))
	(not (goal control-goal my-unique-unit-line))
	(unit-type-count villager > 20)
	(strategic-number sn-military-level < 0)
	(current-age-time < 600)
=>
	(set-strategic-number sn-food-gatherer-percentage 46)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 19)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
(nor	(player-in-game any-ally)
	(player-in-game 3))
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age == castle)
	(goal strategy-goal flush)
	(stone-amount < 100)
	(building-type-count-total town-center < tc-level-three)
	(not (goal control-goal my-unique-unit-line))
	(unit-type-count villager > 20)
	(current-age-time < 600)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 18)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
(nor	(player-in-game any-ally)
	(player-in-game 3))
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(up-compare-goal custom-civ-pop >= max-civ)
	(not (goal control-goal my-unique-unit-line))
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 26)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-not-defined UP-POCKET-POSITION
(defrule
(or	(player-in-game any-ally)
	(player-in-game 3))
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(unit-type-count-total villager > 100)
	(not (goal control-goal my-unique-unit-line))
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#else
(defrule
(or	(player-in-game any-ally)
	(player-in-game 3))
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(unit-type-count-total villager > 100)
	(research-available imperial-age)
	(not (goal control-goal my-unique-unit-line))
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 24)
	(set-strategic-number sn-gold-gatherer-percentage 34)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#end-if
(defrule
(nor	(player-in-game any-ally)
	(player-in-game 3))
	(goal unit-goal battle-elephant)
	(strategic-number sn-current-age == castle)
	(up-compare-goal custom-civ-pop >= max-civ)
	(not (goal control-goal my-unique-unit-line))
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 17)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
(or	(player-in-game any-ally)
	(player-in-game 3))
	(goal unit-goal battle-elephant)
	(strategic-number sn-current-age == castle)
	(unit-type-count-total villager > 100)
	(research-available imperial-age)
	(not (goal control-goal my-unique-unit-line))
=>
	(set-strategic-number sn-food-gatherer-percentage 45)
	(set-strategic-number sn-wood-gatherer-percentage 28)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
(or	(game-time > 2400)
	(strategic-number sn-current-age >= ci-transit))
	(goal unit-goal knight)
	(up-compare-goal ranged-unit-type-goal != cavalry-archer)
	(up-compare-goal control-goal != my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 41)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
(or	(game-time > 2400)
	(strategic-number sn-current-age >= ci-transit))
	(goal unit-goal battle-elephant)
	(up-compare-goal ranged-unit-type-goal != cavalry-archer)
	(up-compare-goal control-goal != my-unique-unit-line)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#else
(defrule
	(goal unit-goal knight)
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone <= 6)
	(stone-amount < 100)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 32)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
#end-if
#else
(defrule
	(goal strategy-goal boom)
	(building-type-count-total town-center >= tc-level-two)
	(building-type-count-total castle > 0)
	(goal unit-goal my-unique-unit-line)
=>
	(set-strategic-number sn-food-gatherer-percentage 53)
	(set-strategic-number sn-wood-gatherer-percentage 24)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(or
		(building-type-count-total town-center == tc-level-three)
		(stone-amount < 100)
	)
	(dropsite-min-distance stone <= 4)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(strategic-number sn-stone-gatherer-percentage < 10); if we started gathering stone don't stop or keep retasking
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(building-type-count-total town-center == tc-level-three)
	(building-type-count-total barracks > 1)
	(up-research-status c: ri-pikeman >= research-pending)
	(dropsite-min-distance stone <= 4)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(strategic-number sn-stone-gatherer-percentage < 10)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 32)
	(set-strategic-number sn-gold-gatherer-percentage 15)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(building-type-count-total town-center >= tc-level-four)
	(dropsite-min-distance stone <= 4)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(strategic-number sn-stone-gatherer-percentage < 10)
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 23)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(dropsite-min-distance stone <= 4)
	(strategic-number sn-current-age >= castle)
	(or
		(building-type-count-total castle > 0)
		(strategic-number sn-stone-gatherer-percentage < 10)
	)
	(up-compare-goal custom-civ-pop >= max-civ-pop)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 4)
	(strategic-number sn-archer-threat < 3)
	(goal anti-cavalry-threat-goal 1)
	(up-research-status c: ri-heavy-scorpion < research-pending)
	(unit-type-count villager > 20)
	(goal unit-goal knight)
(nand	(goal strategy-goal boom); better boom as pocket and go hscorps later
	(goal position-goal pocket))
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 21)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
#end-if ;teutonic civ
(defrule
	(goal strategy-goal rush)
	(goal unit-goal cavalry-archer)
	(goal control-goal aggressive-rush)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(building-type-count-total stable < 2)
	(building-type-count-total archery-range > 3)
	(strategic-number sn-cavalry-threat < 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 24)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 38)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal strategy-goal rush)
	(goal unit-goal cavalry-archer)
	(goal control-goal aggressive-rush)
	(strategic-number sn-current-age == castle)
	(unit-type-count villager > 20)
	(building-type-count-total stable < 2)
	(building-type-count-total archery-range > 3)
	(or
		(strategic-number sn-cavalry-threat > 1)
		(up-research-status c: ri-elite-skirmisher >= research-pending)
	)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 24)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#load-if-not-defined TEUTONIC-CIV
(defrule
(nor	(player-in-game any-ally)
	(player-in-game 3))
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(strategic-number sn-current-age == castle)
	(game-time < 1800)
	(unit-type-count villager > 20)
	(goal monk-threat-goal 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 58); too much food actually, but we want early light cavalry
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 12)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
(defrule
(nor	(player-in-game any-ally)
	(player-in-game 3))
	(strategic-number sn-current-age == castle)
	(goal strategy-goal boom)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(unit-type-count villager > 20)
(or	(strategic-number sn-archer-threat > 0)
	(building-type-count-total stone-wall-line > 10))
	(building-type-count-total siege-workshop == 0); get a siege work shop early in arena
	(unit-type-count 980 == 0); still no stone gatherers, so keep percentage from castle transit
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 10)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal unit-goal cavalry-archer)
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone <= 6)
(or	(building-type-count-total town-center >= tc-level-three)
	(stone-amount < 100))
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 42)
	(set-strategic-number sn-wood-gatherer-percentage 34)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 4)
)
(defrule
	(goal unit-goal cavalry-archer)
	(strategic-number sn-current-age == castle)
	(building-type-count stable > 1)
	(dropsite-min-distance stone <= 6)
	(or
		(building-type-count-total town-center >= tc-level-three)
		(stone-amount < 100)
	)
	(goal enemy-goal eagle-warrior)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 24)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal unit-goal cavalry-archer)
	(unit-type-count villager > 95)
=>
	(set-strategic-number sn-food-gatherer-percentage 36)
	(set-strategic-number sn-wood-gatherer-percentage 32)
	(set-strategic-number sn-gold-gatherer-percentage 29)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(goal unit-goal cavalry-archer)
	(unit-type-count villager > 95)
	(building-type-count-total castle > 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 38)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 29)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#load-if-defined TURKISH-CIV
(defrule
	(unit-type-count villager > 95)
=>
	(set-strategic-number sn-food-gatherer-percentage 44)
	(set-strategic-number sn-wood-gatherer-percentage 26)
	(set-strategic-number sn-gold-gatherer-percentage 28)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
#end-if
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal control-goal shot)
	(building-type-count-total town-center >= tc-level-three)
	(dropsite-min-distance stone <= 6)
	(unit-type-count villager > 20)
	(building-type-count-total castle == 0)
(or	(goal unit-goal knight)
(or	(goal unit-goal battle-elephant)
	(up-research-status c: ri-elite-eagle-warrior >= research-pending)))
=>
	(set-strategic-number sn-food-gatherer-percentage 35)
	(set-strategic-number sn-wood-gatherer-percentage 35)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)

(defrule
	(building-type-count-total town-center < 2)
	(building-type-count-total dock > 0)
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(strategic-number sn-current-age == castle)
	(stone-amount > 100)
	(not(goal unit-goal my-unique-unit-line))
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 48)
	(set-strategic-number sn-gold-gatherer-percentage 22)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
(or	(not (research-available imperial-age))
	(stone-amount < 100))
	(not(goal unit-goal my-unique-unit-line))
	(building-type-count-total dock > 0)
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)
	(strategic-number sn-current-age == castle)
	(dropsite-min-distance stone < 6)
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 47)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
(or	(strategic-number sn-current-age == df-transit)
	(and	(strategic-number sn-current-age == feudal)
		(not (civ-selected viking))))
	(up-compare-goal strategy-goal != boom)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
=>
	(set-strategic-number sn-food-gatherer-percentage 57)
	(set-strategic-number sn-wood-gatherer-percentage 43)
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(up-compare-goal strategy-goal > flush)
	(strategic-number sn-gold-gatherer-percentage <= 0)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage  5)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
(or	(civ-selected viking)
	(goal strategy-goal flush))
=>
	(set-strategic-number sn-food-gatherer-percentage 30)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(current-age < imperial-age)
	(strategic-number sn-current-age >= fc-transit)
(or	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(and	(building-type-count dock > 1)
		(current-age-time < 420)))
(nand	(goal unit-goal my-unique-unit-line)
	(building-type-count castle == 0))
=>
	(set-strategic-number sn-food-gatherer-percentage 20)
	(set-strategic-number sn-wood-gatherer-percentage 60)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(current-age < imperial-age)
	(strategic-number sn-current-age >= fc-transit)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(unit-type-count fishing-ship > 11)
=>
	(set-strategic-number sn-food-gatherer-percentage 5); 0
	(set-strategic-number sn-wood-gatherer-percentage 65); 67
	(set-strategic-number sn-gold-gatherer-percentage 30); 33
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(strategic-number sn-current-age >= fc-transit);	(current-age == castle-age)
	(current-age-time > 180)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(up-compare-goal custom-civ-pop < 61)
;	(dropsite-min-distance stone <= 6)
=>
	(set-strategic-number sn-food-gatherer-percentage 20); 12
	(set-strategic-number sn-wood-gatherer-percentage 52); 57
	(set-strategic-number sn-gold-gatherer-percentage 25); 28
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-not-defined VIKING-CIV
(defrule
	(up-compare-goal custom-civ-pop > 60)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
=>
	(set-strategic-number sn-food-gatherer-percentage 20); 16
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 27); 31
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#else
(defrule
	(up-compare-goal custom-civ-pop > 60)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
=>
	(set-strategic-number sn-food-gatherer-percentage 22); 21
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 25); 26
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#end-if
#load-if-not-defined KOREAN-CIV
(defrule
	(game-time >= 3600)
	(unit-type-count female-gold-miner == 0); no gold miners
	(unit-type-count male-gold-miner == 0)
	(unit-type-count-total 229 == 0); no dead miners so enemy didn't kill them
	(unit-type-count-total 221 == 0); so there's no gold available
=>
	(set-strategic-number sn-food-gatherer-percentage 48)
	(set-strategic-number sn-wood-gatherer-percentage 45)
	(set-strategic-number sn-gold-gatherer-percentage 2)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
(defrule
	(game-time >= 3600)
	(unit-type-count female-gold-miner == 0); no gold miners
	(unit-type-count male-gold-miner == 0)
	(unit-type-count-total 229 == 0); no dead miners so enemy didn't kill them
	(unit-type-count-total 221 == 0); so there's no gold available
(or	(up-research-status c: ri-champion >= research-pending)
	(and	(up-research-status c: ri-light-cavalry >= research-pending)
		(up-research-status c: ri-bloodlines >= research-pending)))
=>
	(set-strategic-number sn-food-gatherer-percentage 55)
	(set-strategic-number sn-wood-gatherer-percentage 38)
	(set-strategic-number sn-gold-gatherer-percentage 2)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#end-if
#load-if-defined DEATH-MATCH
#load-if-not-defined CELTIC-CIV
(defrule
	(up-compare-goal custom-civ-pop < max-civ)
	(wood-amount > 1500)
=>
	(set-strategic-number sn-wood-gatherer-percentage 0)
	(set-strategic-number sn-food-gatherer-percentage 70)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(up-compare-goal custom-civ-pop < max-civ)
	(wood-amount < 500)
=>
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 20)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
#end-if
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(commodity-buying-price food < 136)
	(commodity-selling-price stone > 95)
	(building-type-count market > 0)
	(dropsite-min-distance stone < 6)
	(goal unit-goal knight)
	(game-time < 1800)
	(building-type-count-total stable > 1)
=>
	(set-strategic-number sn-food-gatherer-percentage 16)
	(set-strategic-number sn-wood-gatherer-percentage 14)
	(set-strategic-number sn-gold-gatherer-percentage 35)
	(set-strategic-number sn-stone-gatherer-percentage 35)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(commodity-selling-price stone > 95)
	(building-type-count market > 0)
	(dropsite-min-distance stone < 6)
	(goal strategy-goal rush)
	(goal unit-goal archer)
	(game-time < 1800)
	(building-type-count-total archery-range > 2)
=>
	(set-strategic-number sn-food-gatherer-percentage 10)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 30)
	(set-strategic-number sn-stone-gatherer-percentage 30)
)
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal strategy-goal rush)
	(goal unit-goal monk)
	(current-age == castle-age)
	(commodity-selling-price stone < 105)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 28)
	(set-strategic-number sn-wood-gatherer-percentage 28)
	(set-strategic-number sn-gold-gatherer-percentage 44)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(goal unit-goal monk)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total castle > 0)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 28)
	(set-strategic-number sn-wood-gatherer-percentage 28)
	(set-strategic-number sn-gold-gatherer-percentage 42)
	(set-strategic-number sn-stone-gatherer-percentage 2)
)
(defrule
	(goal unit-goal monk)
	(strategic-number sn-current-age >= ci-transit)
	(building-type-count-total castle == 0)
	(unit-type-count villager > 20)
=>
	(set-strategic-number sn-food-gatherer-percentage 20)
	(set-strategic-number sn-wood-gatherer-percentage 27)
	(set-strategic-number sn-gold-gatherer-percentage 40)
	(set-strategic-number sn-stone-gatherer-percentage 13)
)
(defrule
	(strategic-number sn-current-age == castle)
	(goal unit-goal wonder)
=>
	(set-goal train-civ-goal wonder)
	(set-strategic-number sn-food-gatherer-percentage 25)
	(set-strategic-number sn-wood-gatherer-percentage 20)
	(set-strategic-number sn-gold-gatherer-percentage 45)
	(set-strategic-number sn-stone-gatherer-percentage 10)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(goal unit-goal wonder)
=>
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage 30)
	(set-strategic-number sn-gold-gatherer-percentage 40)
	(set-strategic-number sn-stone-gatherer-percentage 30)
	(set-strategic-number sn-wood-dropsite-distance 3)
)
#load-if-defined DEFEND-WONDER
(defrule
	(unit-type-count-total villager < twenty-five-percent-pop)
=>
	(set-strategic-number sn-food-gatherer-percentage 60)
	(set-strategic-number sn-wood-gatherer-percentage 33)
	(set-strategic-number sn-gold-gatherer-percentage 5)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#load-if-not-defined AZTEC-CIV
#load-if-not-defined CELTIC-CIV
#load-if-not-defined FRANKISH-CIV
#load-if-not-defined GOTHIC-CIV
#load-if-not-defined HUN-CIV
#load-if-not-defined INCAN-CIV
#load-if-not-defined INDIAN-CIV
#load-if-not-defined JAPANESE-CIV
#load-if-not-defined MAGYAR-CIV
#load-if-not-defined PERSIAN-CIV
#load-if-not-defined PORTUGUESE-CIV
#load-if-not-defined SARACEN-CIV
#load-if-not-defined SLAVIC-CIV
#load-if-not-defined SPANISH-CIV
#load-if-not-defined TEUTONIC-CIV
#load-if-not-defined TURKISH-CIV
#load-if-not-defined VIKING-CIV
(defrule
	(unit-type-count-total villager < twenty-five-percent-pop)
=>
	(set-strategic-number sn-food-gatherer-percentage 40)
	(set-strategic-number sn-wood-gatherer-percentage 50)
	(set-strategic-number sn-gold-gatherer-percentage 8)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#end-if
#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(timer-triggered one-minute-timer)
	(food-amount < 2500)
(or	(food-amount < 1500)
	(unit-type-count-total villager < fourty-percent-pop))
	(wood-amount > 1500)
=>
	(set-strategic-number sn-food-gatherer-percentage 50)
	(set-strategic-number sn-wood-gatherer-percentage 10)
	(set-strategic-number sn-gold-gatherer-percentage 35)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
(defrule
	(timer-triggered one-minute-timer)
	(food-amount < 1500)
	(wood-amount < 1500)
	(unit-type-count-total villager >= fourty-percent-pop)
=>
	(set-strategic-number sn-food-gatherer-percentage pidm-food2)
	(set-strategic-number sn-wood-gatherer-percentage pidm-wood2)
	(set-strategic-number sn-gold-gatherer-percentage pidm-gold2)
	(set-strategic-number sn-stone-gatherer-percentage pidm-stone2)
)
(defrule
	(timer-triggered one-minute-timer)
	(food-amount < 1500)
	(wood-amount < 1500)
	(unit-type-count-total villager < fourty-percent-pop)
=>
	(set-strategic-number sn-food-gatherer-percentage 47)
	(set-strategic-number sn-wood-gatherer-percentage 25)
	(set-strategic-number sn-gold-gatherer-percentage 25)
	(set-strategic-number sn-stone-gatherer-percentage 3)
)
(defrule
	(timer-triggered one-minute-timer)
	(food-amount > 1500)
	(wood-amount < 1500)
=>
	(set-strategic-number sn-food-gatherer-percentage 14)
	(set-strategic-number sn-wood-gatherer-percentage 40)
	(set-strategic-number sn-gold-gatherer-percentage 41)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
(defrule
	(timer-triggered one-minute-timer)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(food-amount > 1500)
	(wood-amount > 1500)
=>
	(set-strategic-number sn-food-gatherer-percentage pidm-food)
	(set-strategic-number sn-wood-gatherer-percentage pidm-wood)
	(set-strategic-number sn-gold-gatherer-percentage pidm-gold)
	(set-strategic-number sn-stone-gatherer-percentage pidm-stone)
)
(defrule
	(timer-triggered one-minute-timer)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(food-amount > 1500)
=>
	(set-strategic-number sn-food-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage 55)
	(set-strategic-number sn-gold-gatherer-percentage 40)
	(set-strategic-number sn-stone-gatherer-percentage 5)
)
#end-if

#load-if-not-defined HUN-CIV
(defrule
;	(strategic-number sn-current-age == dark)
	(building-type-count-total town-center >= 1)
	(unit-type-count villager <= 10)
	(up-pending-objects c: house <= 0)
	(housing-headroom < 5)
	(population-headroom >= 1)
	(wood-amount < 30)
	(population < max-civ)
=>
	(set-strategic-number sn-food-gatherer-percentage	 33)
	(set-strategic-number sn-wood-gatherer-percentage 	 67)
	(set-strategic-number sn-gold-gatherer-percentage 	  0)
	(set-strategic-number sn-stone-gatherer-percentage 	  0)
;	(set-strategic-number sn-cap-civilian-gatherers 1000)
	(up-modify-sn sn-maximum-wood-drop-distance c:max wood-distance2)
)
#end-if
(defrule
;	(strategic-number sn-current-age == dark)
	(building-type-count-total town-center >= 1)
	(unit-type-count villager <= 7)
(or	(population-headroom <= 0)
(or	(up-pending-objects c: house >= 1)
(or	(housing-headroom >= 5)
(or	(wood-amount >= 30)
	(population >= max-civ)))))
=>
	(set-strategic-number sn-food-gatherer-percentage	 96)
	(set-strategic-number sn-wood-gatherer-percentage 	  4)
	(set-strategic-number sn-gold-gatherer-percentage 	  0)
	(set-strategic-number sn-stone-gatherer-percentage 	  0)
;	(set-strategic-number sn-cap-civilian-gatherers 1000)
)

#load-if-defined DARK-AGE-END
(defrule
	(building-type-count-total mining-camp >= 1)
=>
	(set-strategic-number sn-food-gatherer-percentage  50)
	(set-strategic-number sn-gold-gatherer-percentage  12)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage  38))
#end-if
#load-if-defined FEUDAL-AGE-END
(defrule
	(up-research-status c: ri-man-at-arms >= research-pending)
=>
	(set-strategic-number sn-food-gatherer-percentage  50)
	(set-strategic-number sn-gold-gatherer-percentage  12)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage  38))
#end-if

#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
(defrule
	(current-age <= dark-age)
	(up-compare-goal custom-civ-pop >= max-civ); low pop cap
=>
;	(chat-local-to-self "Low pop cap lumberjack.")
	(set-strategic-number sn-food-gatherer-percentage	 70); 75
	(set-strategic-number sn-wood-gatherer-percentage 	 30); 25
	(set-strategic-number sn-gold-gatherer-percentage 	  0)
	(set-strategic-number sn-stone-gatherer-percentage 	  0))
;need more for later ages - also solve easiest/easy escrow age up problem
(defrule
	(current-age >= feudal-age); test
	(up-compare-goal custom-civ-pop >= max-civ); low pop cap
=>
	(set-strategic-number sn-food-gatherer-percentage	 48)
	(set-strategic-number sn-wood-gatherer-percentage 	 35)
	(set-strategic-number sn-gold-gatherer-percentage 	 17)
	(set-strategic-number sn-stone-gatherer-percentage 	  0))
(defrule
	(current-age >= castle-age); test
	(up-compare-goal custom-civ-pop >= max-civ); low pop cap
=>
	(set-strategic-number sn-food-gatherer-percentage	 48)
	(set-strategic-number sn-wood-gatherer-percentage 	 35)
	(set-strategic-number sn-gold-gatherer-percentage 	 17)
	(set-strategic-number sn-stone-gatherer-percentage 	  0))
(defrule
	(current-age >= imperial-age); test
	(up-compare-goal custom-civ-pop >= max-civ); low pop cap
	(building-type-count-total barracks < 1); test
=>
	(set-strategic-number sn-food-gatherer-percentage	 45)
	(set-strategic-number sn-wood-gatherer-percentage 	 33)
	(set-strategic-number sn-gold-gatherer-percentage 	 16)
	(set-strategic-number sn-stone-gatherer-percentage 	  6))
#end-if
#end-if


(defrule
	(up-compare-goal trade-units >= 5)
=>
	(up-modify-goal math-goal g:= trade-units)
	(up-modify-goal math-goal c:/ 10)
	(up-modify-goal math-goal c:max 0)
	(up-modify-goal math-goal c:min 10)
	(up-modify-goal math-goal s:min sn-gold-gatherer-percentage)
	(up-modify-sn sn-gold-modifier-percentage g:- math-goal)
;	(up-chat-data-to-self "Reducing gold-gp by %d." g: math-goal)
	(up-modify-goal math-goal2 g:= math-goal)
	(up-modify-goal math-goal c:z/ 2)
	(up-modify-sn sn-wood-modifier-percentage g:+ math-goal)
	(up-modify-sn sn-food-modifier-percentage g:+ math-goal)
	(up-modify-goal math-goal2 c:mod 2)
	(up-modify-sn sn-food-modifier-percentage g:+ math-goal2))

(defrule
(or	(up-research-status c: castle-age != research-available)
(or	(building-type-count-total market >= 1)
	(current-age-time < 120)))
=>
	(up-jump-rule 2))
(defrule
	(gold-amount >= 210); 225; 213
	(up-compare-goal strategy-goal >= rush)
=>
	(up-get-fact gold-amount 0 math-goal)
	(up-modify-goal math-goal c:- 200)
	(up-modify-goal math-goal c:/ 20); 50; 25
	(up-modify-goal math-goal c:max 0)
	(up-modify-goal math-goal c:min 12)
	(up-modify-goal math-goal s:min sn-gold-gatherer-percentage)
	(up-modify-sn sn-gold-modifier-percentage g:- math-goal)
;	(up-chat-data-to-self "Reducing gold-gp by %d." g: math-goal)
	(up-modify-goal math-goal2 g:= math-goal)
	(up-modify-goal math-goal c:z/ 2)
	(up-modify-sn sn-food-modifier-percentage g:+ math-goal); wood
	(up-modify-sn sn-food-modifier-percentage g:+ math-goal)
	(up-modify-goal math-goal2 c:mod 2)
;	(up-chat-data-to-self "wood-test: %d." g: math-goal2)
	(up-modify-sn sn-wood-modifier-percentage g:+ math-goal2)); food
(defrule
	(gold-amount >= 275); 225; 375
	(up-compare-goal strategy-goal <= flush)
=>
	(up-get-fact gold-amount 0 math-goal)
	(up-modify-goal math-goal c:- 275); 200; 375
	(up-modify-goal math-goal c:/ 25); 50
	(up-modify-goal math-goal c:max 0)
	(up-modify-goal math-goal c:min 12)
	(up-modify-goal math-goal s:min sn-gold-gatherer-percentage)
	(up-modify-sn sn-gold-modifier-percentage g:- math-goal)
;	(up-chat-data-to-self "Reducing gold-gp by %d." g: math-goal)
	(up-modify-goal math-goal2 g:= math-goal)
	(up-modify-goal math-goal c:z/ 2)
	(up-modify-sn sn-food-modifier-percentage g:+ math-goal); wood
	(up-modify-sn sn-food-modifier-percentage g:+ math-goal)
	(up-modify-goal math-goal2 c:mod 2)
;	(up-chat-data-to-self "wood-test: %d." g: math-goal2)
	(up-modify-sn sn-wood-modifier-percentage g:+ math-goal2)); food ; end mini jump

(defrule
	(strategic-number sn-current-age >= df-transit)
	(game-time < 2400);	(strategic-number sn-current-age <= fc-transit); == df-transit)
(or	(game-time < 1800)
	(strategic-number sn-current-age <= ci-transit))
	(unit-type-count fishing-ship >= 1); 4
	(building-type-count dock >= 1)
(or	(cc-players-unit-type-count 0 shore-fish >= shorefishreq2)
	(cc-players-unit-type-count 0 sea-fish >= deepfishreq2))
; hm	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed); islands
;	(strategic-number sn-food-gatherer-percentage >= 17); 12
=>
	(up-get-fact unit-type-count fishing-ship math-goal)
	(up-modify-goal math-goal c:- 1)
	(up-modify-goal math-goal c:max 0)
	(up-modify-goal math-goal c:min 12)
	(up-modify-goal math-goal s:min sn-food-gatherer-percentage)
;	(up-chat-data-to-self "Food to wood: %d." g: math-goal)
;	(set-strategic-number sn-food-modifier-percentage 0)
;	(set-strategic-number sn-wood-modifier-percentage 0)
	(up-modify-sn sn-food-modifier-percentage g:- math-goal)
	(up-modify-sn sn-wood-modifier-percentage g:+ math-goal))
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(players-building-type-count any-enemy watch-tower > 4)
	(game-time < 1800)
	(current-age >= castle-age)
	(not (player-in-game any-ally))
	(strategic-number sn-gold-gatherer-percentage >= 20)
=>
	(up-modify-sn sn-wood-modifier-percentage c:+ 5); 10
	(up-modify-sn sn-gold-modifier-percentage c:- 5)
)
(defrule
	(strategic-number sn-current-age >= ci-transit)
	(stone-amount < castle-stone)
	(building-type-count-total castle <= 0)
(or	(or	(goal enemy-fortifications-goal 1)
		(players-building-type-count any-enemy castle > 0))
	(or	(population-cap < 100)
		(civ-selected magyar)))
	(strategic-number sn-food-gatherer-percentage >= 3)
	(strategic-number sn-wood-gatherer-percentage >= 3)
	(strategic-number sn-stone-gatherer-percentage <= 0)
=>
	(up-modify-sn sn-food-modifier-percentage c:- 3)
	(up-modify-sn sn-wood-modifier-percentage c:- 3)
	(up-modify-sn sn-stone-modifier-percentage c:+ 6)
)
(defrule
	(strategic-number sn-current-age == feudal)
	(goal strategy-goal sling)
	(players-current-age any-ally >= imperial-age)
	(players-building-type-count every-ally castle < 1)
	(strategic-number sn-food-gatherer-percentage >= 4)
=>
	(up-modify-sn sn-food-modifier-percentage c:- 4)
	(up-modify-sn sn-stone-modifier-percentage c:+ 4); 7
)
;(defrule
; for	(current-age == castle-age)
; now	(research-available imperial-age)
;	(food-amount >= 700)
;	(gold-amount < 200)
;	(strategic-number sn-food-gatherer-percentage >= 5)
;=>
;	(up-modify-sn sn-food-modifier-percentage c:- 5)
;	(up-modify-sn sn-gold-modifier-percentage c:+ 5); 7
;)

(defrule
(or	(strategic-number sn-wood-modifier-percentage != 0)
(or	(strategic-number sn-food-modifier-percentage != 0)
(or	(strategic-number sn-gold-modifier-percentage != 0)
	(strategic-number sn-stone-modifier-percentage != 0))))
=>
	(up-modify-sn sn-wood-gatherer-percentage s:+ sn-wood-modifier-percentage)
	(up-modify-sn sn-food-gatherer-percentage s:+ sn-food-modifier-percentage)
	(up-modify-sn sn-gold-gatherer-percentage s:+ sn-gold-modifier-percentage)
	(up-modify-sn sn-stone-gatherer-percentage s:+ sn-stone-modifier-percentage)
	(set-strategic-number sn-wood-modifier-percentage 0)
	(set-strategic-number sn-food-modifier-percentage 0)
	(set-strategic-number sn-gold-modifier-percentage 0)
	(set-strategic-number sn-stone-modifier-percentage 0))




; ********** ATTACK RULES **********

(defrule
	(strategic-number sn-maximum-town-size < 38)
	(enemy-buildings-in-town)
	(up-compare-goal forward-threat-goal != 1)
=>
	(set-strategic-number sn-maximum-hunt-drop-distance 6); disable hunting and prevent villagers from running into enemy fortifications
	(set-goal forward-threat-goal 1)
	(chat-to-player my-player-number "Enemy forward buildings detected."))
(defrule
	(strategic-number sn-maximum-town-size >= 38)
	(not (enemy-buildings-in-town))
	(goal forward-threat-goal 1)
=>
	(set-goal forward-threat-goal -1)
	(chat-to-player my-player-number "The forward threat has been eliminated."))
(defrule
	(enemy-buildings-in-town)
	(strategic-number sn-maximum-town-size < 30)
	(strategic-number sn-number-civilian-militia != 9)
	(players-building-type-count target-player watch-tower >= 1)
	(players-building-type-count target-player watch-tower < 3)
	(cc-players-unit-type-count target-player watch-tower-arrow > 0)
	(players-building-type-count target-player bombard-tower <= 0)
	(players-building-type-count target-player castle <= 0)
	(players-building-type-count target-player palisade-wall <= 0)
	(players-building-type-count target-player stone-wall-line <= 0)
	(players-building-type-count target-player gate <= 0)
	(unit-type-count-total 211 < 7)
	(unit-type-count-total 224 < 7)
	(military-population < 8)
	(players-military-population target-player < 3)
=>
	(set-strategic-number sn-number-civilian-militia 9)
	(up-jump-rule 2))
(defrule
	(enemy-buildings-in-town)
	(strategic-number sn-maximum-town-size < 30)
	(strategic-number sn-number-civilian-militia != 9)
	(players-building-type-count target-player watch-tower <= 0)
	(players-building-type-count target-player bombard-tower <= 0)
	(players-building-type-count target-player castle <= 0)
	(players-building-type-count target-player palisade-wall >= 1); come on.. :p
	(unit-type-count-total 211 < 2)
	(unit-type-count-total 224 < 2)
	(military-population < 6)
	(players-military-population target-player < 2); don't do this against drush
=>
	(set-strategic-number sn-number-civilian-militia 9)
	(up-jump-rule 1))
(defrule
	(strategic-number sn-number-civilian-militia == 9)
(or	(players-current-age any-enemy >= feudal-age); test
	(players-military-population any-enemy >= 2))
=>
	(set-strategic-number sn-number-civilian-militia 0))

#load-if-defined SPANISH-CIV
(defrule
	(strategic-number sn-number-civilian-militia <= 0)
	(unit-type-count-total villager > 10)
	(unit-type-count-total 211 < 7)
	(unit-type-count-total 224 < 7)
	(research-completed my-unique-research)
=>
	(set-strategic-number sn-allow-civilian-defense 2)
	(set-strategic-number sn-number-civilian-militia 10))
#end-if
(defrule
	(strategic-number sn-number-civilian-militia >= 1)
(or	(unit-type-count-total villager < 10)
(or	(unit-type-count-total 211 >= 7)
	(unit-type-count-total 224 >= 7)))
;	(research-completed my-unique-research)
=>
	(set-strategic-number sn-allow-civilian-defense 1)
	(set-strategic-number sn-number-civilian-militia 0))

; Retreat Rules

(defrule
(or	(goal team-coordination-goal 1)
	(not	(enemy-buildings-in-town)))
	(game-time > 1080); not when rushing in DM
	(unit-type-count trebuchet-set <= 0)
	(unit-type-count battering-ram-line < 2)
	(unit-type-count bombard-cannon < 4)
	(unit-type-count cannon-galleon-line < 4)
(or	(cc-players-unit-type-count target-player castle-arrow > 0)
	(cc-players-unit-type-count target-player castle-arrow-chemistry > 0))
	(strategic-number sn-military-level <= 2)
	(population < del-civ-pop)
=>
	(set-goal retreat-now-goal 1)
	(set-goal attack-status-goal retreat)
	(set-goal attack-goal 0)
	(enable-timer attack-timer 60)
	(set-goal reset 1); to avoid reset-spamming
;	(chat-to-player my-player-number "Retreating from enemy castle.")
)
(defrule
(or	(goal team-coordination-goal 1)
	(not	(enemy-buildings-in-town)))
	(current-age == feudal-age)
	(goal threat-source tower-class)
	(cc-players-unit-type-count target-player watch-tower-arrow > 0)
	(unit-type-count trebuchet-set <= 0)
	(unit-type-count battering-ram-line <= 0)
	(unit-type-count bombard-cannon <= 0)
	(strategic-number sn-military-level <= 0)
	(population < eighty-five-percent-pop)
=>
;	(chat-to-player my-player-number "Retreating from enemy watch-tower.")
	(set-goal retreat-now-goal 1)
	(set-goal attack-status-goal retreat)
	(set-goal attack-goal 0)
	(set-goal reset 1); to avoid reset-spamming
	(enable-timer attack-timer 10)
)

(defrule
(or	(goal team-coordination-goal 1)
	(not	(enemy-buildings-in-town)))
	(goal threat-source tower-class)
	(cc-players-unit-type-count target-player watch-tower-arrow > 0)
	(unit-type-count trebuchet-set <= 0)
	(unit-type-count battering-ram-line <= 0)
	(unit-type-count bombard-cannon <= 0)
	(timer-triggered attack-timer)
(or	(unit-type-count ranged-unit-class > 4)
	(unit-type-count cavalry-archer-class > 4))
	(unit-type-count knight-line < 6)
	(strategic-number sn-military-level <= 0)
	(population < eighty-five-percent-pop)
=>
	(set-goal retreat-now-goal 1)
	(set-goal attack-status-goal retreat)
	(set-goal attack-goal 0)
	(enable-timer attack-timer 10)
	(set-goal reset 1); to avoid reset-spamming
;	(chat-to-player my-player-number "Retreating from enemy watch-tower. 2")
)
(defrule
(or	(goal team-coordination-goal 1)
	(not	(enemy-buildings-in-town)))
	(current-age <= feudal-age); ==
(or	(cc-players-unit-type-count target-player tc-arrow > 0)
	(and	(cc-players-unit-type-count target-player castle-arrow > 0)
		(goal threat-source castle-arrow)))
	(unit-type-count trebuchet-set <= 0)
	(unit-type-count battering-ram-line <= 0)
	(unit-type-count bombard-cannon <= 0)
	(strategic-number sn-military-level <= 0)
	(population < eighty-five-percent-pop)
=>
	(set-goal retreat-now-goal 1)
	(set-goal attack-status-goal retreat); always retreat out of TC fire when flushing
	(set-goal attack-goal 0)
	(set-goal reset 1); to avoid reset-spamming
;	(chat-to-player my-player-number "Retreating from enemy town-center.")
	(enable-timer attack-timer 8)
)
(defrule
(or	(goal team-coordination-goal 1)
	(not	(enemy-buildings-in-town)))
	(current-age >= castle-age)
(or	(strategic-number sn-military-level < 2)
	(nor	(goal threat-target cavalry-unit-class)
	(or	(goal unit-goal knight)
	(or	(goal unit-goal battle-elephant)
		(goal unit-goal eagle-warrior)))))
	(strategic-number sn-military-level < 3)
	(cc-players-unit-type-count target-player tc-arrow > 0)
	(unit-type-count trebuchet-set <= 0)
	(unit-type-count battering-ram-line <= 0)
	(unit-type-count bombard-cannon <= 0)
	(strategic-number sn-military-level <= 0)
	(population < seventy-five-percent-pop)
=>
	(set-goal attack-goal 0)
	(set-goal retreat-now-goal 1)
	(enable-timer attack-timer 30)
	(set-goal reset 1); to avoid reset-spamming
;	(chat-to-player my-player-number "Retreating from enemy town-center. 2")
)
(defrule
	(goal team-coordination-goal 1)
	(game-time < 1800)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(goal threat-source monastery-class)
	(goal monk-threat-goal 1)
(nor	(up-research-status c: ri-heresy >= research-pending)
(or	(up-research-status c: ri-faith >= research-pending); hmm
(or	(unit-type-count ranged-unit-class >= 15)
(or	(unit-type-count eagle-warrior-line >= 3); all tech?
	(unit-type-count scout-cavalry-line >= 3)))))
	(strategic-number sn-military-level <= 0)
=>
	(set-goal retreat-now-goal 1)
	(set-goal attack-status-goal retreat)
	(set-goal attack-goal 0)
	(enable-timer attack-timer 60)
;	(chat-to-player my-player-number "Retreating from enemy monks.")
)
(defrule
(or	(goal team-coordination-goal 1)
	(not	(enemy-buildings-in-town)))
	(game-time > 600); not when rushing in PIDM
	(goal attack-goal 0)
	(unit-type-count trebuchet-set <= 0)
	(unit-type-count battering-ram-line <= 0)
	(unit-type-count bombard-cannon <= 0)
	(cc-players-unit-type-count target-player tc-arrow > 0)
	(players-military-population target-player > 5)
	(up-compare-goal under-attack-goal != 1)
	(timer-triggered attack-timer)
	(strategic-number sn-military-level <= 0)
	(population < eighty-five-percent-pop)
=>
	(set-goal retreat-now-goal 1)
	(enable-timer attack-timer 30)
	(set-goal reset 1); to avoid reset-spamming
;	(chat-to-player my-player-number "Retreating from enemy town-center. 3")
)
(defrule
	(cc-players-unit-type-count target-player tc-arrow == 0)
	(current-age == feudal-age)
	(goal strategy-goal flush)
	(timer-triggered retreat-timer); test
	(goal retreat-now-goal 0); test
	(goal reset 1); to avoid spamming
	(strategic-number sn-military-level > 1)
=>
	(up-reset-unit c: -1)
	(set-goal reset 0)
	(enable-timer attack-timer 3)
;	(chat-to-player my-player-number "Reset: Out of range.")
)
(defrule
	(strategic-number sn-military-level < 3)
	(goal enemy-goal flush)
	(goal strategy-goal flush)
	(military-population < 14)
	(players-military-population target-player > 5)
=>
	(up-jump-rule 1)
)
(defrule
	(strategic-number sn-military-level >= 2); military superiority so
(or	(strategic-number sn-current-age != fc-transit)
	(strategic-number sn-military-level >= 3))
=>
	(set-goal attack-goal 1); attack might be an idea, check other conditions
)

#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
(defrule
	(timer-triggered spread-military-timer)
(or	(up-compare-goal custom-civ-pop >= max-civ)
	(military-population >= max-civ))
	(current-age-time < 300); test
=>
	(set-goal attack-goal 1); attack might be an idea, check other conditions
)
#end-if
#end-if

(defrule
	(population > max-civ)
	(strategic-number sn-military-level >= 2)
	(current-age >= imperial-age)
(or	(unit-type-count bombard-cannon >= 6)
(or	(unit-type-count battering-ram-line >= 6)
(or	(unit-type-count trebuchet-set >= 3)
	(strategic-number sn-military-level >= 3))))
	(players-current-age target-player <= castle-age)
	(up-compare-goal attack-goal < 1)
=>
	(set-goal attack-goal 1); attack might be an idea, check other conditions
;	(chat-local-to-self "Attack now! They're still not in the imperial-age.")
)
(defrule
	(population > max-civ)
	(strategic-number sn-military-level >= 2)
	(current-age >= castle-age)
(or	(unit-type-count bombard-cannon >= 3)
(or	(unit-type-count battering-ram-line >= 3)
(or	(unit-type-count trebuchet-set >= 1)
	(strategic-number sn-military-level >= 3))))
	(players-current-age target-player <= feudal-age)
	(up-compare-goal attack-goal < 1)
=>
	(set-goal attack-goal 1); attack might be an idea, check other conditions
;	(chat-local-to-self "Attack now! They're still not in the castle-age.")
)
(defrule
	(population > max-civ)
	(strategic-number sn-military-level >= 2)
	(current-age >= feudal-age)
(or	(unit-type-count bombard-cannon >= 1)
(or	(unit-type-count battering-ram-line >= 1)
(or	(unit-type-count trebuchet-set >= 1)
	(strategic-number sn-military-level >= 3))))
	(players-current-age target-player <= dark-age)
	(up-compare-goal attack-goal < 1)
=>
	(set-goal attack-goal 1); attack might be an idea, check other conditions
;	(chat-local-to-self "Attack now! They're still not in the feudal-age.")
)

#load-if-not-defined DEATH-MATCH
(defrule
	(strategic-number sn-military-level >= 1); more aggressive in team play
	(unit-type-count cavalry-unit-class > 5)
	(current-age >= castle-age)
	(current-age-time >= 240)
	(player-in-game any-ally)
=>
	(set-goal attack-goal 1)
)
(defrule
	(current-age == castle-age)
	(military-population > 16)
	(strategic-number sn-resource-control < 2)
(or	(strategic-number sn-military-level >= military-level-flush)
	(and	(strategic-number sn-military-level >= military-level-flush-aggressive)
		(current-age-time < 300)))
	(goal forward-threat-goal -1)
	(strategic-number sn-cavalry-threat == 0)
	(goal strategy-goal flush)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(players-building-type-count focus-player castle == 0); not if enemy has a castle
=>
	(set-goal attack-goal 1)
;	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
)
(defrule
	(unit-type-count ranged-unit-class > 19)
	(strategic-number sn-military-level >= 0)
	(players-current-age focus-player == feudal-age)
	(goal strategy-goal rush)
(or	(goal control-goal aggressive-rush); xbow or ca with bodkin should beat feudal age stuff
	(civ-selected briton))
	(up-research-status c: ri-bodkin-arrow >= research-pending)
=>
	(set-goal attack-goal 1)
;	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
)
(defrule
	(game-time < 1620)
	(goal strategy-goal rush)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
(or	(goal enemy-goal skirmisher)
(or	(strategic-number sn-archer-threat > 1)
	(players-unit-type-count focus-player skirmisher-line > 7)))
(or	(or	(up-research-status c: ri-chain-barding >= research-pending)
		(civ-selected saracen))
	(strategic-number sn-military-level >= 1))
	(strategic-number sn-military-level >= 0)
(or	(unit-type-count knight-line > 12)
	(unit-type-count battle-elephant-line > 9))
=>
	(set-goal attack-goal 1)
)
(defrule
	(game-time < 1620)
	(goal attack-goal 0)
	(goal strategy-goal rush)
(or	(goal unit-goal knight)
	(goal unit-goal battle-elephant))
	(up-research-status c: ri-bloodlines >= research-pending)
(or	(up-research-status c: ri-chain-barding >= research-pending)
	(civ-selected saracen))
	(food-amount < 60)
	(gold-amount < 80)
(or	(unit-type-count knight-line > 8)
	(unit-type-count battle-elephant-line > 6))
	(players-unit-type-count focus-player camel-line < 8)
	(players-unit-type-count focus-player knight-line < 8)
	(goal monk-threat-goal 0)
=>
	(set-goal attack-goal 1)
;	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
)
(defrule
	(game-time < 1800)
	(goal attack-goal 0)
	(goal unit-goal eagle-warrior)
(or	(or	(goal anti-cavalry-threat-goal 1)
		(players-unit-type-count focus-player skirmisher-line > 7))
	(and	(players-current-age focus-player == feudal-age)
		(players-unit-type-count focus-player militiaman-line < 1)))
	(strategic-number sn-military-level >= 0)
	(unit-type-count eagle-warrior-line > 20)
=>
	(set-goal attack-goal 1)
;	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
)
(defrule
	(game-time < 1680)
	(goal attack-goal 0)
	(goal strategy-goal flush)
	(goal enemy-goal skirmisher); vs enemy that trys to stall flushes with tons of trash to keep military level high
	(strategic-number sn-military-level >= 0)
	(unit-type-count knight-line >= 2)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
	(players-building-type-count focus-player castle == 0); not in 1v1 if enemy has a castle
=>
	(set-goal attack-goal 1)
;	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
)
(defrule
	(goal attack-goal 0)
	(goal unit-goal monk)
(or	(unit-type-count trebuchet-set >= 1)
	(unit-type-count bombard-cannon >= 3))
	(up-research-status c: ri-block-printing != research-available)
	(up-research-status c: ri-theocracy != research-available)
	(up-research-status c: ri-illumination != research-available)
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(unit-type-count-total monastery-class > 20)
	(goal anti-monk-threat-goal 0)
=>
	(set-goal attack-goal 1)
;	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
)
(defrule
	(goal attack-goal 0)
	(goal unit-goal scorpion)
	(goal strategy-goal rush)
(or	(unit-type-count trebuchet-set >= 1)
(or	(unit-type-count battering-ram-line >= 2)
	(unit-type-count bombard-cannon >= 4)))
	(unit-type-count scorpion-line > 20)
	(strategic-number sn-military-level >= 0)
=>
	(set-goal attack-goal 1)
;	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
)
(defrule
	(goal attack-goal 0)
	(players-military-population every-enemy < 3)
(or
;	(and
		(or	(unit-type-count scout-cavalry > 2)
			(and	(goal strategy-goal flush)
				(military-population > 8)))
;			(up-player-distance target-player < 70))
	(unit-type-count cavalry-unit-class > 3))
=>
	(set-goal attack-goal 1)
)
(defrule
	(goal attack-goal 0)
	(players-building-count focus-player > 0)
	(players-building-type-count focus-player watch-tower < 2)
	(players-building-type-count focus-player castle == 0)
	(players-military-population focus-player < 2)
	(goal strategy-goal flush)
	(military-population > 6)
=>
;	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
	(set-goal attack-goal 1)
)
(defrule
	(building-type-count stable == 1)
	(building-type-count town-center == 1)
	(military-population >= 70)
	(goal attack-goal 0)
	(goal unit-goal cavalry-archer)
	(up-research-status c: ri-thumb-ring >= research-pending)
	(strategic-number sn-current-age >= castle);high military
	(players-current-age focus-player == castle-age); while enemy is in castle-age
=>
	(set-goal attack-goal 1)
;	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
)
#end-if 
(defrule
	(goal attack-goal 0)
	(population > max-civ-pop)
	(strategic-number sn-current-age >= ci-transit); advancing to or already in imperial age with nearlyfull pop
	(players-current-age every-enemy == castle-age); while enemy is in castle-age
	(strategic-number sn-resource-control < 2)
	(strategic-number sn-military-level >= 0)
	(players-building-type-count focus-player castle < 2)
=>
	(set-goal attack-goal 1); attack and try to hold him in castle age
)
(defrule
	(goal strategy-goal flush)
	(players-current-age focus-player == feudal-age)
	(strategic-number sn-military-level >= 0)
	(up-research-status c: ri-bodkin-arrow >= research-pending)
(or	(up-research-status c: ri-crossbow >= research-pending)
	(up-compare-goal ranged-unit-type-goal != archer))
(or	(unit-type-count militiaman-line <= 6)
	(up-research-status c: ri-long-swordsman >= research-pending))
=>
	(set-goal attack-goal 1)
;	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
)
(defrule
	(goal strategy-goal flush)
	(current-age == castle-age)
	(players-current-age focus-player == feudal-age)
	(strategic-number sn-military-level >= 0)
	(nor (research-available ri-bodkin-arrow)
	(research-available ri-crossbow))
	(goal ranged-unit-type-goal archer)
	(military-population > 40)
=>
	(set-goal attack-goal 1)
;	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
)
(defrule
	(current-age-time > 240)
	(current-age >= imperial-age)
	(players-current-age target-player <= castle-age)
	(strategic-number sn-military-level >= 1)
	(military-population > 40)
=>
	(set-goal attack-goal 1)
)
(defrule
	(population >= max-pop)
	(strategic-number sn-military-level >= 1)
	(strategic-number sn-current-age >= imperial)
	(current-age-time > 180)
	(goal escrow-purpose-goal 0)
(or	(research-completed ri-bracer)
(or	(research-completed ri-plate-mail)
(or	(research-completed ri-plate-barding)
(or	(research-completed ri-blast-furnace)
	(research-completed ri-ring-archer-armor)))))
=>
	(set-goal attack-goal 1)
)
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
(defrule
(or	(population >= del-civ-pop)
	(strategic-number sn-resource-control == 2)); holding back resources due to the difficulty level
	(strategic-number sn-military-level >= 1); 2
(or	(strategic-number sn-current-age != fc-transit)
	(strategic-number sn-military-level >= 2)); 3
=>
	(set-goal attack-goal 1); attack might be an idea, check other conditions
)
#end-if
#end-if
#end-if
#load-if-not-defined DIFFICULTY-EASIEST
#load-if-not-defined DIFFICULTY-EASY;
(defrule
	(goal enemy-fortifications-goal 1)
	(unit-type-count trebuchet-set < 1)
	(unit-type-count bombard-cannon < 2)
	(unit-type-count battering-ram-line < 2)
	(unit-type-count mangonel-line < 10)
	(military-population < 120); test
	(gold-amount < 8000); test
(nand	(population >= max-civ-pop)
	(or	(strategic-number sn-military-level >= 4); disabled for now
	(or	(up-timer-status help-ally-timer == timer-running)
		(goal assistance yes)))); for now
(nand	(population >= max-pop)
	(population-cap > 200)); >=
=>
	(set-goal attack-goal 0)
;	(chat-local-to-self "no attack vs enemy fortifications")
)
#end-if
#end-if
#load-if-not-defined FEUDAL-AGE-END
(defrule
	(goal attack-goal 1)
	(goal strategy-goal flush)
	(current-age == feudal-age)
(or	(or	(and 	(players-current-age focus-player == castle-age)
			(players-military-population focus-player > 10))
		(strategic-number sn-resource-control == 2))
	(players-military-population focus-player > 16))
(nand	(population >= del-civ-pop)
	(strategic-number sn-military-level >= 3)); test
=>
	(set-goal attack-goal 0); better go castle age and attack then
)
(defrule
	(goal attack-goal 1)
(nand	(population >= del-civ-pop)
	(strategic-number sn-military-level >= 3)); test
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(players-building-type-count focus-player watch-tower > 0)
(or	(strategic-number sn-military-level < 3)
	(and	(players-military-population focus-player > 9)
		(players-current-age focus-player >= castle-age)))
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(strategic-number sn-military-level < 3); test
	(goal strategy-goal flush)
	(current-age == feudal-age)
	(not (goal unit-goal militiaman-line))
	(goal enemy-goal eagle-warrior)
	(players-military-population focus-player > 9)
=>
	(set-goal attack-goal 0)
)
(defrule
	(players-current-age focus-player > feudal-age)
	(goal attack-goal 1)
(or	(and	(goal strategy-goal flush)
		(current-age == feudal-age))
	(and	(or	(goal unit-goal eagle-warrior)
			(goal unit-goal archer))
	(unit-type-count spearman-line < 10)))
	(strategic-number sn-cavalry-threat >= 1); enemy cavalry found
	(unit-type-count spearman-line < 5); no anti cavalry
	(population < max-civ-pop); test
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(strategic-number sn-military-level < 3); test
	(goal strategy-goal flush)
	(current-age == feudal-age)
(or	(players-unit-type-count any-enemy knight-line >= 8)
	(goal forward-threat-goal 1))
=>
	(set-goal attack-goal 0)
)
(defrule
	(current-age == feudal-age)
	(up-compare-goal attack-goal >= 1); test
	(strategic-number sn-military-level < 3); test
	(goal strategy-goal flush)
(or	(and	(goal enemy-goal eagle-warrior)
		(unit-type-count militiaman-line < 5))
	(and	(strategic-number sn-archer-threat > 1)
		(players-building-type-count target-player watch-tower > 0)))
	(population < del-civ-pop)
=>
	(set-goal retreat-now-goal 2)
)
#end-if
(defrule
	(goal attack-goal 1)
	(strategic-number sn-military-level < 3);
	(goal strategy-goal flush)
	(current-age >= castle-age)
(or	(and	(unit-type-count spearman-line >= 6)
		(research-available ri-pikeman))
	(and	(unit-type-count militiaman-line >= 12)
		(research-available ri-long-swordsman)))
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(game-time < 1800)
	(goal monk-threat-goal 1)
	(unit-type-count eagle-warrior-line < 4)
	(unit-type-count scout-cavalry-line < 4)
(nor 	(up-research-status c: ri-heresy >= research-pending)
(or	(unit-type-count ranged-unit-class > 15)
	(goal unit-goal archer)))
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(strategic-number sn-military-level < 3);
(or	(goal unit-goal skirmisher)
(or	(and	(goal unit-goal archer)
		(strategic-number sn-cavalry-threat > 0))
(or	(goal unit-goal my-unique-unit-line)
	(goal unit-goal mix))))
	(goal strategy-goal rush)
(or	(population < max-civ-pop); test
	(current-age < imperial-age))
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(strategic-number sn-military-level < 3);
	(up-research-status c: ri-bodkin-arrow < research-pending)
(or	(or	(goal unit-goal skirmisher)
		(goal unit-goal archer))
	(or	(goal unit-goal my-unique-unit-line)
		(goal unit-goal mix)))
	(current-age >= castle-age)
	(players-current-age target-player >= castle-age)
	(unit-type-count ranged-unit-class > 12)
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(strategic-number sn-military-level < 3);
	(goal ranged-unit-type-goal archer)
	(current-age >= castle-age)
	(players-current-age target-player >= castle-age)
	(unit-type-count archer > 10)
	(up-research-status c: ri-crossbow < research-pending)
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(strategic-number sn-military-level < 3);
(or	(goal unit-goal skirmisher)
	(goal unit-goal mix))
(or	(goal enemy-goal skirmisher)
	(unit-type-count skirmisher-line > 9))
(or	(research-available ri-elite-skirmisher)
	(research-available ri-bodkin-arrow))
	(players-current-age target-player >= castle-age)
=>
	(set-goal attack-goal 0)
)
#load-if-not-defined CASTLE-AGE-END
(defrule
	(goal attack-goal 1)
	(strategic-number sn-military-level < 3);
(or	(strategic-number sn-resource-control == ri-elite-eagle-warrior)
(or	(goal strategy-goal fast-imp)
	(goal strategy-goal boom)))
(or	(current-age < imperial-age)
	(current-age-time < 120))
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(unit-type-count-total monastery-class >= 30)
(or	(and	(current-age < imperial-age)
		(strategic-number sn-current-age < imperial))
(or	(research-available ri-theocracy)
	(research-available ri-illumination)))
=>
	(set-goal attack-goal 0)
)
#end-if
(defrule
	(goal attack-goal 1)
(or	(players-building-count every-enemy == 0)
	(strategic-number sn-military-level < 3));
(or	(players-building-count every-enemy == 0)
(or	(and	(strategic-number sn-resource-control == ri-pikeman)
		(research-available ri-pikeman))
	(and	(goal unit-goal eagle-warrior)				
		(research-available ri-chain-mail))))
=>
	(set-goal attack-goal 0)
)
(defrule
	(goal attack-goal 1)
	(players-building-type-count focus-player castle < 3)
(or 	(and	(or	(unit-type-count battering-ram-line >= 2)
			(or	(unit-type-count trebuchet-set >= 1)
				(unit-type-count bombard-cannon >= 2)))
		(military-population >= 50))
	(players-building-type-count focus-player castle == 0))
	(goal enemy-fortifications-goal -1)
=>
	(set-goal attack-goal 2)
;	(chat-local-to-self "military advantage attack")
)
#load-if-defined POST-IMPERIAL-AGE-START
(defrule
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(population > seventy-five-percent-pop)
	(players-building-count any-enemy > 0)
	(unit-type-count paladin > 30)
	(game-time < 900)
=>
	(set-goal attack-goal 2)
)
#end-if
(defrule
	(goal attack-goal 1)
(or	(unit-type-count battering-ram-line >= 2)
(or	(unit-type-count trebuchet-set >= 1)
	(unit-type-count bombard-cannon >= 3)))
	(players-building-type-count focus-player castle == 1)
	(strategic-number sn-military-level > 1)
	(goal enemy-fortifications-goal -1)
=>
	(set-goal attack-goal 2)
;	(chat-local-to-self "military advantage attack2")
)
(defrule
	(goal attack-goal 1)
(or	(unit-type-count battering-ram-line >= 1)
(or	(unit-type-count trebuchet-set >= 1)
	(unit-type-count bombard-cannon >= 2)))
	(players-building-type-count focus-player castle < 2)
	(strategic-number sn-military-level > 1)
(or	(unit-type-count cavalry-unit-class > 5)
	(strategic-number sn-military-level > 2))
(nand	(or	(goal enemy-fortifications-goal 1)
		(players-building-type-count focus-player stone-wall-line > 10))
	(unit-type-count trebuchet-set == 0))
=>
	(set-goal attack-goal 2)
)
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
(defrule
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(current-age-time > 150)
	(population > sixty-percent-pop)
	(strategic-number sn-military-level >= 0)
(or	(unit-type-count battering-ram-line >= 1)
(or	(unit-type-count trebuchet-set >= 1)
	(unit-type-count bombard-cannon >= 1)))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); not on islands
=>
	(set-goal attack-goal 2)
)
#end-if
#end-if
#end-if
(defrule
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(population >= seventy-five-percent-pop)
	(players-building-count any-enemy > 0)
	(up-research-status c: ri-elite-eagle-warrior >= research-pending)
	(players-current-age every-enemy <= castle-age)
	(goal enemy-fortifications-goal -1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); not on islands
=>
	(set-goal attack-goal 2)
)
(defrule
	(strategic-number sn-current-age >= imperial)
;	(current-age >= imperial-age)
	(current-age-time > 120)
	(up-research-status c: imperial-age != research-pending)
	(population >= del-civ-pop)
	(players-building-count any-enemy > 0)
(or	(unit-type-count battering-ram-line >= 3)
(or	(unit-type-count trebuchet-set >= 1)
	(unit-type-count bombard-cannon >= 4)))
	(up-research-status c: ri-paladin != research-pending)
	(goal enemy-fortifications-goal -1)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); not on islands
=>
	(set-goal attack-goal 2)
;	(chat-local-to-self "High pop attack.")
)
(defrule
	(strategic-number sn-current-age >= imperial)
	(population >= del-civ-pop)
;	(current-age >= imperial-age)
	(current-age-time > 120)
	(up-research-status c: imperial-age != research-pending)
(or	(unit-type-count battering-ram-line >= 3)
(or	(unit-type-count trebuchet-set >= 1)
	(unit-type-count bombard-cannon >= 4)))
	(players-building-count any-enemy > 0)
(or	(and	(unit-type-count-total 579 < 1) ;Male gold miner
		(unit-type-count-total 581 < 1)) ;female gold miner
	(unit-type-count trebuchet-set >= 2))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands); not on islands
=>
	(set-goal attack-goal 2)
;	(chat-local-to-self "High pop attack. 2")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(population >= del-civ-pop)
;	(goal enemy-fortifications-goal 1); enemy fortifications
(or	(and	(unit-type-count trebuchet-set < 1); no trebs, but
		(and	(building-type-count castle == 0); no castle
			(dropsite-min-distance stone > 10))); no stone available
	(starting-age == post-imperial-age))
(or	(population >= max-pop)
(or	(unit-type-count battering-ram-line >= 5)
	(unit-type-count bombard-cannon >= 7)))
(or	(unit-type-count battering-ram-line >= 3); so still attack if we have rams to prevent idling
	(unit-type-count bombard-cannon >= 4))
=>
	(set-goal attack-goal 2)
;	(chat-local-to-self "High pop attack. 3")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(population >= max-pop)
	(strategic-number sn-current-age >= imperial)
	(current-age-time > 120)
	(up-research-status c: imperial-age != research-pending)
(or	(wood-amount >= 3000)
(or	(food-amount >= 3000)
(or	(gold-amount >= 3000)
	(and	(wood-amount >= 1500)
		(and	(food-amount >= 1500)
			(gold-amount >= 1500))))))
;(or	(players-population target-player < max-pop)
;	(strategic-number sn-military-level >= 0))
=>
	(set-goal attack-goal 2)
;	(chat-local-to-self "High pop attack. 4")
)
(defrule
	(goal attack-goal 0)
(or	(population >= del-civ-pop)
(or	(unit-type-count trebuchet-set >= 2)
(or	(unit-type-count bombard-cannon >= 5)
	(unit-type-count battering-ram-line >= 4))))
(or	(players-building-type-count any-enemy wonder > 0)
	(enemy-captured-relics))
=>
	(set-goal attack-goal 2)
;	(chat-local-to-self "Win-condition attack."); also got this elswhere
)
#load-if-defined FOR-DEBUGGING
(defrule
	(up-compare-goal attack-goal != 0)
(or	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(and	(or	(dropsite-min-distance wood > 20)
			(cc-players-unit-type-count 0 tree-class < 25))
		(or	(population < del-civ-pop)
			(unit-type-count-total siege-unit-class < 3))))
=>
	(set-goal attack-goal 0)
	(chat-local-to-self "No attack - low wood/islands.")
)
#end-if
(defrule
	(up-compare-goal attack-goal != 0)
	(military-population <= 1)
	(population < max-civ)
=>
	(set-goal attack-goal 0)
)
#load-if-not-defined DEFEND-WONDER
#load-if-defined DIFFICULTY-EASIEST

(defrule
;	(current-age >= imperial-age)
	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 1000); 100 years left
(or	(players-building-type-count any-enemy wonder > 0)
(or	(players-building-type-count any-enemy 826 > 0)
	(enemy-captured-relics)))
(or	(up-compare-goal victory-time < 600)
(or	(strategic-number sn-military-level >= 1)
	(and	(up-compare-goal victory-time < 800)
		(strategic-number sn-military-level >= 0))))
=>
	(up-jump-rule 2))
(defrule
	(up-compare-goal attack-goal != 0)
	(player-in-game any-human-enemy); test
; test	(population < max-pop); attack at some point
(or	(game-time < 1200); 600
(or	(and	(strategic-number sn-military-level >= 3)
		(game-time < 4200)); 4800
(or	(and	(strategic-number sn-military-level >= 2)
		(game-time < 3600)); 3900
	(and	(strategic-number sn-military-level >= 1)
		(game-time < 3000)))))
=>
	(set-goal attack-goal 0)
;	(chat-local-to-self "Wait longer with attacking on this difficulty level.")
)
#load-if-not-defined DARK-AGE-END
#load-if-not-defined FEUDAL-AGE-END
#load-if-not-defined CASTLE-AGE-END
(defrule
	(up-compare-goal attack-goal != 0)
	(player-in-game any-human-enemy); test
(nand	(population >= del-civ-pop); attack at some point
	(players-current-age-time target-player >= 1200))
; test	(strategic-number sn-military-level >= 0); 1
	(player-in-game target-player)
	(stance-toward target-player enemy)
(or	(players-current-age target-player <= castle-age)
	(players-current-age-time target-player <= 360)); 480
=>
	(set-goal attack-goal 0)
;	(chat-local-to-self "Wait longer with attacking on this difficulty level.")
)
#end-if
#end-if
#end-if
(defrule
	(can-train petard)
=>
	(train petard)
	(disable-self)); In case the rule above gets jumped and also just for fun on the easiest difficulty level~
#end-if
#load-if-defined DIFFICULTY-EASY
(defrule
;	(current-age >= imperial-age)
	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 1250)
(or	(players-building-type-count any-enemy wonder > 0)
(or	(players-building-type-count any-enemy 826 > 0)
	(enemy-captured-relics)))
(or	(up-compare-goal victory-time < 675)
(or	(strategic-number sn-military-level >= 1)
	(and	(up-compare-goal victory-time < 950)
		(strategic-number sn-military-level >= 0))))
=>
	(up-jump-rule 1))
(defrule
	(up-compare-goal attack-goal != 0)
	(player-in-game any-human-enemy); test
; test	(population < max-pop); attack at some point
(or	(game-time < 900); 480
(or	(and	(strategic-number sn-military-level >= 3)
		(game-time < 3720)); 4500
(or	(and	(strategic-number sn-military-level >= 2)
		(game-time < 3120)); 3600
	(and	(strategic-number sn-military-level >= 1)
		(game-time < 2520))))); 2700
=>
	(set-goal attack-goal 0)
;	(chat-local-to-self "Wait longer with attacking on this difficulty level.")
)
#end-if
#load-if-defined DIFFICULTY-MODERATE
(defrule
;	(current-age >= imperial-age)
	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 1500)
(or	(players-building-type-count any-enemy wonder > 0)
(or	(players-building-type-count any-enemy 826 > 0)
	(enemy-captured-relics)))
(or	(up-compare-goal victory-time < 750)
(or	(strategic-number sn-military-level >= 1)
	(and	(up-compare-goal victory-time < 1100)
		(strategic-number sn-military-level >= 0))))
=>
	(up-jump-rule 1))
(defrule
	(up-compare-goal attack-goal != 0)
	(player-in-game any-human-enemy); test
	(population < max-pop); attack at some point
(or	(game-time < 600); 330
(or	(and	(strategic-number sn-military-level >= 3)
		(game-time < 1800)); 1500
(or	(and	(strategic-number sn-military-level >= 2)
		(game-time < 1500)); 1380
	(and	(strategic-number sn-military-level >= 1)
		(game-time < 1200))))); 1080
=>
	(set-goal attack-goal 0)
;	(chat-local-to-self "Wait longer with attacking on this difficulty level.")
)
#end-if
#load-if-defined DIFFICULTY-HARD
(defrule
;	(current-age >= imperial-age)
	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 1750)
(or	(players-building-type-count any-enemy wonder > 0)
(or	(players-building-type-count any-enemy 826 > 0)
	(enemy-captured-relics)))
(or	(up-compare-goal victory-time < 825)
(or	(strategic-number sn-military-level >= 1)
	(and	(up-compare-goal victory-time < 1250)
		(strategic-number sn-military-level >= 0))))
=>
	(up-jump-rule 1))
(defrule
	(up-compare-goal attack-goal != 0)
	(player-in-game any-human-enemy); test
	(population < max-pop); attack at some point
(or	(game-time < 180)
(or	(and	(strategic-number sn-military-level >= 3)
		(game-time < 900)); 600
(or	(and	(strategic-number sn-military-level >= 2)
		(game-time < 600)); 600
	(and	(strategic-number sn-military-level >= 1)
		(game-time < 300)))))
=>
	(set-goal attack-goal 0)
;	(chat-local-to-self "Wait longer with attacking on this difficulty level.")
)
#end-if
#end-if ; not on defend the wonder
(defrule
	(timer-triggered attack-timer)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(strategic-number sn-maximum-town-size >= 40)
	(population > eighty-five-percent-pop); keep attacking when pop is high
(or	(goal assistance yes)
	(nand	(goal enemy-fortifications-goal 1)
		(and	(unit-type-count trebuchet-set < 1); except if the enemy has fortifications and we don't have siege
			(and	(unit-type-count bombard-cannon < 8)
				(unit-type-count battering-ram-line < 6)))))
=>
	(set-goal attack-goal 4)
;	(chat-local-to-self "Keep attacking.")
)

(defrule
	(taunt-detected any-human-ally 36)
=>
	(chat-to-allies-using-id 22160); "39 Yes sire! I shall not attack until thou thyself give the word."
	(disable-self)
)
(defrule
	(taunt-detected any-ally 31)
	(taunt-detected any-human-ally 36)
=>
	(acknowledge-taunt this-any-human-ally 36)
)
(defrule
	(taunt-detected any-ally 31)
(or	(up-research-status c: feudal-age == research-pending)
	(up-research-status c: feudal-age == research-available))
(or	(strategic-number sn-military-level <= -1)
	(military-population < 7))
	(strategic-number sn-military-level <= 0)
	(population < del-civ-pop)
=>
	(acknowledge-taunt every-ally 31); no 222 for now
	(chat-to-allies-using-id 22169); "39 Nay, sire. 'Tis not wise to do so whilst I yet languish in the Dark Age."
	(disable-self); hm
)
(defrule
	(taunt-detected any-ally 31)
(or	(strategic-number sn-military-level <= -1); 0
	(military-population < 5))
	(military-population < 30)
	(population < eighty-five-percent-pop)
=>
	(acknowledge-taunt every-ally 31)
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
)
(defrule
	(taunt-detected any-ally 31); standard attack taunt
(or	(strategic-number sn-military-level <= -1)
	(military-population < 5))
	(military-population < 25); 30
(or	(strategic-number sn-resource-control == ri-pikeman); we want pikemen vs knights
	(and	(strategic-number sn-cavalry-threat >= 1)
		(unit-type-count spearman-line < 5)))
(or	(goal unit-goal archer)
(or	(goal unit-goal skirmisher)
	(goal unit-goal my-unique-unit-line)))
	(population < del-civ-pop); almost full pop => attack anyway
=>
	(acknowledge-taunt every-ally 31)
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
)
(defrule
	(taunt-detected any-ally 31)
(or	(strategic-number sn-military-level <= -1); 0
	(military-population < 5))
	(military-population < 30)
	(population < eighty-five-percent-pop)
=>
	(acknowledge-taunt every-ally 31)
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
)
(defrule
	(taunt-detected any-ally 31)
	(strategic-number sn-military-level <= 1); 2
	(players-building-type-count focus-player castle > 0)
(or	(players-building-type-count focus-player castle > 1)
	(and	(players-building-type-count focus-player stone-wall-line > 10)
		(unit-type-count battering-ram-line < 1)))
	(unit-type-count trebuchet-set < 1)
	(unit-type-count battering-ram-line < 1); 2
	(unit-type-count bombard-cannon < 2); 4
	(population < del-civ-pop); almost full pop => attack anyway
=>
	(acknowledge-taunt every-ally 31)
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
)
(defrule
	(taunt-detected any-ally 31)
	(goal strategy-goal flush)
	(strategic-number sn-military-level <= 0); 1
	(current-age == feudal-age)
(or	(or	(and	(players-current-age focus-player == castle-age)
			(players-military-population focus-player >= 10))
		(strategic-number sn-resource-control == 2))
	(and	(players-military-population focus-player > 16)
		(strategic-number sn-military-level <= 0)))
	(population < del-civ-pop); almost full pop => attack anyway
=>
	(acknowledge-taunt every-ally 31)
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
)
(defrule
	(taunt-detected any-ally 222)
(or	(and	(goal assistance yes)
		(strategic-number sn-military-level >= 0))
(or	(military-population >= 21)
(or	(population >= sixty-percent-pop)
(or	(population >= max-civ-pop)
	(strategic-number sn-military-level >= -1)))))
(or	(population >= del-civ-pop)
	(military-population >= 5))
=>
	(set-goal attack-goal 4)
	(enable-timer help-ally-timer 120); 180
;	(set-strategic-number sn-target-evaluation-ally-proximity 1)
;	(acknowledge-taunt every-ally 222)
;	(chat-to-allies-using-id 22153); "At once, sire!"
)
(defrule
	(taunt-detected any-ally 31)
(or	(and	(goal assistance yes)
		(strategic-number sn-military-level >= 0))
(or	(military-population >= 41)
(or	(and	(military-population >= 31)
		(taunt-detected any-human-ally 31))
(or	(population >= eighty-five-percent-pop)
(or	(population >= max-civ-pop)
	(strategic-number sn-military-level >= 0))))))
(or	(population >= del-civ-pop)
	(military-population >= 7))
=>
	(set-goal attack-goal 4)
	(enable-timer help-ally-timer 120); 180
;	(set-strategic-number sn-target-evaluation-ally-proximity 1)
;	(acknowledge-taunt every-ally 31)
;	(chat-to-allies-using-id 22153); "At once, sire!"
)
(defrule
	(up-timer-status help-ally-timer == timer-running)
(or	(population >= max-civ-pop); del
	(military-population >= 5))
=>	
	(set-goal attack-goal 4)
)
(defrule
	(building-type-count town-center > 0)
	(players-building-type-count target-player stone-wall-line > 0)
	(strategic-number sn-maximum-town-size >= 40)
	(strategic-number sn-maximum-town-size < 680); 480
	(enemy-buildings-in-town)
	(timer-triggered one-minute-timer); guess work
=>
	(up-modify-sn sn-maximum-town-size c:+ 25); increase TS to reach buildings behind the wall
)
;(defrule
;	(game-time > 1200)
;	(timer-triggered micro-timer)
;	(up-compare-goal threat-time > 12000)
;	(strategic-number sn-number-attack-groups > 0)
;	(strategic-number sn-minimum-attack-group-size < 2)
;	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
;	(unit-type-count monastery-class < 12)
;	(unit-type-count trebuchet-set == 0)
;=>
;	(enable-timer micro-timer 25)
;	(set-strategic-number sn-group-form-distance 30)
;	(set-strategic-number sn-number-attack-groups 500)
;	(set-strategic-number sn-minimum-attack-group-size 40)
;	(set-strategic-number sn-maximum-attack-group-size 40)
;	(set-strategic-number sn-attack-group-gather-spacing 3)
;;	(chat-to-player my-player-number "no enemy activites detected - large groups")
;)
(defrule
	(game-time > 1200)
	(strategic-number sn-minimum-attack-group-size == 40)
	(strategic-number sn-number-attack-groups > 0)
(or	(up-compare-goal threat-time < 6000)
(or	(unit-type-count monastery-class >= 12)
	(unit-type-count trebuchet-set >= 1)))
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
=>
;hmm	(enable-timer micro-timer 25)
	(up-reset-unit c: -1); test
	(set-strategic-number sn-group-form-distance 30)
	(set-strategic-number sn-number-attack-groups 500)
	(set-strategic-number sn-minimum-attack-group-size 40)
	(set-strategic-number sn-maximum-attack-group-size 40)
	(set-strategic-number sn-attack-group-gather-spacing 3)
;	(chat-to-player my-player-number "1-man groups")
)



(defrule
	(goal retargetenemy yes)
;	(building-type-count-total town-center >= 1)
	(players-building-count any-enemy > 0)
=>
	(up-find-player enemy find-closest closest-enemy-goal)
	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal))

(defrule
	(goal retargetenemy 3); wonder/relics
	(players-building-type-count every-enemy wonder <= 0)
(not	(enemy-captured-relics))
=>
	(set-goal retargetenemy yes)
;	(chat-to-player my-player-number "Retargeting to closest enemy.")
	(set-strategic-number sn-special-attack-type1 0)
	(set-strategic-number sn-special-attack-influence1 1)
	(set-strategic-number sn-special-attack-type3 0)
;	(set-strategic-number sn-special-attack-influence3 1)
)

#load-if-defined VICTORY-STANDARD
(defrule
	(players-building-count any-enemy > 0)
	(enemy-captured-relics)
	(up-compare-goal retargetenemy != 3)
=>
	(up-modify-sn sn-target-player-number g:= winning-player)
	(up-modify-sn sn-focus-player-number g:= winning-player)
	(set-strategic-number sn-special-attack-type1 1)
	(set-strategic-number sn-special-attack-influence1 10000)
;	(chat-to-player my-player-number "Retargeting to player with relics.")
	(set-goal retargetenemy 3)); blocks retargeting to closest player

(defrule
	(players-building-count any-enemy > 0)
	(players-building-type-count target-player wonder == 0)
	(players-building-type-count any-enemy wonder > 0)
=>
	(up-modify-sn sn-target-player-number g:= winning-player)
	(up-modify-sn sn-focus-player-number g:= winning-player)
	(set-strategic-number sn-special-attack-type3 1)
;	(set-strategic-number sn-special-attack-influence3 10000)
;	(chat-to-player my-player-number "Retargeting to player with wonder.")
	(set-goal retargetenemy 3)); blocks retargeting to closest player

(defrule
;	(goal retargetenemy 3); wonder/relics
	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 1500)
(or	(strategic-number sn-military-level >= 1)
(or	(population >= max-pop)
	(up-compare-goal victory-time < 1000)))
	(goal under-attack-goal 0)
(or	(players-building-type-count target-player wonder > 0)
	(and	(enemy-captured-relics)
		(players-building-type-count target-player monastery > 0)))
; test	(strategic-number sn-maximum-town-size < 40)
	(up-compare-goal attack-goal < 1)
=>
	(set-goal attack-goal 2)
;	(up-reset-unit c: -1)
)
(defrule
;	(goal retargetenemy 3); wonder/relics
	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 800); just go or it will be too late anyway
(or	(players-building-type-count target-player wonder > 0)
	(and	(enemy-captured-relics)
		(players-building-type-count target-player monastery > 0)))
	(strategic-number sn-maximum-town-size < 680); 480
=>
	(set-goal attack-goal 2)
	(set-goal attack-status-goal tsa)
	(set-strategic-number sn-maximum-town-size 680))
#end-if
#load-if-defined KING-OF-THE-HILL
(defrule
	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 1000); someone has the monument
;bugged	(players-building-type-count any-enemy 826 > 0)
	(players-building-count any-enemy > 0)
(or	(strategic-number sn-target-player-number g:!= winning-player)
	(strategic-number sn-focus-player-number g:!= winning-player))
=>
	(up-modify-sn sn-target-player-number g:= winning-player)
	(up-modify-sn sn-focus-player-number g:= winning-player)
;	(chat-to-player my-player-number "Retargeting to player with monument.")
	(set-goal retargetenemy 4)); blocks retargeting to closest player
(defrule
;	(current-age >= imperial-age)
	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 1000); 100 years left
;bugged	(players-building-type-count any-enemy 826 > 0)
(or	(up-compare-goal victory-time < 500)
(or	(population >= max-pop)
(or	(unit-type-count trebuchet-set >= 1)
(or	(unit-type-count bombard-cannon >= 1)
	(unit-type-count battering-ram-line >= 2)))))
(or	(up-compare-goal victory-time < 700)
(or	(strategic-number sn-military-level >= 1)
	(and	(up-compare-goal victory-time < 850)
		(strategic-number sn-military-level >= 0))))
	(players-building-type-count any-enemy wonder > 0)
=>
	(set-goal attack-goal 2)
)
(defrule; test
(or	(hold-koh-ruin)
	(and	(strategic-number sn-military-level >= 3)
		(and	(up-compare-goal victory-time >= 1030)
			(up-compare-goal victory-time < 1280))))
	(goal hostilities-goal 0)
;	(game-time >= 2200)
;bugged	(players-building-type-count every-enemy 826 <= 0)
	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 1000); 100 years left
	(strategic-number sn-gather-idle-soldiers-at-center != 1)
=>
	(set-strategic-number sn-gather-idle-soldiers-at-center 1))
#end-if
#load-if-defined DEFEND-WONDER
(defrule
;	(current-age >= imperial-age)
(or	(up-compare-goal victory-time < 500)
(or	(population >= max-pop)
(or	(unit-type-count trebuchet-set >= 1)
(or	(unit-type-count bombard-cannon >= 2)
	(unit-type-count battering-ram-line >= 3)))))
	(up-compare-goal victory-time > 0)
(or	(up-compare-goal victory-time < 1000)
(or	(strategic-number sn-military-level >= 2)
(or	(and	(up-compare-goal victory-time < 1800); start early, fortified defenses
		(strategic-number sn-military-level >= 1))
	(and	(up-compare-goal victory-time < 1400)
		(strategic-number sn-military-level >= 0)))))
	(players-building-type-count any-enemy wonder > 0)
=>
;	(chat-to-all "test")
	(set-goal attack-goal 2))
(defrule
(or	(and	(up-compare-goal victory-time < 1000)
		(strategic-number sn-minimum-water-body-size-for-dock != water-islands))
	(goal attack-status-goal tsa))
	(up-compare-goal victory-time > 0)
	(players-building-type-count any-enemy wonder > 0)
	(strategic-number sn-maximum-town-size < 680); 480
;	(strategic-number sn-maximum-town-size >= 40)
=>
	(set-goal attack-goal 2)
	(set-goal attack-status-goal tsa)
	(set-strategic-number sn-maximum-town-size 680))
#end-if



(defrule
(or	(strategic-number sn-target-player-number == 0)
(or	(player-resigned target-player)
(or	(not	(player-valid target-player))
	(not	(player-in-game target-player)))))
	(player-in-game any-enemy)
	(players-building-count any-enemy > 0)
=>
	(set-goal retargetenemy yes)
	(up-find-player enemy find-closest closest-enemy-goal)
	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
;	(up-chat-data-to-self "Focus-player: %d" g: closest-enemy-goal)
;	(chat-to-player every-computer "Retargeting to the closest living enemy.")
)
(defrule
(or	(stance-toward target-player ally)
	(players-building-count target-player <= 0))
	(player-in-game any-enemy)
	(players-building-count any-enemy > 0)
=>
	(set-goal retargetenemy yes)
	(up-find-player enemy find-closest closest-enemy-goal)
	(up-modify-sn sn-target-player-number g:= closest-enemy-goal)
	(up-modify-sn sn-focus-player-number g:= closest-enemy-goal)
;	(up-chat-data-to-self "Focus-player: %d" g: closest-enemy-goal)
;	(chat-to-player every-computer "Retargeting to the closest living enemy.")
)

;#load-if-defined DEATH-MATCH
;(defrule
;	(strategic-number sn-number-attack-groups > 0)
;	(strategic-number sn-maximum-town-size < 40)
;	(up-compare-goal attack-goal < 2)
;(nand	(strategic-number sn-target-evaluation-ally-proximity > 0)
;	(up-timer-status help-ally-timer == timer-running))
;	(population < del-civ-pop)
;=>
;	(set-strategic-number sn-number-attack-groups 0)
;	(set-goal retreat-now-goal 1)
;)
;#end-if ; test
(defrule
	(strategic-number sn-target-player-number != 0)
	(timer-triggered help-ally-timer)
	(timer-triggered attack-timer)
=>
	(set-strategic-number sn-target-evaluation-ally-proximity 0)
)
(defrule
	(goal retreat-now-goal 1)
	(not (town-under-attack))
	(military-population >= 21)
	(strategic-number sn-resource-control < 1)
	(unit-type-count-total monk <= 0); train a single monk for healing
	(can-train monk)
=>
	(train monk)
)
(defrule
	(up-timer-status reset-timer != timer-disabled)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(goal retreat-now-goal 1)
	(goal retreat-now-goal 2))
(or	(and	(up-compare-goal victory-time > 0)
		(up-compare-goal victory-time < 500))
	(and	(goal team-coordination-goal 0)
		(and	(strategic-number sn-maximum-town-size <= 39)
			(strategic-number sn-number-attack-groups <= 0))))
=>
	(set-goal retreat-now-goal 0)
)
#load-if-not-defined DIFFICULTY-MODERATE
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-HARDEST
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
(or	(goal retreat-now-goal 1)
	(goal retreat-now-goal 2))
(nand	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 500))
	(timer-triggered retreat-timer)
=>
	(enable-timer retreat-timer 20); 30
;	(enable-timer reset-timer 20)
;	(up-retreat-now)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-maximum-town-size 12)
	(set-goal retreat-now-goal 0)
	(set-goal attack-status-goal retreat)
)
#end-if
#end-if
#end-if
#load-if-not-defined DARK-AGE-END
#load-if-not-defined FEUDAL-AGE-END
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal retreat-now-goal 1)
(nand	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 500))
	(timer-triggered retreat-timer)
=>
	(enable-timer retreat-timer 30); 6
	(enable-timer reset-timer 20)
	(up-retreat-now)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-maximum-town-size 12)
	(set-goal retreat-now-goal 0)
	(set-goal attack-status-goal retreat)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal retreat-now-goal 2)
;(or	(strategic-number sn-maximum-town-size >= 40)
;	(strategic-number sn-number-attack-groups > 0))
(nand	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 500))
	(timer-triggered retreat-timer)
=>
	(enable-timer retreat-timer 50); 6
	(enable-timer reset-timer 40)
	(up-retreat-now)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-maximum-town-size 12)
	(set-goal retreat-now-goal 0)
)
#end-if
#end-if
#load-if-not-defined CASTLE-AGE-END
#load-if-not-defined IMPERIAL-AGE-END
(defrule
	(goal retreat-now-goal 1)
	(timer-triggered retreat-timer)
=>
	(disable-timer retreat-timer)
	(set-goal retreat-now-goal 0))
#end-if
#end-if
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
=>
	(up-jump-rule 10); TSA doesn't work on islands
)
(defrule
	(strategic-number sn-number-explore-groups <= 0)
(or	(and	(cc-players-unit-type-count 0 tree-class > 50)
		(and	(population > seventy-five-percent-pop)
			(players-population target-player < twenty-five-percent-pop)))
(or	(players-building-count every-enemy <= 0)
	(and	(player-in-game every-enemy)
		(players-building-count any-enemy <= 0))))
=>
	(set-strategic-number sn-number-explore-groups 1)); search for the enemy to prevent him from hiding
(defrule
	(strategic-number sn-number-explore-groups <= 0)
	(player-in-game target-player)
	(players-building-count target-player <= 0)
	(strategic-number sn-number-explore-groups <= 0)
=>
	(set-strategic-number sn-number-explore-groups 1)); search for the enemy to prevent him from hiding

(defrule
(nand	(enemy-buildings-in-town)
	(strategic-number sn-military-level >= 2)); else it may be a forward castle or sth like that
(or	(unit-type-count castle-arrow > 0)
(or	(unit-type-count castle-arrow-chemistry > 0)
	(unit-type-count tc-arrow > 0)))
	(population < del-civ-pop); shouldn't make a huge difference
=>
	(up-jump-rule 2); or it won't react to town under attack
;	(chat-local-to-self "Fortification fire detected, prevent attacks this rule pass.")
)
(defrule
	(building-type-count town-center > 0)
	(strategic-number sn-maximum-town-size < 680); 480
	(strategic-number sn-maximum-town-size >= 40)
(or	(population >= del-civ-pop)
(or	(map-size giant)
	(map-size ludikris)))
	(not (enemy-buildings-in-town))
=>
	(up-modify-sn sn-maximum-town-size c:+ tsa-increment)
	(enable-timer reset-town-size-timer 93)
; debug	(up-chat-data-to-self "TSA = %d" s: sn-maximum-town-size)
)
(defrule
	(building-type-count town-center > 0)
	(strategic-number sn-maximum-town-size < 680); 480
	(strategic-number sn-maximum-town-size >= 40)
(nor	(population >= del-civ-pop)
(or	(map-size giant)
	(map-size ludikris)))
	(not (enemy-buildings-in-town))
=>
	(up-modify-sn sn-maximum-town-size c:+ 6)
	(enable-timer reset-town-size-timer 93)
; debug	(up-chat-data-to-self "TSA = %d" s: sn-maximum-town-size)
)
#load-if-defined DEATH-MATCH
#load-if-not-defined POST-IMPERIAL-AGE-START
(defrule
	(up-compare-goal attack-goal >= 2); disabled, rule not commented out because there's a jump above
	(strategic-number sn-target-player-number > 0); and i might enable the rule later again (2)
	(players-building-count target-player > 0)
	(game-time < 900)
=>
	(set-strategic-number sn-number-attack-groups 500)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1)
	(set-strategic-number sn-group-form-distance 5)
	(set-goal attack-goal 0)
	(set-goal attack-status-goal groups)
	(enable-timer attack-timer 120)
)
#else
(defrule
	(up-compare-goal attack-goal >= 2); disabled, rule not commented out because there's a jump above
	(strategic-number sn-target-player-number > 0); and i might enable the rule later again (2)
	(players-building-count target-player > 0)
	(game-time < 420)
=>
	(set-strategic-number sn-number-attack-groups 500)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1)
	(set-strategic-number sn-group-form-distance 5)
	(set-goal attack-goal 0)
	(set-goal attack-status-goal groups)
	(enable-timer attack-timer 120)
)
#end-if
#end-if
(defrule
	(up-compare-goal attack-goal >= 2)
	(taunt-detected any-human-ally 36)
=>
	(set-goal attack-goal 0)
)
(defrule ; A.
	(up-compare-goal attack-goal >= 29876); disabled, rule not commented out because there's a jump above
	(timer-triggered attack-timer); and i might enable the rule later again (2)
(or	(strategic-number sn-military-level >= 3); test
(or	(players-building-type-count target-player stone-wall-line >= 9); test
	(players-building-type-count target-player 939 >= 2))); gates
	(strategic-number sn-target-player-number > 0)
	(players-building-count target-player > 0)
	(strategic-number sn-number-attack-groups < 500)
=>
	(set-strategic-number sn-number-attack-groups 500)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-strategic-number sn-maximum-attack-group-size 1)
;	(set-strategic-number sn-group-form-distance 5)
	(set-goal attack-goal 0)
	(set-goal attack-status-goal groups)
	(enable-timer attack-timer 30)
)
(defrule
	(goal attack-goal 2)
	(timer-triggered attack-timer)
	(strategic-number sn-target-player-number > 0)
	(players-building-count target-player > 0)
	(strategic-number sn-maximum-town-size < 40); got something else to reduce high town-size
=>
	(set-goal attack-goal 0)
	(set-goal attack-status-goal tsa)
	(set-strategic-number sn-maximum-town-size 40)
	(enable-timer attack-timer 30); 60
	(enable-timer reset-town-size-timer 92)
	(chat-local-to-self "Starting TSA.")
)
(defrule
	(goal attack-goal 4)
	(timer-triggered attack-timer)
	(strategic-number sn-target-player-number > 0)
	(players-building-count target-player > 0)
	(strategic-number sn-maximum-town-size < 40); got something else to reduce high town-size
=>
	(set-goal attack-goal 0)
	(set-goal attack-status-goal tsa)
	(set-strategic-number sn-maximum-town-size 40)
	(enable-timer attack-timer 30); 60
	(enable-timer reset-town-size-timer 92)
	(chat-local-to-self "Starting TSA."); - End Jump -
)
(defrule
	(timer-triggered attack-timer)
	(strategic-number sn-maximum-town-size < 40)
	(strategic-number sn-number-attack-groups > 0)
=>
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-minimum-attack-group-size 0)
	(set-goal attack-status-goal 0)
;	(chat-local-to-self "Reset units.")
)
(defrule
	(timer-triggered one-minute-timer)
	(timer-triggered attack-timer)
	(up-compare-goal attack-status-goal == 0)
	(strategic-number sn-maximum-town-size >= 40)
	(up-timer-status reset-town-size-timer == timer-disabled)
=>
	(enable-timer reset-town-size-timer 2)
	(chat-local-to-self "Debug: Town-size reset.")
)

(defrule
	(timer-triggered reset-town-size-timer)
	(population >= 140)
=>
	(disable-timer reset-town-size-timer)
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-group-form-distance 0)
	(set-strategic-number sn-maximum-town-size 24)
	(set-goal attack-status-goal 0)
;	(chat-local-to-self "Reset town size triggered.")
)
(defrule
	(timer-triggered reset-town-size-timer)
	(population >= 90)
=>
	(disable-timer reset-town-size-timer)
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-group-form-distance 0)
	(set-strategic-number sn-maximum-town-size 20)
	(set-goal attack-status-goal 0)
;	(chat-local-to-self "Reset town size triggered.")
)
(defrule
	(timer-triggered reset-town-size-timer)
	(population >= 60)
=>
	(disable-timer reset-town-size-timer)
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-group-form-distance 0)
	(set-strategic-number sn-maximum-town-size 16)
	(set-goal attack-status-goal 0)
;	(chat-local-to-self "Reset town size triggered.")
)
(defrule
	(timer-triggered reset-town-size-timer)
=>
	(disable-timer reset-town-size-timer)
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-group-form-distance 0)
	(set-strategic-number sn-maximum-town-size 12)
	(set-goal attack-status-goal 0)
	(chat-local-to-self "Reset town size triggered.")
)

(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed); not on islands
	(strategic-number sn-military-level < 0)
	(population < eighty-five-percent-pop)
=>
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
	(set-strategic-number sn-sentry-distance 1)
)
(defrule
	(game-time > 1200)
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(population > 50)
	(population < 130)
	(goal housing-goal 0)
	(strategic-number sn-military-level < 0)
	(military-population < 25)
	(strategic-number sn-maximum-town-size > 22)
	(strategic-number sn-maximum-town-size < 40)
	(unit-type-count tc-arrow == 0)
	(goal increase-town-size-goal 0); otherwise we can't build anything and lose as well.
=>
	(set-strategic-number sn-maximum-town-size 22)
	(set-strategic-number sn-defense-distance 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
;	(set-strategic-number sn-cap-civilian-builders 10)
;	(chat-to-player my-player-number "outnumbered - maximum TS = 18")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(current-age == feudal-age)
	(players-current-age any-enemy == castle-age)
	(goal strategy-goal flush)
(or	(goal enemy-goal flush)
	(strategic-number sn-archer-threat > 1))
	(strategic-number sn-military-level < 3); test
	(strategic-number sn-maximum-town-size == 7)
(nand	(up-compare-goal victory-time > 0)
	(up-compare-goal victory-time < 500))
	(population < del-civ-pop)
	(timer-triggered thirty)
=>
	(up-retreat-now)
	(enable-timer reset-timer 15); 20
)

; NAVY MANAGEMENT
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-mixed)
=>
	(up-jump-rule 6)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(up-compare-goal navy-count > 4)
(or	(game-time < 1260)
	(up-compare-goal navy-count > 9))
(or	(game-time < 1620)
	(up-compare-goal navy-count > 15))
(or	(game-time < 2000)
	(up-compare-goal navy-count > 21))
(or	(game-time < 2700)
	(strategic-number sn-minimum-water-body-size-for-dock == water-mixed)); not likely to get more ships on mixed maps
=>
	(set-goal attack-goal 6)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(game-time > 2100)
(or	(up-compare-goal navy-count >= 40)
	(and	(up-compare-goal navy-count g:>= max-navy)
		(population >= max-pop)))
(or	(or	(players-unit-type-count any-enemy galley-line > 12); eliminate remaining ships
		(players-unit-type-count any-enemy fire-ship-line > 12))
	(or	(unit-type-count cannon-galleon-line > 7); or bring cannon-galleons against castles/tower
		(not (research-available ri-cannon-galleon))))
=>
	(set-goal attack-goal 6)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(goal attack-goal 6)
	(timer-triggered attack-timer)
(or	(up-compare-goal navy-count g:>= max-navy)
(or	(and	(players-unit-type-count any-enemy galley-line < 15)
		(players-unit-type-count any-enemy fire-ship-line < 15))
	(population >= max-pop)))
	(unit-type-count transport-ship > 0)
	(soldier-count >= 10)
=>
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-group-form-distance 30)
	(set-strategic-number sn-attack-group-gather-spacing 30)
	(attack-now)
	(enable-timer attack-timer 180); 300
	(set-strategic-number sn-special-attack-type2 -1)
;	(chat-local-to-self "Utilizing transports.")
)
(defrule
	(goal attack-goal 6)
	(timer-triggered navy-attack-timer)
;	(up-compare-goal threat-target != warship-class)
	(players-building-count any-enemy > 0)	
(nand	(cc-players-unit-type-count target-player castle-arrow > 0);(up-projectile-detected projectile-castle c:< 30000)
	;(and
		(unit-type-count cannon-galleon-line <= 0)
		;(up-projectile-target projectile-castle == warship-class);) provisory
)
=>
	(set-strategic-number sn-minimum-boat-attack-group-size 1)
	(set-strategic-number sn-maximum-boat-attack-group-size 1)
;	(set-strategic-number sn-percent-attack-boats 100)
	(set-strategic-number sn-number-boat-attack-groups 500)
	(enable-timer navy-attack-timer 10)
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands)
	(unit-type-count 42 == 0)
(or	(goal threat-target cavalry-unit-class); Enemy fighting our units with non warships 
	(goal threat-target infantry-class)); This assumes we have successfully landed on the enemy island
	(up-compare-goal threat-source != warship-class)
	(timer-triggered retreat-timer)
	(unit-type-count transport-ship > 0)
=>
	(up-reset-unit c: -1); disable the attack, attack now groups react horrible
	(enable-timer retreat-timer 120)
	(enable-timer attack-timer 60)
)
(defrule
	(strategic-number sn-number-boat-attack-groups > 0)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-mixed)
	(up-compare-goal attack-goal != 6)
=>
	(set-strategic-number sn-minimum-boat-attack-group-size 0)
	(set-strategic-number sn-maximum-boat-attack-group-size 0)
	(set-strategic-number sn-number-boat-attack-groups 0)
;	(set-strategic-number sn-percent-attack-boats 0); end jump
)

(defrule; Spread our forces in order to prevent blocking
	(goal spread-military-goal 0)
	(timer-triggered spread-military-timer)
	(up-timer-status retreat-timer != timer-running)
	(up-timer-status reset-timer != timer-running)
=>
	(set-strategic-number sn-enable-patrol-attack 0)
	(up-reset-unit c: -1)
	(disable-timer spread-military-timer)
	(set-strategic-number sn-task-ungrouped-soldiers 1)
	(set-goal spread-military-goal 1)
	(enable-timer spread-military-timer 2)); 4
(defrule
	(goal spread-military-goal 1)
	(timer-triggered spread-military-timer)
=>
	(set-strategic-number sn-enable-patrol-attack enable-patrol)
	(disable-timer spread-military-timer)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-goal spread-military-goal 0); use a goal because sn-task-ungrouped-soldiers is always 1 when used as a fact
	(enable-timer spread-military-timer spread-interval)
)

; check if our town is really under attack (not just a wolf)
(defrule
	(goal under-attack-goal 0)
	(strategic-number sn-maximum-town-size < 40)
	(players-military-population any-enemy > 1)
	(town-under-attack)
=>
	(set-goal under-attack-goal 2)
	(enable-timer under-attack-timer 30)
)
(defrule
	(town-under-attack)
	(not (timer-triggered under-attack-timer))
	(goal under-attack-goal 3)
=>
	(set-strategic-number sn-target-evaluation-ally-proximity 0)
	(set-goal under-attack-goal 1)
;	(chat-local-to-self "Enemy attack isn't over yet.")
)
(defrule
	(timer-triggered under-attack-timer)
	(town-under-attack)
	(population > 25)
=>
	(set-strategic-number sn-target-evaluation-ally-proximity 0)
	(disable-timer under-attack-timer)
	(enable-timer under-attack-timer 20)
	(set-goal under-attack-goal 1)
)
(defrule
	(timer-triggered under-attack-timer)
	(town-under-attack)
	(population < 26)
=>
	(set-strategic-number sn-target-evaluation-ally-proximity 0)
	(disable-timer under-attack-timer)
	(enable-timer under-attack-timer 20)
	(set-goal under-attack-goal 1)
)
(defrule
	(not (town-under-attack))
	(goal under-attack-goal 1)
=>
	(enable-timer under-attack-timer 60)
	(set-goal under-attack-goal 3)
)
(defrule
(or	(strategic-number sn-maximum-town-size >= 40)
(or	(and	(timer-triggered under-attack-timer)
		(goal under-attack-goal 3))
	(and	(not (town-under-attack))
		(goal under-attack-goal 2))))
=>
	(disable-timer under-attack-timer)
	(set-goal under-attack-goal 0)
)


(defrule
(or	(military-population >= 2)
	(population >= max-civ-pop))
(or	(and	(strategic-number sn-maximum-town-size >= 40)
		(building-type-count town-center >= 1))
	(or	(strategic-number sn-number-attack-groups >= 1)
		(strategic-number sn-number-boat-attack-groups >= 1)))
	(up-compare-goal team-coordination-goal != 1)
=>
	(set-strategic-number sn-gather-defense-units 0)
	(set-goal team-coordination-goal 1))
(defrule
(or	(goal under-attack-goal 1)
(or	(goal team-coordination-goal 1)
	(or	(and	(strategic-number sn-maximum-town-size >= 40)
			(strategic-number sn-minimum-water-body-size-for-dock < water-islands)); TSA is not used on islands
		(strategic-number sn-number-attack-groups >= 1))))
	(building-type-count-total town-center >= 1)
=>
	(set-goal hostilities-goal 1))
(defrule
(or	(taunt-detected any-ally 222)
(or	(taunt-detected any-ally 211)
;(or
	(taunt-detected any-ally 31)
;	(taunt-detected any-ally 100))
))
	(goal team-coordination-goal 1)
=>
	(acknowledge-taunt every-ally 222)
	(acknowledge-taunt every-ally 211)
	(acknowledge-taunt every-ally 31)
;	(acknowledge-taunt every-ally 100)
	(set-strategic-number sn-target-evaluation-ally-proximity 1)
	(chat-to-allies-using-id 22153); "At once, sire!"
)
(defrule
(or	(taunt-detected any-ally 222); if we could help, this taunt would have been acknowledged by now
(or	(taunt-detected any-ally 211)
;(or
	(taunt-detected any-ally 31)
;	(taunt-detected any-ally 100))
))
=>
	(acknowledge-taunt every-ally 222)
	(acknowledge-taunt every-ally 211)
	(acknowledge-taunt every-ally 31)
;	(acknowledge-taunt every-ally 100)
	(set-strategic-number sn-target-evaluation-ally-proximity 0)
	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
)

(defrule
;	(game-time > 2)
	(player-in-game any-ally)
(not	(taunt-detected any-ally 31))
	(up-compare-goal team-coordination-goal == 1); attacking
	(up-timer-status attack-chat != timer-running)
=>
	(chat-to-player every-ally "31") 	
	(chat-to-player-using-id every-ally 22117); "Attack now!"
	(enable-timer attack-chat 300)); don't be too annoying

(defrule
	(population < del-civ-pop)
	(goal under-attack-goal 1)
	(goal defendchat yes)
=>
; test	(chat-to-player every-computer "31"); use this because every-computer-ally doesn't exist
	(chat-to-player every-computer "222"); but enemies won't react to this taunt anyway
	(chat-to-player-using-id every-ally 22115); "Help! The enemy is in my town!"
	(set-goal defendchat no)
	(enable-timer defend-timer 150))
(defrule
	(timer-triggered defend-timer)
=>
	(disable-timer defend-timer)
	(set-goal defendchat yes))

; ********** OPTIONAL CHEATS ***********

#load-if-defined DIFFICULTY-HARDEST
(defrule
	(taunt-detected any-human 200)
=>
	(chat-to-all "Taunt 200 detected - Cheats enabled!")
	(disable-self))
#else
(defrule
	(taunt-detected any-human 200)
=>
	(chat-to-all "Taunt 200 cheats only work on the 'hardest' difficulty level.")
	(acknowledge-taunt this-any-human 200))
#end-if
(defrule
	(taunt-detected any-human 200)
	(building-type-count town-center < 1)
	(building-type-count lumber-camp < 1); landnomad
	(building-type-count-total lumber-camp >= 1)
=>
	(cc-add-resource wood 50)
	(cc-add-resource food 125)
	(disable-self))
(defrule
	(taunt-detected any-human 200)
	(game-time >= 360)
=>
	(cc-add-resource wood 100)
	(cc-add-resource food 130)
	(disable-self))
(defrule
	(taunt-detected any-human 200)
	(game-time >= 420)
=>
	(cc-add-resource wood 40)
	(cc-add-resource food 100)
	(cc-add-resource gold 40)
	(cc-add-resource stone 5)
	(disable-self))
(defrule
	(taunt-detected any-human 200)
(or	(game-time >= 480)
(or	(current-age >= feudal-age)
(or	(players-current-age any-enemy >= feudal-age)
	(players-current-age any-ally >= feudal-age))))
	(timer-triggered thirty)
=>
	(cc-add-resource wood 30)
	(cc-add-resource food 30)
	(cc-add-resource gold 30)
	(cc-add-resource stone 5))


; ********** HUMAN COOPERATION ***********


(defrule
(nor	(taunt-detected any-human-ally 231)
(or	(taunt-detected any-human-ally 232)
(or	(taunt-detected any-human-ally 233)
(or	(taunt-detected any-human-ally 234)
(or	(taunt-detected any-human-ally 235)
(or	(taunt-detected any-human-ally 236)
(or	(taunt-detected any-human-ally 237)
	(taunt-detected any-human-ally 238))))))))
=>
	(up-jump-rule 8))
(defrule
	(taunt-detected any-human-ally 231)
(nor	(stance-toward 1 ally)
	(player-number 1))
	(player-in-game 1)
	(players-building-count 1 >= 1); eligible for targeting
=>
	(set-strategic-number sn-target-player-number 1)
	(set-strategic-number sn-focus-player-number 1)
	(set-goal retargetenemy 4); block retargeting
	(chat-to-allies "I will target this enemy for 10 minutes.")
	(chat-to-allies "If i don't kill him faster than that...")
;	(chat-to-allies-using-id 22153); "At once, sire!"
	(enable-timer human-coop-timer 600)
	(acknowledge-taunt every-ally 231))
(defrule
	(taunt-detected any-human-ally 232)
(nor	(stance-toward 2 ally)
	(player-number 2))
	(player-in-game 2)
	(players-building-count 2 >= 1); eligible for targeting
=>
	(set-strategic-number sn-target-player-number 2)
	(set-strategic-number sn-focus-player-number 2)
	(set-goal retargetenemy 4); block retargeting
	(chat-to-allies "I will target this enemy for 10 minutes.")
	(chat-to-allies "If i don't kill him faster than that...")
;	(chat-to-allies-using-id 22153); "At once, sire!"
	(enable-timer human-coop-timer 600)
	(acknowledge-taunt every-ally 232))
(defrule
	(taunt-detected any-human-ally 233)
(nor	(stance-toward 3 ally)
	(player-number 3))
	(player-in-game 3)
	(players-building-count 3 >= 1); eligible for targeting
=>
	(set-strategic-number sn-target-player-number 3)
	(set-strategic-number sn-focus-player-number 3)
	(set-goal retargetenemy 4); block retargeting
	(chat-to-allies "I will target this enemy for 10 minutes.")
	(chat-to-allies "If i don't kill him faster than that...")
;	(chat-to-allies-using-id 22153); "At once, sire!"
	(enable-timer human-coop-timer 600)
	(acknowledge-taunt every-ally 233))
(defrule
	(taunt-detected any-human-ally 234)
(nor	(stance-toward 4 ally)
	(player-number 4))
	(player-in-game 4)
	(players-building-count 4 >= 1); eligible for targeting
=>
	(set-strategic-number sn-target-player-number 4)
	(set-strategic-number sn-focus-player-number 4)
	(set-goal retargetenemy 4); block retargeting
	(chat-to-allies "I will target this enemy for 10 minutes.")
	(chat-to-allies "If i don't kill him faster than that...")
;	(chat-to-allies-using-id 22153); "At once, sire!"
	(enable-timer human-coop-timer 600)
	(acknowledge-taunt every-ally 234))
(defrule
	(taunt-detected any-human-ally 235)
(nor	(stance-toward 5 ally)
	(player-number 5))
	(player-in-game 5)
	(players-building-count 5 >= 1); eligible for targeting
=>
	(set-strategic-number sn-target-player-number 5)
	(set-strategic-number sn-focus-player-number 5)
	(set-goal retargetenemy 4); block retargeting
	(chat-to-allies "I will target this enemy for 10 minutes.")
	(chat-to-allies "If i don't kill him faster than that...")
;	(chat-to-allies-using-id 22153); "At once, sire!"
	(enable-timer human-coop-timer 600)
	(acknowledge-taunt every-ally 235))
(defrule
	(taunt-detected any-human-ally 236)
(nor	(stance-toward 6 ally)
	(player-number 6))
	(player-in-game 6)
	(players-building-count 6 >= 1); eligible for targeting
=>
	(set-strategic-number sn-target-player-number 6)
	(set-strategic-number sn-focus-player-number 6)
	(set-goal retargetenemy 4); block retargeting
	(chat-to-allies "I will target this enemy for 10 minutes.")
	(chat-to-allies "If i don't kill him faster than that...")
;	(chat-to-allies-using-id 22153); "At once, sire!"
	(enable-timer human-coop-timer 600)
	(acknowledge-taunt every-ally 236))
(defrule
	(taunt-detected any-human-ally 237)
(nor	(stance-toward 7 ally)
	(player-number 7))
	(player-in-game 7)
	(players-building-count 7 >= 1); eligible for targeting
=>
	(set-strategic-number sn-target-player-number 7)
	(set-strategic-number sn-focus-player-number 7)
	(set-goal retargetenemy 4); block retargeting
	(chat-to-allies "I will target this enemy for 10 minutes.")
	(chat-to-allies "If i don't kill him faster than that...")
;	(chat-to-allies-using-id 22153); "At once, sire!"
	(enable-timer human-coop-timer 600)
	(acknowledge-taunt every-ally 237))
(defrule
	(taunt-detected any-human-ally 238)
(nor	(stance-toward 8 ally)
	(player-number 8))
	(player-in-game 8)
	(players-building-count 8 >= 1); eligible for targeting
=>
	(set-strategic-number sn-target-player-number 8)
	(set-strategic-number sn-focus-player-number 8)
	(set-goal retargetenemy 4); block retargeting
	(chat-to-allies "I will target this enemy for 10 minutes.")
	(chat-to-allies "If i don't kill him faster than that...")
;	(chat-to-allies-using-id 22153); "At once, sire!"
	(enable-timer human-coop-timer 600)
	(acknowledge-taunt every-ally 238))

(defrule; not an enemy / not alive / ...
(or	(taunt-detected any-human-ally 231)
(or	(taunt-detected any-human-ally 232)
(or	(taunt-detected any-human-ally 233)
	(taunt-detected any-human-ally 234))))
=>
	(chat-to-allies "That is not a valid target player.")
;	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
	(acknowledge-taunt every-ally 231)
	(acknowledge-taunt every-ally 232)
	(acknowledge-taunt every-ally 233)
	(acknowledge-taunt every-ally 234))
(defrule; not an enemy / not alive / ...
(or	(taunt-detected any-human-ally 235)
(or	(taunt-detected any-human-ally 236)
(or	(taunt-detected any-human-ally 237)
	(taunt-detected any-human-ally 238))))
=>
	(chat-to-allies "That is not a valid target player.")
;	(chat-to-allies-using-id 22118); "Alas, I cannot help that at this time."
	(acknowledge-taunt every-ally 235)
	(acknowledge-taunt every-ally 236)
	(acknowledge-taunt every-ally 237)
	(acknowledge-taunt every-ally 238))

(defrule
	(timer-triggered human-coop-timer)
=>
	(disable-timer human-coop-timer)
	(chat-to-allies "I will select a target enemy on my own again.")
	(set-goal retargetenemy yes)); allow retargeting


; ********** INCREASE TS CODE **********

;#load-if-not-defined DEATH-MATCH
; in PIDM increase TS according to game time, everything else will be too slow
; These rules increase town-size by population as our TS increase system doesn't cover houses and farms
; Compact TS and hopefully preventing enemies from luring our military out of town when under outnumbered.

(defrule
	(strategic-number sn-maximum-town-size < pop120-town-size)
(or	(population > 120)
	(and	(strategic-number sn-military-level >= 0)
		(building-type-count town-center > 3)))
=>
	(set-strategic-number sn-maximum-town-size pop120-town-size)
)
(defrule
	(strategic-number sn-maximum-town-size < pop90-town-size)
(or	(population > 90)
	(and	(strategic-number sn-military-level >= 0)
		(building-type-count town-center > 2)))
=>
	(set-strategic-number sn-maximum-town-size pop90-town-size)
)
(defrule
	(strategic-number sn-maximum-town-size < pop60-town-size)
(or	(or	(population > 60)
		(housing-headroom < 5))
	(and	(strategic-number sn-military-level >= 0)
		(building-type-count town-center > 1)))
	(population >= 40)
	(population <= 90)
=>
	(disable-timer reset-town-size-timer)
	(set-strategic-number sn-maximum-town-size pop60-town-size)
)
(defrule
	(game-time < 1800)
	(building-type-count town-center > 0)
	(goal strategy-goal flush)
	(strategic-number sn-military-level < 0)
	(strategic-number sn-allow-civilian-offense != 2)
	(goal increase-town-size-goal 0); otherwise we can't build anything and lose as well.
=>
	(set-strategic-number sn-maximum-town-size 7)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
;	(chat-to-player my-player-number "outnumbered - maximum TS = 7")
)
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(current-age == feudal-age)
	(goal strategy-goal flush)
(or	(goal enemy-goal flush)
	(strategic-number sn-archer-threat > 1))
	(players-current-age every-enemy == castle-age)
	(goal housing-goal 0)
	(strategic-number sn-maximum-town-size > 7)
	(goal increase-town-size-goal 0); otherwise we can't build anything and lose as well.
=>
	(set-strategic-number sn-maximum-town-size 7)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-strategic-number sn-enemy-sighted-response-distance 0)
;	(chat-to-player my-player-number "enemy castled faster, stay defensive - maximum TS = 7")
)
(defrule
(or	(up-compare-goal increase-town-size-goal != 0); need to build something
(or	(strategic-number sn-military-level >= 0); military situation normalized
	(military-population >= 6)))
	(strategic-number sn-maximum-town-size < 8)
=>
	(set-strategic-number sn-maximum-town-size 12); make room for buildings
)
;#end-if
(defrule
(or	(strategic-number sn-maximum-town-size < 39)
(or	(strategic-number sn-sentry-distance != 10)
	(strategic-number sn-enemy-sighted-response-distance != 18)))
	(population > max-civ-pop)
(or	(unit-type-count castle-arrow > 0)
	(unit-type-count castle-arrow-chemistry > 0))
=>
	(set-strategic-number sn-maximum-town-size 39)
	(set-strategic-number sn-sentry-distance 12)
	(set-strategic-number sn-enemy-sighted-response-distance 18); 30
)
(defrule
(or	(strategic-number sn-sentry-distance != 10)
	(strategic-number sn-enemy-sighted-response-distance != 18))
	(strategic-number sn-military-level >= 0)
=>
	(set-strategic-number sn-sentry-distance 12)
	(set-strategic-number sn-enemy-sighted-response-distance 18); 30
)
(defrule
	(military-population < 20); 25
	(strategic-number sn-current-age <= ci-transit)
	(population < del-civ-pop)
	(strategic-number sn-military-level <= 0)
	(goal team-coordination-goal 1); hm
(or	(goal unit-goal archer)
(or	(goal unit-goal skirmisher)
(or	(and	(goal unit-goal default-ranged)
		(up-compare-goal default-ranged != 0))
(or	(goal unit-goal gunpowder-class)
	(and	(goal unit-goal my-unique-unit-line)
		(up-research-status c: ri-bodkin-arrow >= research-pending))))))
	(strategic-number sn-enemy-sighted-response-distance != 0)
=>
	(set-strategic-number sn-enemy-sighted-response-distance 0))
(defrule
	(timer-triggered tensec)
	(strategic-number sn-minimum-water-body-size-for-dock == water-islands)
	(current-age >= castle-age)
(or	(wood-amount >= 700)
	(stone-amount >= 700))
(or	(not	(town-under-attack))
	(strategic-number sn-military-level >= 0))
	(strategic-number sn-maximum-town-size < 39); 40
=>
	(up-modify-sn sn-maximum-town-size c:+ 1)
)
(defrule
	(timer-triggered tensec)
	(goal farm-goal 1); provisory
	(idle-farm-count <= 0); provisory
	(wood-amount >= 295); super provisory, hopefully keeping it safe and better than nothing
	(up-pending-objects c: farm < 1)
	(building-type-count farm > 8)
	(up-compare-goal threat-time > 20000)
	(strategic-number sn-maximum-town-size < 30)
=>
	(up-modify-sn sn-maximum-town-size c:+ 1)
;	(set-strategic-number sn-maximum-town-size 30)
;	(enable-timer reset-town-size-timer 4)
)
(defrule
	(goal increase-town-size-goal watch-tower)
=>
	(up-jump-rule 4)
)
(defrule
	(strategic-number sn-maximum-town-size < 37)
	(up-compare-goal increase-town-size-goal != 2)
(or	(goal housing-goal 1)
	(goal increase-town-size-goal house))
(or	(timer-triggered increase-town-size-timer)
	(strategic-number sn-maximum-town-size < 17))
	(housing-headroom < 10)
	(population-headroom > 0)
	(building-type-count town-center >= 1)
	(up-pending-objects c: house < 1)
	(wood-amount >= 30)
=>
	(up-modify-sn sn-maximum-town-size c:+ 1)
	(up-chat-data-to-player my-player-number "build town-size = %d" s: sn-maximum-town-size)
)
(defrule
(or	(and	(strategic-number sn-maximum-town-size < 40)
		(goal increase-town-size-goal 2))
	(and	(goal increase-town-size-goal house)
		(or	(timer-triggered increase-town-size-timer)
			(or	(up-pending-objects c: house >= 1)
				(population-headroom <= 0)))))
=>
	(set-goal increase-town-size-goal 0); building already placed, no need to increase TS
	(disable-timer increase-town-size-timer)	
)
;#load-if-defined DEATH-MATCH
(defrule
	(game-time < 300); there may be more building rules than builders
	(unit-type-count villager < 12)
	(strategic-number sn-maximum-town-size >= pop90-town-size); 20/24
	(up-compare-goal increase-town-size-goal != 0)
=>
	(set-goal increase-town-size-goal 0))
;(defrule
;	(up-compare-goal increase-town-size-goal != 0)
;(or	(and	(current-age == castle-age)
;		(current-age-time < 30))
;(or	(current-age < castle-age)
;	(starting-age == post-imperial-age)))
;=>
;	(set-goal increase-town-size-goal 0); don't increase TS too early in DM, there might be more building rules than builders!
;)
;#end-if
(defrule
	(timer-triggered increase-town-size-timer)
(or	(strategic-number sn-maximum-town-size < 37)
	(strategic-number sn-minimum-water-body-size-for-dock >= water-islands))
	(strategic-number sn-maximum-town-size < 57)
	(up-compare-goal increase-town-size-goal != 0)
	(up-compare-goal increase-town-size-goal != house); test
	(strategic-number sn-maximum-town-size >= 7)
=>
	(enable-timer increase-town-size-timer 4)
	(set-goal increase-town-size-goal 0)
	(up-modify-sn sn-maximum-town-size c:+ 2)
	(up-chat-data-to-self "Build-town-size: %d." s: sn-maximum-town-size)
)
(defrule
	(current-age == dark-age)
	(building-type-count town-center > 0)
	(building-type-count-total mill == 0)
	(strategic-number sn-mill-max-distance > 28)
	(wood-amount > 300)
=>
	(set-strategic-number sn-mill-max-distance 8); reduce distance in case it couldn't be built due to insufficient exploration.
)
(defrule
	(strategic-number sn-minimum-civilian-explorers > 0)
(or	(and	(or	(unit-type-count 958 > 1); livestock
			(resource-found food))
		(strategic-number sn-mill-max-distance < 29))
	(timer-triggered civ-explore-timer))
	(building-type-count town-center >= 1); -total
=>
	(disable-timer civ-explore-timer)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-gatherers 0)
	(set-strategic-number sn-percent-civilian-builders 0)
	(set-strategic-number sn-percent-civilian-explorers 0)
)
(defrule
	(game-time > 600)
	(building-type-count-total town-center > 0)
	(building-type-count town-center == 0)
	(building-type-count farm > 0)
	(population < 20)
=>
	(delete-building farm); delete all farms to prevent losing villagers by walking back into the old town
	(delete-building farm)
	(delete-building farm)
	(delete-building farm)
	(delete-building farm)
	(delete-building farm)
	(delete-building farm)
	(delete-building farm)
	(delete-building farm)
	(delete-building farm)
	(delete-building farm)
)
(defrule
	(up-pending-objects c: lumber-camp < 1)
	(game-time > 33)
(or	(resource-found wood)
	(game-time > 333))
	(building-type-count-total town-center <= 0)
(or	(building-type-count-total lumber-camp <= 0)
	(dropsite-min-distance wood > 10))
	(can-build lumber-camp)
=>
	(set-strategic-number sn-allow-adjacent-dropsites 0); hmm, may be better here for less blocking
	(build lumber-camp)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-percent-civilian-gatherers 0)
	(set-strategic-number sn-percent-civilian-builders 100)
	(set-strategic-number sn-percent-civilian-explorers 0)
)
(defrule
;	(building-type-count-total town-center >= 1)
;	(up-pending-objects c: town-center >= 1)
	(building-type-count town-center >= 1); temporary work-around
	(goal nomad yes)
=>
	(release-escrow wood)
	(set-escrow-percentage wood 0)
	(set-goal escrow-purpose-goal 0)
	(set-strategic-number sn-mill-max-distance 29)
	(set-strategic-number sn-maximum-town-size 30)
	(set-strategic-number sn-camp-max-distance 35)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-maximum-wood-drop-distance 25)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(disable-self) ; part of the work-around
)
(defrule
	(game-time > 33)
(or	(strategic-number sn-minimum-civilian-explorers >= 1)
(or	(strategic-number sn-percent-civilian-explorers >= 1)
	(strategic-number sn-cap-civilian-explorers >= 1)))
	(building-type-count-total town-center <= 0)
(or	(and	(building-type-count-total lumber-camp >= 1)
		(wood-amount < 275))
	(and	(building-type-count-total mining-camp >= 1)
		(stone-amount < 100)))
=>
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-minimum-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-explorers 0)
)
(defrule
	(building-type-count-total town-center <= 0)
	(building-type-count lumber-camp >= 1); -total
	(dropsite-min-distance wood s:> sn-maximum-wood-drop-distance); chop wood at any distance
	(strategic-number sn-maximum-wood-drop-distance >= 0)
	(strategic-number sn-maximum-wood-drop-distance < 480)
=>
	(up-modify-sn sn-maximum-wood-drop-distance c:+ 1))
;	(set-strategic-number sn-maximum-wood-drop-distance 480)); test; -1
(defrule
	(strategic-number sn-minimum-water-body-size-for-dock < water-islands)
	(goal increase-town-size-goal 2); building placed
	(strategic-number sn-maximum-town-size >= 40); TSA in action
=>
	(disable-timer increase-town-size-timer)
	(set-strategic-number sn-maximum-town-size 18); build close
	(set-goal increase-town-size-goal 0)
	(enable-timer attack-timer 1); re-enable TSA immediately
	(set-goal restart-attack-goal 1)
)
(defrule
	(goal restart-attack-goal 1)
	(strategic-number sn-target-evaluation-ally-proximity < 1)
	(strategic-number sn-number-attack-groups > 0)
	(strategic-number sn-minimum-attack-group-size > 1)
	(strategic-number sn-maximum-town-size < 40)
=>
	(up-reset-unit c: -1)
	(set-strategic-number sn-number-attack-groups 0)
	(set-strategic-number sn-minimum-attack-group-size 1)
	(set-goal restart-attack-goal 0)
)
(defrule
	(goal restart-attack-goal 1)
	(strategic-number sn-target-evaluation-ally-proximity < 1)
=>
	(set-goal restart-attack-goal 0)
)
(defrule
;	(goal escrow-purpose-goal 0)
	(timer-triggered thirty); hmm
	(building-type-count-total town-center >= 1)
(or	(unit-type-count-total villager >= 10)
	(up-compare-goal custom-civ-pop >= max-civ))
	(escrow-amount wood >= 25)
	(up-pending-objects c: house == 0)
	(housing-headroom <= 0); stuck when we
	(population-headroom > 0); shouldn't be
=>
	(set-escrow-percentage wood 0)
	(set-escrow-percentage food 0)
	(set-escrow-percentage gold 0)
	(set-escrow-percentage stone 0)
	(release-escrow wood)(release-escrow food)
	(release-escrow gold)(release-escrow stone)
	(set-goal escrow-purpose-goal 0)
	(chat-to-player my-player-number "Attempting to debug escrow.")
)

(defrule
	(taunt-detected my-player-number 202)
=>
	(up-chat-data-to-player my-player-number "focus-player: %d" s: sn-focus-player-number)
	(up-chat-data-to-player my-player-number "target-player: %d" s: sn-target-player-number)
	(up-chat-data-to-player my-player-number "attack-goal: %d" g: attack-goal)
	(up-chat-data-to-player my-player-number "position: %d" g: position-goal)
	(up-chat-data-to-player my-player-number "sn-number-attack-groups: %d" s: sn-number-attack-groups)
	(up-chat-data-to-player my-player-number "sn-maximum-town-size: %d" s: sn-maximum-town-size)
	(up-chat-data-to-player my-player-number "increase-town-size-goal: %d" g: increase-town-size-goal)
	(up-chat-data-to-player my-player-number "housing-goal: %d" g: housing-goal)
	(acknowledge-taunt my-player-number 202))
(defrule
	(taunt-detected any-ally 203)
=>
	(up-chat-data-to-all "focus-player: %d" s: sn-focus-player-number)
	(up-chat-data-to-all "target-player: %d" s: sn-target-player-number)
	(up-chat-data-to-all "attack-goal: %d" g: attack-goal)
	(up-chat-data-to-all "position: %d" g: position-goal)
	(up-chat-data-to-all "sn-number-attack-groups: %d" s: sn-number-attack-groups)
	(up-chat-data-to-all "sn-maximum-town-size: %d" s: sn-maximum-town-size)
	(up-chat-data-to-all "increase-town-size-goal: %d" g: increase-town-size-goal)
	(up-chat-data-to-all "housing-goal: %d" g: housing-goal)
	(acknowledge-taunt every-ally 203))
(defrule
	(taunt-detected my-player-number 204)
=>
	(up-chat-data-to-player my-player-number "sn-camp-max-distance: %d" s: sn-camp-max-distance)
	(up-chat-data-to-player my-player-number "sn-number-explore-groups: %d" s: sn-number-explore-groups)
	(up-chat-data-to-player my-player-number "sn-total-number-explorers: %d" s: sn-total-number-explorers)
	(up-chat-data-to-player my-player-number "sn-cap-civilian-explorers: %d" s: sn-cap-civilian-explorers)
	(up-chat-data-to-player my-player-number "sn-percent-civilian-explorers: %d" s: sn-percent-civilian-explorers)
	(up-chat-data-to-player my-player-number "sn-cap-civilian-gatherers: %d" s: sn-cap-civilian-gatherers)
	(up-chat-data-to-player my-player-number "sn-percent-civilian-gatherers: %d" s: sn-percent-civilian-gatherers)
	(up-chat-data-to-player my-player-number "sn-current-age: %d" s: sn-current-age)
	(acknowledge-taunt my-player-number 204))
(defrule
	(taunt-detected my-player-number 205)
=>
	(up-chat-data-to-player my-player-number "Pop-cap: %d" c: max-pop)
	(up-chat-data-to-player my-player-number "sn-maximum-wood-drop-distance: %d" s: sn-maximum-wood-drop-distance)
	(up-chat-data-to-player my-player-number "max-navy: %d" g: max-navy)
	(up-chat-data-to-player my-player-number "victory-time: %d" g: victory-time)
	(acknowledge-taunt my-player-number 205))
(defrule
	(taunt-detected any-ally 205)
=>
	(up-chat-data-to-all "Pop-cap: %d" c: max-pop)
	(up-chat-data-to-all "sn-maximum-wood-drop-distance: %d" s: sn-maximum-wood-drop-distance)
	(up-chat-data-to-all "max-navy: %d" g: max-navy)
	(acknowledge-taunt every-ally 205))
(defrule
	(taunt-detected my-player-number 244)
=>
	(up-chat-data-to-player my-player-number "increase-town-size-goal: %d" g: increase-town-size-goal)
	(up-chat-data-to-player my-player-number "sn-military-level: %d" s: sn-military-level)
	(up-chat-data-to-player my-player-number "sn-resource-control: %d" s: sn-resource-control)
	(up-chat-data-to-player my-player-number "sn-minimum-water-body-size-for-dock: %d" s: sn-minimum-water-body-size-for-dock)
	(up-chat-data-to-player my-player-number "sn-dock-training-filter: %d" s: sn-dock-training-filter)
	(acknowledge-taunt my-player-number 244))
(defrule
	(taunt-detected my-player-number 245)
	(enemy-buildings-in-town)
=>
	(chat-local-to-self "1.")
	(acknowledge-taunt my-player-number 245))
(defrule
	(taunt-detected my-player-number 246)
=>
	(up-chat-data-to-player my-player-number "escrow-purpose-goal: %d" g: escrow-purpose-goal)
	(up-chat-data-to-player my-player-number "farm-goal: %d" g: farm-goal)
	(up-chat-data-to-player my-player-number "sn-minimum-attack-group-size: %d" s: sn-minimum-attack-group-size)
	(up-chat-data-to-player my-player-number "sn-sentry-distance: %d" s: sn-sentry-distance)
	(up-chat-data-to-player my-player-number "sn-enemy-sighted-response-distance: %d" s: sn-enemy-sighted-response-distance)
	(up-chat-data-to-player my-player-number "sn-minimum-water-body-size-for-dock: %d" s: sn-minimum-water-body-size-for-dock)
	(up-chat-data-to-player my-player-number "team-coordination-goal: %d" g: team-coordination-goal)
	(acknowledge-taunt my-player-number 246)
)
(defrule
	(taunt-detected any-ally 247)
=>
;	(up-chat-data-to-all "farm-goal: %d" g: farm-goal)
;	(up-chat-data-to-all "sn-minimum-attack-group-size: %d" s: sn-minimum-attack-group-size)
;	(up-chat-data-to-all "sn-sentry-distance: %d" s: sn-sentry-distance)
;	(up-chat-data-to-all "sn-enemy-sighted-response-distance: %d" s: sn-enemy-sighted-response-distance)
	(up-chat-data-to-all "sn-minimum-water-body-size-for-dock: %d" s: sn-minimum-water-body-size-for-dock)
	(up-chat-data-to-all "team-coordination-goal: %d" g: team-coordination-goal)
	(acknowledge-taunt every-ally 247)
)
(defrule
	(taunt-detected my-player-number 247)
=>
	(up-chat-data-to-player my-player-number "Food: %d" s: sn-food-gatherer-percentage)
	(up-chat-data-to-player my-player-number "Wood: %d" s: sn-wood-gatherer-percentage)
	(up-chat-data-to-player my-player-number "Gold: %d" s: sn-gold-gatherer-percentage)
	(up-chat-data-to-player my-player-number "Stone: %d" s: sn-stone-gatherer-percentage)
	(up-chat-data-to-player my-player-number "trade-units: %d" g: trade-units)
	(up-chat-data-to-player my-player-number "save-wood-goal: %d" g: save-wood-goal)
	(acknowledge-taunt my-player-number 247))
(defrule
	(taunt-detected any-computer 248)
	(not (taunt-detected my-player-number 248))
=>
	(up-chat-data-to-all "focus-player: %d" s: sn-focus-player-number)
	(up-chat-data-to-all "target-player: %d" s: sn-target-player-number)
	(up-chat-data-to-all "number of attack groups: %d" s: sn-number-attack-groups)
	(up-chat-data-to-all "minimum attack group size: %d" s: sn-minimum-attack-group-size)
	(up-chat-data-to-all "sentry distance: %d" s: sn-sentry-distance)
	(up-chat-data-to-all "enemy sighted response distance: %d" s: sn-enemy-sighted-response-distance)
	(up-chat-data-to-all "maximum town size: %d" s: sn-maximum-town-size)
	(up-chat-data-to-all "increase-town-size-goal: %d" g: increase-town-size-goal)
	(acknowledge-taunt this-any-computer 248)
)
#load-if-not-defined TEAMS-LOCKED
;(defrule
;	(not (stance-toward 1 ally))
;(or	(player-resigned 1)
;	(not (player-in-game 1)))
;	(players-military-population 1 < 2)
;	(players-building-type-count 1 castle < 1)
;	(players-building-type-count 1 watch-tower < 1)
;	(players-building-type-count 1 bombard-tower < 1)
;	(players-unit-type-count 1 monk < 1)
;=>
;	(set-stance 1 ally))
;(defrule
;	(not (stance-toward 2 ally))
;(or	(player-resigned 2)
;	(not (player-in-game 2)))
;	(players-military-population 2 < 2)
;	(players-building-type-count 2 castle < 1)
;	(players-building-type-count 2 watch-tower < 1)
;	(players-building-type-count 2 bombard-tower < 1)
;	(players-unit-type-count 2 monk < 1)
;=>
;	(set-stance 2 ally))
;(defrule
;	(not (stance-toward 3 ally))
;(or	(player-resigned 3)
;	(not (player-in-game 3)))
;	(players-military-population 3 < 2)
;	(players-building-type-count 3 castle < 1)
;	(players-building-type-count 3 watch-tower < 1)
;	(players-building-type-count 3 bombard-tower < 1)
;	(players-unit-type-count 3 monk < 1)
;=>
;	(set-stance 3 ally))
;(defrule
;	(not (stance-toward 4 ally))
;(or	(player-resigned 4)
;	(not (player-in-game 4)))
;	(players-military-population 4 < 2)
;	(players-building-type-count 4 castle < 1)
;	(players-building-type-count 4 watch-tower < 1)
;	(players-building-type-count 4 bombard-tower < 1)
;	(players-unit-type-count 4 monk < 1)
;=>
;	(set-stance 4 ally))
;(defrule
;	(not (stance-toward 5 ally))
;(or	(player-resigned 5)
;	(not (player-in-game 5)))
;	(players-military-population 5 < 2)
;	(players-building-type-count 5 castle < 1)
;	(players-building-type-count 5 watch-tower < 1)
;	(players-building-type-count 5 bombard-tower < 1)
;	(players-unit-type-count 5 monk < 1)
;=>
;	(set-stance 5 ally))
;(defrule
;	(not (stance-toward 6 ally))
;(or	(player-resigned 6)
;	(not (player-in-game 6)))
;	(players-military-population 6 < 2)
;	(players-building-type-count 6 castle < 1)
;	(players-building-type-count 6 watch-tower < 1)
;	(players-building-type-count 6 bombard-tower < 1)
;	(players-unit-type-count 6 monk < 1)
;=>
;	(set-stance 6 ally))
;(defrule
;	(not (stance-toward 7 ally))
;(or	(player-resigned 7)
;	(not (player-in-game 7)))
;	(players-military-population 7 < 2)
;	(players-building-type-count 7 castle < 1)
;	(players-building-type-count 7 watch-tower < 1)
;	(players-building-type-count 7 bombard-tower < 1)
;	(players-unit-type-count 7 monk < 1)
;=>
;	(set-stance 7 ally))
;(defrule
;	(not (stance-toward 8 ally))
;(or	(player-resigned 8)
;	(not (player-in-game 8)))
;	(players-military-population 8 < 2)
;	(players-building-type-count 8 castle < 1)
;	(players-building-type-count 8 watch-tower < 1)
;	(players-building-type-count 8 bombard-tower < 1)
;	(players-unit-type-count 8 monk < 1)
;=>
;	(set-stance 8 ally))

(defrule
(not	(player-in-game any-enemy))
(or	(town-under-attack)
(or	(up-compare-goal threat-time < 3000)
	(up-timer-status two-minute-timer != timer-running)))
	(game-time > 60)
	(player-in-game any-neutral)
=>
	(chat-to-player-using-id this-any-neutral 22034); "40 I have thought better of mine previous merciful plan."
	(set-stance this-any-neutral enemy)
	(up-jump-rule 1))
(defrule
(nor	(player-in-game any-enemy)
	(player-in-game any-neutral))
(or	(town-under-attack)
(or	(up-compare-goal threat-time < 3000)
	(up-timer-status two-minute-timer != timer-running)))
	(game-time > 60)
	(player-in-game any-ally)
=>
	(chat-to-player-using-id this-any-ally 22075); "40 In fact, I'm switching sides! Fare thee well, losers."
	(set-stance this-any-ally enemy)); end jump

(defrule
	(timer-triggered tribute-timer2)
=>
	(disable-timer tribute-timer2))
(defrule
(or	(players-stance any-human-ally neutral)
	(players-stance any-human-ally enemy))
	(up-timer-status tribute-timer2 != timer-running)
	(game-time > 60)
	(goal stanceg 0)
=>
	(chat-to-player-using-id this-any-human-ally 22017); "Set thy stance to Ally with me!"
	(set-stance this-any-human-ally neutral)
	(enable-timer stance 20)
	(set-goal stanceg 1))
(defrule
(nor	(players-stance any-human-neutral ally)
(or	(players-stance any-human-enemy neutral)
	(players-stance any-human-enemy ally)))
	(up-compare-goal request == 1)
=>
	(set-goal request 0))
(defrule
;t(nor	(player-in-game any-ally)
;t	(player-in-game 3))
	(players-stance any-human-neutral ally)
	(game-time > 2)
	(goal request 0)
	(goal stanceg 0)
=>
;	(up-get-player-fact this-any-human-neutral player-number 0 math-goal)
;	(up-chat-data-to-all "test: %d" g: math-goal)
	(chat-to-player-using-id this-any-human-neutral 22004); "Send me 200 each of wood, food, gold, and stone!"
	(chat-to-player-using-id this-any-human-neutral 22005); "If thou dost this thing, I shall join thy side."
	(set-goal request 1))
(defrule
;t(nor	(player-in-game any-ally)
;t	(player-in-game 3))
	(players-stance any-human-enemy ally)
	(game-time > 2)
	(goal request 0)
	(goal stanceg 0)
=>
;	(up-get-player-fact this-any-human-neutral player-number 0 math-goal)
;	(up-chat-data-to-all "test: %d" g: math-goal)
	(chat-to-player-using-id this-any-human-enemy 22006); "Send me 500 each of wood, food, gold, and stone!"
	(chat-to-player-using-id this-any-human-enemy 22005); "If thou dost this thing, I shall join thy side."
	(set-goal request 1))
(defrule
;t(nor	(player-in-game any-ally)
;t	(player-in-game 3))
	(players-stance any-human-enemy neutral)
	(game-time > 2)
	(goal request 0)
	(goal stanceg 0)
=>
;	(up-get-player-fact this-any-human-neutral player-number 0 math-goal)
;	(up-chat-data-to-all "test: %d" g: math-goal)
	(chat-to-player-using-id this-any-human-enemy 22006); "Send me 500 each of wood, food, gold, and stone!"
	(chat-to-player-using-id this-any-human-enemy 22005); "If thou dost this thing, I shall join thy side."
	(set-goal request 1))
;(defrule
;	(timer-triggered two-minute-timer)
;	(game-time >= 300)
;	(random-number < 25)
;	(goal request2 1)
;=>
;	(chat-to-player-using-id every-human 2304); "Alas! We could have made an unstoppable team."
;	(set-goal request2 0)
;	(disable-self))
(defrule
(nor	(player-in-game any-ally)
	(player-in-game 3))
	(timer-triggered two-minute-timer)
	(game-time >= 300)
(not	(stance-toward any-human ally))
	(players-building-type-count any-human market >= 1)
(or	(players-population any-human >= 50)
	(players-population any-human >= max-civ))
	(unit-type-count-total villager >= 1)
	(random-number < 25)
	(goal request2 0)
=>
	(chat-to-player-using-id every-human 22006); "Send me 500 each of wood, food, gold, and stone!"
	(chat-to-player-using-id every-human 22005); "If thou dost this thing, I shall join thy side."
	(set-goal request2 1)
	(disable-self))
(defrule
	(players-tribute-memory any-human-neutral wood >= 500)
	(players-tribute-memory any-human-neutral food >= 500)
	(players-tribute-memory any-human-neutral gold >= 500)
	(players-tribute-memory any-human-neutral stone >= 500)
	(goal request2 1)
=>
	(clear-tribute-memory this-any-human-neutral wood)
	(clear-tribute-memory this-any-human-neutral food)
	(clear-tribute-memory this-any-human-neutral gold)
	(clear-tribute-memory this-any-human-neutral stone)
	(chat-to-player-using-id this-any-human-neutral 22002); "I am grateful for thy tribute."
	(chat-to-player-using-id this-any-human-neutral 22003); "Let us be friends henceforth!"
	(enable-timer tribute-timer2 10)
	(set-stance this-any-human-neutral ally))
(defrule
	(players-tribute-memory any-human-enemy wood >= 500)
	(players-tribute-memory any-human-enemy food >= 500)
	(players-tribute-memory any-human-enemy gold >= 500)
	(players-tribute-memory any-human-enemy stone >= 500)
	(goal request2 1)
=>
	(clear-tribute-memory this-any-human-enemy wood)
	(clear-tribute-memory this-any-human-enemy food)
	(clear-tribute-memory this-any-human-enemy gold)
	(clear-tribute-memory this-any-human-enemy stone)
	(chat-to-player-using-id this-any-human-enemy 22016); "The goods we have obtained from thee are glorious indeed!"
	(chat-to-player-using-id this-any-human-enemy 2303); "You have made a wise choice -- together we shall rule the world."
	(enable-timer tribute-timer2 10)
	(set-stance this-any-human-enemy ally))
(defrule
	(players-tribute-memory any-human-neutral wood >= 200)
	(players-tribute-memory any-human-neutral food >= 200)
	(players-tribute-memory any-human-neutral gold >= 200)
	(players-tribute-memory any-human-neutral stone >= 200)
	(goal request 1)
=>
	(clear-tribute-memory this-any-human-neutral wood)
	(clear-tribute-memory this-any-human-neutral food)
	(clear-tribute-memory this-any-human-neutral gold)
	(clear-tribute-memory this-any-human-neutral stone)
	(chat-to-player-using-id this-any-human-neutral 22002); "I am grateful for thy tribute."
	(chat-to-player-using-id this-any-human-neutral 22003); "Let us be friends henceforth!"
	(set-stance this-any-human-neutral ally)
	(set-goal request 0))
(defrule
	(players-tribute-memory any-human-enemy wood >= 500)
	(players-tribute-memory any-human-enemy food >= 500)
	(players-tribute-memory any-human-enemy gold >= 500)
	(players-tribute-memory any-human-enemy stone >= 500)
	(goal request 1)
=>
	(clear-tribute-memory this-any-human-enemy wood)
	(clear-tribute-memory this-any-human-enemy food)
	(clear-tribute-memory this-any-human-enemy gold)
	(clear-tribute-memory this-any-human-enemy stone)
	(chat-to-player-using-id this-any-human-enemy 22016); "The goods we have obtained from thee are glorious indeed!"
	(chat-to-player-using-id this-any-human-enemy 2303); "You have made a wise choice -- together we shall rule the world."
	(set-stance this-any-human-enemy ally)
	(set-goal request 0))
(defrule
	(timer-triggered stance)
	(goal stanceg 1)
	(players-stance any-human-neutral ally)
=>
	(chat-to-player-using-id this-any-human-neutral 2302); "It was wise to do as I requested."
	(set-stance this-any-human-neutral ally)
	(disable-timer stance)
	(set-goal stanceg 0))
(defrule
	(timer-triggered stance)
	(goal stanceg 1)
(or	(players-stance any-human-neutral neutral)
	(players-stance any-human-neutral enemy))
=>
	(chat-to-player-using-id this-any-human-neutral 2305); "You dare defy me?! Prepare to die!"
	(set-stance this-any-human-neutral enemy)
	(disable-timer stance)
	(set-goal stanceg 0))
(defrule
	(players-stance any-computer-neutral enemy)
=>
;	(chat-to-player-using-id this-any-computer-neutral 22034); "40 I have thought better of mine previous merciful plan."
	(set-stance this-any-human-neutral enemy))
(defrule
(or	(players-stance any-computer-ally neutral)
	(players-stance any-computer-ally enemy))
=>
;	(chat-to-player-using-id this-any-computer-ally 2305); "You dare defy me?! Prepare to die!"
	(set-stance this-any-computer-ally enemy))
#end-if; not teams locked

(defrule ; large amounts of res required so that it doesn't chat every 60 seconds
(or	(players-tribute-memory any-human-ally wood >= 5001)
(or	(players-tribute-memory any-human-ally food >= 5001)
(or	(players-tribute-memory any-human-ally gold >= 5001)
	(players-tribute-memory any-human-ally stone >= 1501))))
=>
	(chat-to-player-using-id this-any-human-ally 22016); "The goods we have obtained from thee are glorious indeed!"
	(chat-to-player-using-id this-any-human-ally 22114); "Thanks! It will be wisely spent."
	(clear-tribute-memory this-any-human-ally wood)
	(clear-tribute-memory this-any-human-ally food)
	(clear-tribute-memory this-any-human-ally gold)
	(clear-tribute-memory this-any-human-ally stone))
(defrule
	(taunt-detected any-ally 42)
	(current-age == dark-age)
=>
	(chat-to-player-using-id this-any-ally 22165); "39 Alas, sire. I languish in the Dark Age."
	(acknowledge-taunt this-any-ally 42)
)
(defrule
	(taunt-detected any-ally 42)
	(current-age == feudal-age)
=>
	(chat-to-player-using-id this-any-ally 22166); "39 Sire, I have attained unto the Feudal Age."
	(acknowledge-taunt this-any-ally 42)
)
(defrule
	(taunt-detected any-ally 42)
	(current-age == castle-age)
=>
	(chat-to-player-using-id this-any-ally 22167); "39 Sire, I have attained unto the Castle Age!"
	(acknowledge-taunt this-any-ally 42)
)
(defrule
	(taunt-detected any-ally 42)
	(current-age == imperial-age)
=>
	(chat-to-player-using-id this-any-ally 22168); "39 Ah, sire! I am in the glorious Imperial Age"
	(acknowledge-taunt this-any-ally 42)
)

(defrule
	(taunt-detected any-ally 249)
=>
	(chat-to-player every-ally "111111.")
	(up-get-fact wood-amount 0 math-goal)
	(up-chat-data-to-player every-ally "Wood: %d" g: math-goal)
	(up-get-fact food-amount 0 math-goal)
	(up-chat-data-to-player every-ally "Food: %d" g: math-goal)
	(up-get-fact gold-amount 0 math-goal)
	(up-chat-data-to-player every-ally "Gold: %d" g: math-goal)
	(up-get-fact stone-amount 0 math-goal)
	(up-chat-data-to-player every-ally "Stone: %d" g: math-goal)
	(up-get-fact population 0 math-goal)
	(up-chat-data-to-player every-ally "Population: %d" g: math-goal)
	(acknowledge-taunt every-ally 249))

(defrule
(or	(taunt-detected my-player-number 250)
(or	(taunt-detected any-ally 250)
	(taunt-detected any-enemy 250)))
=>
	(chat-to-player my-player-number "The official HD AI - created by Promiskuitiv and Archon.")
	(chat-to-player every-ally "The official HD AI - created by Promiskuitiv and Archon.")
	(chat-to-enemies "The official HD AI - created by Promiskuitiv and Archon.")
;	(acknowledge-taunt my-player-number 250)
;	(acknowledge-taunt every-ally 250); strat
	(acknowledge-taunt every-enemy 250)
	(disable-self))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(game-time <= 62)
=>
	(chat-to-player my-player-number "I'm still selecting my strategy...")
	(chat-to-player every-ally "I'm still selecting my strategy...")
	(disable-self))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal strategy-goal sling)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I am slinging.")
	(chat-to-player every-ally "I am slinging.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal control-goal shot)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I am the shot.")
	(chat-to-player every-ally "I am the shot."))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal strategy-goal rush)
	(current-age < imperial-age)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'm going for a fast castle age.")
	(chat-to-player every-ally "I'm going for a fast castle age."))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal strategy-goal flush)
	(current-age < castle-age)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'm going to train an army in the feudal age.")
	(chat-to-player every-ally "I'm going to train an army in the feudal age."))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal strategy-goal fast-imp)
	(current-age < imperial-age)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'm going for a fast imperial age.")
	(chat-to-player every-ally "I'm going for a fast imperial age."))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal strategy-goal boom)
	(current-age < imperial-age)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I will boom.")
	(chat-to-player every-ally "I will boom."))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal monk)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on monks.")
	(chat-to-player every-ally "I'll focus on monks.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal eagle-warrior)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on eagle warriors.")
	(chat-to-player every-ally "I'll focus on eagle warriors.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
(or	(civ-selected byzantine)
	(civ-selected indian))
	(goal unit-goal knight)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on camels.")
	(chat-to-player every-ally "I'll focus on camels.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal knight)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on knights.")
	(chat-to-player every-ally "I'll focus on knights.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal battle-elephant)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on battle elephants.")
	(chat-to-player every-ally "I'll focus on battle elephants.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal archer)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on archers.")
	(chat-to-player every-ally "I'll focus on archers.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal cavalry-archer)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on cavalry archers.")
	(chat-to-player every-ally "I'll focus on cavalry archers.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal skirmisher)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on skirmishers")
	(chat-to-player every-ally "I'll focus on skirmishers")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal militiaman-line)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on infantry.")
	(chat-to-player every-ally "I'll focus on infantry.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal my-unique-unit-line)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on unique units.")
	(chat-to-player every-ally "I'll focus on unique units.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal scout-cavalry)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on scouts.")
	(chat-to-player every-ally "I'll focus on scouts.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal gunpowder-class)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus on gunpowder units.")
	(chat-to-player every-ally "I'll focus on gunpowder units.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(goal unit-goal scorpion)
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'll focus scorpions.")
	(chat-to-player every-ally "I'll focus scorpions.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
(or	(taunt-detected my-player-number 250)
	(taunt-detected any-ally 250))
	(game-time > 62)
=>
	(chat-to-player my-player-number "I'm not focussing on any particular unit.")
	(chat-to-player every-ally "I'm not focussing on any particular unit.")
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250))
(defrule
	(game-time > 62)
(or	(taunt-detected my-player-number 250)
(or	(taunt-detected any-ally 250)
	(taunt-detected any-enemy 250)))
=>
	(acknowledge-taunt my-player-number 250)
	(acknowledge-taunt every-ally 250)
	(acknowledge-taunt every-enemy 250)
	(disable-self))
#load-if-defined DARK-AGE-START
(defrule
	(players-current-age focus-player == dark-age)
	(players-military-population focus-player > 4); 1
	(game-time < 720)
	(unit-type-count-total militiaman-line < 4)
	(military-population < 5); no weird scenario
	(can-train militiaman-line)
=>
	(train militiaman-line))
#end-if

(defrule
(or	(game-type == 1)
(or	(game-type == 3)
(or	(game-type == 6); 5
	(game-type == 7)))); 6
=>
	(chat-to-player my-player-number "100")
	(up-jump-rule 12)
	(disable-self))
(defrule
(or	(taunt-detected any-human 101)
	(taunt-detected my-player-number 101))
=>
	(chat-to-player this-any-human 7110); "Yes."
	(acknowledge-taunt every-human 100)
	(acknowledge-taunt my-player-number 100)
	(acknowledge-taunt every-human 101)
	(acknowledge-taunt my-player-number 101))

(defrule
(or	(taunt-detected any-human 100)
(or	(taunt-detected my-player-number 100)
(or	(and	(population >= max-civ)
		(population >= 4))
(or	(military-population > max-civ); test; 25
(or	(military-population > 33); test; 25
(or	(up-timer-status resign-timer >= timer-running)
(or	(game-time < 666)
(or	(hold-relics)
(or	(building-type-count 826 >= 1)
;(or	(players-building-type-count any-ally 826 >= 1)
(or	(building-type-count wonder >= 1)
	(players-building-type-count any-ally wonder >= 1)))))))))));)
=>
	(up-jump-rule 10))

(defrule
	(strategic-number sn-military-level <= -1); -3
(or	(nand	(player-in-game any-ally)
		(players-population any-ally >= 75))
	(not	(player-in-game any-ally)))
	(unit-type-count-total villager < 1)
	(unit-type-count-total monk < 1)
	(building-type-count town-center < 1)
	(building-type-count monastery < 1)
=>
	(enable-timer resign-timer 5)
	(disable-self))
(defrule
(or	(player-in-game any-human-enemy)
	(and	(population <= 1); scout
		(housing-headroom <= 0)))
	(unit-type-count-total villager < 1)
	(unit-type-count-total monk < 1)
	(building-type-count market < 1)
	(building-type-count dock < 1)
	(building-type-count town-center < 1)
	(building-type-count monastery < 1)
=>
	(enable-timer resign-timer 5)
	(disable-self))
(defrule
;	(player-in-game any-human-enemy)
	(strategic-number sn-military-level <= -1); -3
(or	(nand	(player-in-game any-ally)
		(players-population any-ally >= 60))
	(not	(player-in-game any-ally)))
;	(building-type-count town-center < 1)
	(population < 5)
	(players-population any-enemy >= 60)
;(not	(player-in-game every-ally))
=>
	(enable-timer resign-timer 5)
	(disable-self))
(defrule
;	(player-in-game any-human-enemy)
	(strategic-number sn-military-level <= -1); -3
(or	(nand	(player-in-game any-ally)
		(players-population any-ally >= 75))
	(not	(player-in-game any-ally)))
;	(building-type-count town-center < 1)
	(population < 10)
	(players-population any-enemy >= 90)
;(not	(player-in-game every-ally))
=>
	(enable-timer resign-timer 5)
	(disable-self))
(defrule
;	(player-in-game any-human-enemy)
	(strategic-number sn-military-level <= -1); -3
(or	(nand	(player-in-game any-ally)
		(players-population any-ally >= 75))
	(not	(player-in-game any-ally)))
;	(building-type-count town-center < 1)
	(population < 22)
	(players-population any-enemy >= 120)
;(not	(player-in-game every-ally))
=>
	(enable-timer resign-timer 5)
	(disable-self))
(defrule
	(player-in-game any-human-enemy)
	(strategic-number sn-military-level <= -1); -3
(or	(nand	(player-in-game any-ally)
		(players-population any-ally >= 75))
	(not	(player-in-game any-ally)))
;	(building-type-count town-center < 1)
	(population < 35); potentially more in the rule below
	(players-population any-enemy >= 150)
;(not	(player-in-game every-ally))
=>
	(enable-timer resign-timer 5)
	(disable-self))
(defrule
	(player-in-game any-human-enemy)
	(strategic-number sn-military-level <= -1); -3
(or	(nand	(player-in-game any-ally)
		(players-population any-ally >= fourty-percent-pop))
	(not	(player-in-game any-ally)))
;	(building-type-count town-center < 1)
	(population < 55)
	(population < twenty-five-percent-pop)
	(players-population any-enemy > eighty-five-percent-pop)
;(not	(player-in-game every-ally))
=>
	(enable-timer resign-timer 5)
	(disable-self))
(defrule
(or	(player-in-game any-human-enemy)
	(not	(player-in-game any-human-ally)))
	(strategic-number sn-military-level <= -1); -3
	(population < 45)
(nand	(player-in-game any-ally)
	(players-population any-ally >= 75))
	(players-population any-enemy >= 175)
=>
	(enable-timer resign-timer 5)
	(disable-self))

(defrule
(or	(population >= max-civ)
(or	(player-in-game any-human-ally)
	(player-in-game every-ally))); also got other resign rules
=>
	(up-jump-rule 1))
(defrule
	(player-in-game any-human-enemy)
	(strategic-number sn-military-level <= -1); -3
(or	(nand	(player-in-game any-ally)
		(players-population any-ally >= 75))
	(not	(player-in-game any-ally)))
	(population < 55)
(or	(population < 45)
	(player-resigned any-ally))
	(players-population any-enemy >= 175)
; j(not	(player-in-game every-ally))
=>
	(enable-timer resign-timer 5)
	(disable-self)); end jump


#load-if-not-defined DIFFICULTY-HARDEST
#load-if-not-defined DIFFICULTY-HARD
#load-if-not-defined DIFFICULTY-MODERATE
(defrule
	(up-timer-status resign-timer >= timer-running)
(or	(building-type-count town-center >= 1)
(or	(building-type-count watch-tower >= 1)
(or	(building-type-count guard-tower >= 1)
(or	(building-type-count keep >= 1)
(or	(building-type-count bombard-tower >= 1)
	(building-type-count castle >= 1))))))
=>
	(delete-building town-center)
	(delete-building watch-tower)
	(delete-building guard-tower)
	(delete-building keep)
	(delete-building bombard-tower)
	(delete-building castle))
#end-if
#end-if
#end-if


(defrule
	(up-timer-status resign-timer >= timer-running)
=>
	(chat-to-all-using-range 22300 22)
	(chat-to-all-using-id 22322)
	(disable-self))
(defrule
	(timer-triggered resign-timer)
	(player-in-game any-ally)
=>
	(tribute-to-player this-any-ally wood 99999)
	(tribute-to-player this-any-ally food 99999)
	(tribute-to-player this-any-ally gold 99999)
	(tribute-to-player this-any-ally stone 99999)
	(resign))
(defrule
	(timer-triggered resign-timer)
(not	(player-in-game any-ally))
=>
	(resign))

(defrule
	(timer-triggered reset-timer)
=>
	(up-reset-unit c: -1)
	(disable-timer reset-timer))
(defrule
	(up-timer-status tensec != timer-running)
=>
	(disable-timer tensec)
	(enable-timer tensec 10))
(defrule
	(up-timer-status thirty != timer-running)
=>
	(disable-timer thirty)
	(enable-timer thirty 30))
(defrule
	(up-timer-status one-minute-timer != timer-running)
=>
	(disable-timer one-minute-timer)
	(set-strategic-number sn-food-modifier-percentage 0)
	(set-strategic-number sn-wood-modifier-percentage 0)
	(set-strategic-number sn-gold-modifier-percentage 0)
	(set-strategic-number sn-stone-modifier-percentage 0)
	(enable-timer one-minute-timer 60))
(defrule
	(up-timer-status two-minute-timer != timer-running)
=>
	(disable-timer two-minute-timer)
	(enable-timer two-minute-timer 120))
(defrule
	(taunt-detected any-computer 227)
=>
	(up-chat-data-to-all "Food: %d" s: sn-food-gatherer-percentage)
	(up-chat-data-to-all "Wood: %d" s: sn-wood-gatherer-percentage)
	(up-chat-data-to-all "Gold: %d" s: sn-gold-gatherer-percentage)
	(up-chat-data-to-all "Stone: %d" s: sn-stone-gatherer-percentage)
	(acknowledge-taunt this-any-computer 227))